<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Random Bits of Wisdom</title>
        <link>https://preslav.me/post/</link>
        <description>Recent content in Posts on Random Bits of Wisdom</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 21 Apr 2020 06:00:00 +0000</lastBuildDate>
        <atom:link href="https://preslav.me/post/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Still Hiring Updates: Chat, Company Cover Images, and a Company Suggestion Form</title>
            <link>https://preslav.me/2020/04/21/still-hiring-updates-chat-company-cover-images-and-a-company-suggestion-form/</link>
            <pubDate>Tue, 21 Apr 2020 06:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/04/21/still-hiring-updates-chat-company-cover-images-and-a-company-suggestion-form/</guid>
            <description>Word seems to be spreading around for my tiny side project. With more people who have taken interest in Still Hiring, it was only a matter of finding time to add some updates. I have pushed a few changes, which should be available to anyone who has signed up:
A chat section, which you can use to keep in touch with me and the other users.
Opening the same side menu, one can now suggest a company to be added to Still Hiring:</description>
            <content type="html"><![CDATA[<p>Word seems to be spreading around for my tiny side project. With more people who have taken interest in <a href="ddglk.glideapp.io" target="_blank">Still Hiring</a>, it was only a matter of finding time to add some updates. I have pushed a few changes, which should be available to anyone who has signed up:</p>

<p>A chat section, which you can use to keep in touch with me and the other users.</p>

<p><img src="/images/2020/04/stillhiring-1.png" alt="" /></p>

<p>Opening the same side menu, one can now suggest a company to be added to <a href="ddglk.glideapp.io" target="_blank">Still Hiring</a>:</p>

<p><img src="/images/2020/04/stillhiring-2.png" alt="" /></p>

<p>Last but not least, (some) companies now have beautiful cover images that come directly from their “careers” pages. Lazy as I am, I did not download those manually for the 200+ companies. A few people know that the &ldquo;database&rdquo; behind Still Hiring is a single Google Spreadsheet. Instead of manually going and scraping each and every single image, I used the opportunity to write a script directly inside the spreadsheet (yes, it is possible). That, and another side project of mine (<a href="https://noembed.preslav.me/" target="_blank">NoEmbed</a>) did the job just fine. It is quite a cool approach, and I will probably write about it in an upcoming blog post. Until then, stay tuned, and hopefully, <a href="ddglk.glideapp.io" target="_blank">Still Hiring</a> helps you find the job you’re looking for.</p>

<p><img src="/images/2020/04/stillhiring-3.png" alt="" /></p>
]]></content>
        </item>
        
        <item>
            <title>This Week I Learned</title>
            <link>https://preslav.me/2020/04/18/this-week-i-learned/</link>
            <pubDate>Sat, 18 Apr 2020 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/04/18/this-week-i-learned/</guid>
            <description>This Week I Learned (TWIL) is a weekly selection of interesting things and links I found useful during the week.
Apps and Tools  @media (max-width: 640px) { .embed-image { min-width: 100%; } }   goulinkh/podcast-cli  CLI podcast player. Contribute to goulinkh/podcast-cli development by creating an account on GitHub. https://github.com |  Created with NoEmbed    @media (max-width: 640px) { .embed-image { min-width: 100%; } }   ‎Data Jar  ‎Data Jar is a data store designed to be used with Shortcuts.</description>
            <content type="html"><![CDATA[

<p>This Week I Learned (TWIL) is a weekly selection of interesting things and links I found useful during the week.</p>

<hr />

<h2 id="apps-and-tools">Apps and Tools</h2>

<p>




<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://avatars3.githubusercontent.com/u/36013798?s=400&amp;v=4); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://github.com/goulinkh/podcast-cli">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        goulinkh/podcast-cli</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      CLI podcast player. Contribute to goulinkh/podcast-cli development by creating an account on GitHub.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://github.com/goulinkh/podcast-cli">https://github.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>





<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://is4-ssl.mzstatic.com/image/thumb/Purple113/v4/bd/b0/49/bdb04959-2984-f4fb-0e03-0c5393514798/AppIcon-1x_U007emarketing-0-7-0-sRGB-85-220.png/1200x630wa.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://apps.apple.com/app/data-jar/id1453273600">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        ‎Data Jar</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      ‎Data Jar is a data store designed to be used with Shortcuts. The data store lets you persist key-value pairs.

If you have used dictionaries and lists in Shortcuts, then you’ll find that the data format used by Data Jar is very similar.

- Extensive support for Shortcuts, enabling you to read and up…</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://apps.apple.com/app/data-jar/id1453273600">https://apps.apple.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div></p>

<h2 id="media">Media</h2>

<h3 id="podcasts">Podcasts</h3>

<p>I am a child of the 90s. Technically, I was born in 1987, but I spent much of my childhood and early teenage years during the 90s. As every kid of that era, I was mesmerized by early-age 3D games. During my growing up, there was no better example of what the digital future held for us, than Sony&rsquo;s PlayStation. As a kid, I only wanted to play great games, and console makers seemed like the good guys making sure we get to play them. I never even realized how rivalry, fierce competition, and trickery tactics there were between Sony, Nintendo, and SEGA at the time. This mini podcast series pulls the curtain of the story behind the stage.</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://is4-ssl.mzstatic.com/image/thumb/Podcasts113/v4/37/f9/c4/37f9c4c9-c628-bb4f-37b1-1b6fef8f18a7/mza_7296818625298515281.jpeg/1200x630wp.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://podcasts.apple.com/de/podcast/encore-nintendo-vs-sony-stabbed-in-the-back-1/id1335814741?i=1000464454091&amp;amp;l=en">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        ‎Business Wars: Encore: Nintendo vs Sony - Stabbed in the Back | 1 auf Apple Podcasts</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      ‎Sendung Business Wars, Folge Encore: Nintendo vs Sony - Stabbed in the Back | 1 – 05.02.2020</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://podcasts.apple.com/de/podcast/encore-nintendo-vs-sony-stabbed-in-the-back-1/id1335814741?i=1000464454091&amp;amp;l=en">https://podcasts.apple.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<h2 id="tips-and-tricks">Tips and Tricks</h2>

<h3 id="browser-design-mode">Browser Design Mode</h3>

<p>Check this out:
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">That feeling when you first discovered `document.designMode` <a href="https://t.co/bxA1otzCjN">pic.twitter.com/bxA1otzCjN</a></p>&mdash; Tomek Sułkowski (@sulco) <a href="https://twitter.com/sulco/status/1177559150563344384?ref_src=twsrc%5Etfw">September 27, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>

<p>As it turns out, setting <code>document.designMode=&quot;on&quot;</code> in the browser&rsquo;s console, will start a special mode on your browser, which allows you to edit any visible portion of any page. I have checked its existence on Chrome, Firefox, Brave (Chromium), and Safari. More of a visual gimmick than a really useful feature, if you ask me, but still, some people might find this useful.</p>

<h2 id="misc">Misc</h2>

<p><a href="https://atoms.com/products/atoms-everyday-mask" target="_blank">Atoms Everyday Mask</a></p>

<p>Comfortable non-medical face mask made from a blend of Polyester, Nylon, and PU with copper fused thread. They are hand washable up to 30 times, after which they behave like a regular cloth mask, just the copper will have worn down. Each mask comes with a lanyard and a pouch for safe storage.</p>
]]></content>
        </item>
        
        <item>
            <title>[Quote]: Developer Hegemony: The Future of Labor</title>
            <link>https://preslav.me/2020/04/15/quote-developer-hegemony-the-future-of-labor/</link>
            <pubDate>Wed, 15 Apr 2020 16:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/04/15/quote-developer-hegemony-the-future-of-labor/</guid>
            <description>A quote from the amazing book &amp;ldquo;Developer Hegemony&amp;rdquo; (Buy on Amazon) by Erik Dietrich:
 You need to stop viewing yourself as a software engineer II or a QA specialist or a dev manager. You need to stop viewing yourself as an employee of your (or any) company and start viewing yourself as the owner of your personal brand and operation. You are an island. You are other.
 How many of you, dear readers think this way?</description>
            <content type="html"><![CDATA[<p>A quote from the amazing book <a href="https://amzn.to/2Va55tn" target="_blank">&ldquo;Developer Hegemony&rdquo; (Buy on Amazon)</a> by Erik Dietrich:</p>

<blockquote>
<p>You need to stop viewing yourself as a software engineer II or a QA specialist or a dev manager. You need to stop viewing yourself as an employee of your (or any) company and start viewing yourself as the owner of your personal brand and operation. You are an island. You are <em>other.</em></p>
</blockquote>

<p>How many of you, dear readers think this way? Let me know in the comments below, or <a href="/contact">write me a message</a>.</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1493740696i/35051753._UY630_SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/35051753-developer-hegemony">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Developer Hegemony</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      It’s been said that software is eating the planet. The modern economy—the world itself—relies on technology. Demand for the people who ca...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/35051753-developer-hegemony">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>[Quote]: The Case for Apple to Postpone macOS 10.16 into 2021 </title>
            <link>https://preslav.me/2020/04/01/quote-the-case-for-apple-to-postpone-macos-10-16-into-2021/</link>
            <pubDate>Wed, 01 Apr 2020 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/04/01/quote-the-case-for-apple-to-postpone-macos-10-16-into-2021/</guid>
            <description>With so many errors reported throughout the lifetime of macOS Catalina, it kind of makes sense for Apple to slow down a bit and work on polishing it. Moving towards new features without fixing the existing bugs might be disastrous for the macOS ecosystem. But again, that&amp;rsquo;s Apple we&amp;rsquo;re talkign about. Anything can be expected from Apple. Like, deprecating macOS altogether, and eventually, replacing it with some some sort of iOS hybrid.</description>
            <content type="html"><![CDATA[<p>With so many errors reported throughout the lifetime of macOS Catalina, it kind of makes sense for Apple to slow down a bit and work on polishing it. Moving towards new features without fixing the existing bugs might be disastrous for the macOS ecosystem. But again, that&rsquo;s Apple we&rsquo;re talkign about. Anything can be expected from Apple. Like, deprecating macOS altogether, and eventually, replacing it with some some sort of iOS hybrid. Who knows.</p>

<p>via <a href="https://www.macobserver.com/columns-opinions/editorial/postpone-macos-10-16-till-2021/" target="_blank">The Case for Apple to Postpone macOS 10.16 into 2021</a></p>

<blockquote>
<p>We’re all struggling to stay safe and secure in macOS 10.15 Catalina or even 10.14 Mojave. And since new apps are being pressed into service for working at home, the last thing we need is a new version of macOS with its traditional teething pains—especially in post WWDC betas. We don’t need any rugs pulled out from under our collaboration apps. Let’s focus on stability and security until the pandemic has completely dissipated.</p>

<p>[…]</p>

<p>Our developer heroes have been complaining for years that they just can’t keep up with the fast-evolving structural and security changes in macOS every 12 months. A six month delay in 10.16 would provide critical time to iron out the kinks in their apps due to changes in Catalina. Not to mention relaxing stress on the developers due to concern for their family’s health.</p>
</blockquote>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://www.macobserver.com/wp-content/uploads/2019/03/Apple-iMac-2019-1200w.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.macobserver.com/columns-opinions/editorial/postpone-macos-10-16-till-2021">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        The Case for Apple to Postpone macOS 10.16 into 2021 - The Mac Observer</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Apple previews the next version of macOS at WWDC, then releases it late September. Now there&#39;s a case to be made to postpone macOS into 2021.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.macobserver.com/columns-opinions/editorial/postpone-macos-10-16-till-2021">https://www.macobserver.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>[Quote]: The President Is Trapped</title>
            <link>https://preslav.me/2020/03/30/quote-the-president-is-trapped/</link>
            <pubDate>Mon, 30 Mar 2020 10:38:05 +0200</pubDate>
            
            <guid>https://preslav.me/2020/03/30/quote-the-president-is-trapped/</guid>
            <description>Here is a quote from:
@media (max-width: 640px) { .embed-image { min-width: 100%; } }   The President Is Trapped  Trump is utterly unsuited to deal with this crisis, either intellectually or temperamentally. https://www.theatlantic.com |  Created with NoEmbed     The president will try to blame someone else—but in this case the “someone else” is a virus, not a Mexican immigrant or a reporter with a disability, not a Muslim or a Clinton, not a dead war hero or a family of a fallen soldier, not a special counsel or an NFL player who kneels for the national anthem.</description>
            <content type="html"><![CDATA[<p>Here is a quote from:</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://cdn.theatlantic.com/thumbor/Q-hLXmRtjhrQKlT1zeTN6pszmKc=/18x192:3831x2178/960x500/media/img/mt/2020/03/GettyImages_1189517812_bw/original.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.theatlantic.com/ideas/archive/2020/03/presidents-character-unequal-task/608743/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        The President Is Trapped</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Trump is utterly unsuited to deal with this crisis, either intellectually or temperamentally.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.theatlantic.com/ideas/archive/2020/03/presidents-character-unequal-task/608743/">https://www.theatlantic.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<blockquote>
<p>The president will try to blame someone else—but in this case the “someone else” is a virus, not a Mexican immigrant or a reporter with a disability, not a Muslim or a Clinton, not a dead war hero or a family of a fallen soldier, not a special counsel or an NFL player who kneels for the national anthem. He will try to use this crisis to pit one party against the other—but the virus will kill both Republicans and Democrats. He will try to create an alternate story to distract people from an inconvenient truth—but in this case, the public is too afraid, the story is too big, and the carnage will be too great to be distracted from it.</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>This Week in Social Distancing</title>
            <link>https://preslav.me/2020/03/29/this-week-in-social-distancing/</link>
            <pubDate>Sun, 29 Mar 2020 21:36:52 +0200</pubDate>
            
            <guid>https://preslav.me/2020/03/29/this-week-in-social-distancing/</guid>
            <description>This post is a sort of a time capsule. An attempt to journal my thoughts at this particular point in time. Despite the seemingly rough first part, I want it to have a hopeful message. I think that now is the time to re-align our principles, and set new trajectories.
Everywhere around the world, things are still developing faster than anyone had expected. More and more people getting infected, sick, and some, eventually dying.</description>
            <content type="html"><![CDATA[

<p>This post is a sort of a time capsule. An attempt to journal my thoughts at this particular point in time. Despite the seemingly rough first part, I want it to have a hopeful message. I think that now is the time to re-align our principles, and set new trajectories.</p>

<p>Everywhere around the world, things are still developing faster than anyone had expected. More and more people getting infected, sick, and some, eventually dying. Many of them among the classes of society, which would normally be spared the inconvenience of feeling the pain and misery of the masses. The Coronavirus is an equaliser. It spares no age, money, nor class of society.</p>

<p>For everyone else, things are moving along, albeit slowly, and under the dark forecast of an impeding economic depression. People in my circles have been fighting to keep their jobs for the first time in more than a decade. Many of them, up until a month ago still drank the cool-aid called having an impact on the world. The sincere belief that they actually help <em>make the world a better place</em>. That everything can be solved with technology. That there&rsquo;s more capital in the world than ever before. Until, the ship started sinking.</p>

<p>What surprised me is how many businesses went belly up in just a couple of months. I perfectly understand that the rules of the game have been tweaked to favour investing and chasing growth. But honestly, two months of salaries and rent and that&rsquo;s it? It&rsquo;s called high risk - high reward, I know. Yet, it still cracks me up when I think about it.</p>

<h2 id="what-doesn-t-kill-me-makes-me-stronger">What doesn&rsquo;t kill me, makes me stronger</h2>

<p>I like to believe in that maxim. If we survive this crisis, we will be stronger than ever. Actually, for some people, this situation is the perfect opportunity to start something new, hopefully having learned some mistakes from the past.</p>

<p>I, in particular, started using some of the time to go back to my personal projects. In only a couple of weeks, I have essentially managed to re-write a substantial part of <a href="https://mixtape.preslav.me/" target="_blank">Mixtape</a>&rsquo;s original code in Elixir. On top of that, there are now many new features that make the experience complete, albeit, still quite ugly. My motivation is higher than ever, but I am trying to just make things right, without overdoing them, or focusing on the useless things, such as growth.</p>

<p>Will <a href="https://mixtape.preslav.me/" target="_blank">Mixtape</a> become the YouTube of podcasting? Probably not, and I don&rsquo;t really care. It makes me happy, it serves my needs, and if it serves those of others, even better. I&rsquo;d much rather focus on making something that a small niche of customers would use and gladly support its development.</p>

<p>If it doesn&rsquo;t, so be it. Besides the time spent working on Mixtape, (which I consider valuable learning) keeping the app alive costs me nothing. The actual infrastructure costs at the moment sum up to around $7/m. Yes, you heard it right. A podcasting search engine, serving close to 3 million podcast episodes for just $7/m. And, I am not talking about some buzz-worthy cloud crap, but a tiny old-school VM that hosts Mixtape among a couple of other experiments. You can&rsquo;t beat that! <sup class="footnote-ref" id="fnref:1"><a href="#fn:1">1</a></sup></p>

<p>Enough boasting. This is not the idea of the post, but to hopefully reach out to others out there, lost in their own thoughts. Yes, it&rsquo;s a tough time, but usually being down at the bottom gives you a chance to change your life. Pick up your old ideas and dreams, and start slowly, step by step.</p>
<div class="footnotes">

<hr />

<ol>
<li id="fn:1">I am planning a separate post that focuses entirely on the recent development around Mixtape.
 <a class="footnote-return" href="#fnref:1"><sup>[return]</sup></a></li>
</ol>
</div>
]]></content>
        </item>
        
        <item>
            <title>Stay the F*** Home, Germany!</title>
            <link>https://preslav.me/2020/03/20/stay-the-f-home-germany/</link>
            <pubDate>Fri, 20 Mar 2020 11:28:11 +0100</pubDate>
            
            <guid>https://preslav.me/2020/03/20/stay-the-f-home-germany/</guid>
            <description>TL;DR: This is not a drill! Despite the seemingly low moratilty rate in Germany, nearly 3000 people might die by the end of April alone. We can help keep many of them alive.
Judging by how much people in Munich seem to enjoy the sunny days of spring, I am going to conclude that either:
 they all live in complete denial of the situation they already gave up they fully trust that no matter what happens, the German healthcare system would fix them in no time.</description>
            <content type="html"><![CDATA[

<p><strong>TL;DR: This is not a drill! Despite the seemingly low moratilty rate in Germany, nearly 3000 people might die by the end of April alone. We can help keep many of them alive.</strong></p>

<hr />

<p>Judging by how much people in Munich seem to enjoy the sunny days of spring, I am going to conclude that either:</p>

<ul>
<li>they all live in complete denial of the situation</li>
<li>they already gave up</li>
<li>they fully trust that no matter what happens, the German healthcare system would fix them in no time.</li>
<li>it’s sunny outside, so who cares</li>
</ul>

<p>I’ve said it before, and I will say it once again. Social distancing does not mean complete isolation. I am totally for taking walks and individually doing sports. But come on, having group picnics in the middle of all this, is <em>merely irresponsible</em>.</p>

<p>What’s being widely played out in the media, is how dire the situation is in Italy. In the meantime, despite the increasingly growing worries of the Germany government, some part of the population seems to be unaffected. The popular belief is that the low death rate in Germany (0.3% as of 20.03) vs. that of Italy (8.3% as of 20.03.) is a signal that the virus is either not as deadly as previously predicted, or that Germany is well-equipped to handle it. While any of these statements may be true, sources suggest that there may be a difference in counting the casualties between countries, as well as differences in test sample interpretation, etc. Therefore, I’d still stick to the global death rate of 4.1% (as of 20.03).</p>

<p>What one is clearly underestimating, is the number of German people who will potentially get infected in the coming days.</p>

<p>One does not need a Ph.D. in Data Science or some fancy AI tool to set up a simple prediction scenario of how the infection would roll out in the coming days. I used data from <a href="https://interaktiv.morgenpost.de/corona-virus-karte-infektionen-deutschland-weltweit/" target="_blank">Berliner Morgenpost</a> and only Google Sheets for that. As we all know, viruses spread in an exponential fashion, by one person potentially infecting several other individuals. Based on the data, I calculated and plotted the daily percentage multiplier for Germany, Italy, and Europe:</p>


    <figure class="left" >
        <img src="/images/2020/03/infection-acceleration.png"   />

        
            <figcaption class="center" >Infection acceleration: Germany, Italy and Europe</figcaption>
        
    </figure>



<p>Germany has the highest for now (~1.35), meaning, that on a single day, the total number of infected people becomes 1.35 times larger than the day before. Of course, assuming that:</p>

<ul>
<li>everyone ultimately gets infected, develops immunity, and breaks the cycle</li>
<li>measures are being taken to slow its spread</li>
<li>Doomsday comes true and everyone dies</li>
</ul>

<p>this multiplier will go down. And, looking at the data, it really seems to go down! Hurray! Let’s go out and have a beer!</p>

<p>Well, hold on a minute. The fact that seems to be slowing down does not mean that it won’t affect thousands or millions more on its way. Let’s try to do a rough prediction.:</p>

<p>This are the numbers that every source on the planet presents us every day:</p>


    <figure class="left" >
        <img src="/images/2020/03/infected-people.png"   />

        
            <figcaption class="center" ># infected people: Germany, Italy and Europe</figcaption>
        
    </figure>



<p>Germany being well below Italy, and both being well below the total for Europe. By all means, the situation in Italy seems far worse, and no one can question that. What no one can see however, is the dramatic turn of events, which may cause the situation in Italy to improve rapidly, and Germany to start nose-diving.</p>

<p>Let’s look at the spread acceleration from the first chart again. Using a simple trick known to statisticians and stock traders, known as <a href="https://www.daytrading.com/moving-linear-regression" target="_blank">Moving Linear Regression</a> we can plot a naive prediction model for the change of this acceleration by the end of April:</p>


    <figure class="left" >
        <img src="/images/2020/03/mlr-acceleration-prediction.png"   />

        
            <figcaption class="center" >MLR acceleration prediction: Germany, Italy and Europe</figcaption>
        
    </figure>



<p>Using my newly generated acceleration values, let me try and plot the total number of people that this model predicts would get infected by the end of April:</p>


    <figure class="left" >
        <img src="/images/2020/03/infection-prediction.png"   />

        
            <figcaption class="center" >Predicted # of infectied people: Germany, Italy and Europe</figcaption>
        
    </figure>



<p>And this is where the story turns upside down. The proactive measures taken by the Italian government seem to ultimately take an effect and flatten the curve significantly. Germany, on the other hand takes a leap into the hundreds of thousands, ultimately peaking by the end of April.</p>

<p>This is a dire scenario, and one that I am crossing fingers, my naive prediction model won’t even get close to. It assumes that no further measures are taken, and the social responsibility of the population remains at the same low level. At that level of reach, even with the lower death rate in Germany would result in thousands of deaths (950.000 * 0.003 results in 2850 people dead by the end of April alone).</p>

<p>Even if none of us or our families get affected by the Coronavirus (which I sincerely hope for), we bear a social responsibility for the people we encounter. As passive transmitters, we might be causing the death of somebody, Of many. We can prevent many of those deaths from happening by just staying home.</p>

<hr />

<h2 id="read-more">Read More</h2>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://miro.medium.com/max/1200/1*4kOJv8hmd5VFPcBL1mywsw.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://medium.com/@tomaspueyo/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Coronavirus: Why You Must Act Now</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Politicians and Business Leaders: What Should You Do and When?</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://medium.com/@tomaspueyo/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca">https://medium.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://staythefuckhome.com/images/meta/og.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://staythefuckhome.com/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        A Movement to Stop the COVID-19 Pandemic | #StayTheFuckHome</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Our governments can&#39;t do it alone, we have to take action now! Do your part and stay the fuck home!</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://staythefuckhome.com/">https://staythefuckhome.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>A Step Outside the Comfort Zone</title>
            <link>https://preslav.me/2020/03/14/a-step-outside-the-comfort-zone/</link>
            <pubDate>Sat, 14 Mar 2020 17:36:59 +0100</pubDate>
            
            <guid>https://preslav.me/2020/03/14/a-step-outside-the-comfort-zone/</guid>
            <description>Yes, the current situation sucks. Big time. It&amp;rsquo;s not good for anyone. Least of all, for the ones fighting for their lives, and those, doing their best to bring things back to normal. It needs patience and coordinated effort, but we&amp;rsquo;ll make it through, sooner or later. Patience and perseverance are hard, I know, but those are what has kept humanity moving forward. They would do so, for generations to come.</description>
            <content type="html"><![CDATA[<p>Yes, the current situation sucks. Big time. It&rsquo;s not good for anyone. Least of all, for the ones fighting for their lives, and those, doing their best to bring things back to normal. It needs patience and coordinated effort, but we&rsquo;ll make it through, sooner or later. Patience and perseverance are hard, I know, but those are what has kept humanity moving forward. They would do so, for generations to come. Also, the ability to adapt to a constantly changing environment.</p>

<p>I keep seeing people I follow, express disappointment with the current situation in social media. Not so much because of fear. More, because the measures to curb the outbreak, push people to step away from the comfort zone. As individuals, we have grown to protect what&rsquo;s perceive as ours so much, that the mere act of doing something for the common good can cause a backlash.</p>

<p>Let me tell you a secret. This isn&rsquo;t the first, and won&rsquo;t be the last time that society faces a test of this kind. In markets, such phenomena are known as &ldquo;corrections&rdquo;. A very long upward run ends up with a shard downward move, only to start going up again. So is life. It has ups and downs. The general rule for living life is this: enjoy it while you&rsquo;re up, but keep in mind that there will be a day when you&rsquo;ll be down again. Also, don&rsquo;t give up hope when you&rsquo;re down. You&rsquo;ll be up again soon enough.</p>

<p>The best we can do now (besides personal hygiene) is to swallow any pride and <a href="https://www.washingtonpost.com/graphics/2020/world/corona-simulator/" target="_blank">distance one another from social gatherings</a> for some time. Whoever can study or work remotely, <strong>must absolutely do so</strong>. This isn&rsquo;t a time to show heroism at school, or at work, because frankly, none of this actually matters. What matters is that the lives of others are above petty profits. Plus, social distancing is not about locking oneself down completely. Regular walking, and doing sports in the open are more than welcome. I personally keep my distance running routing. Only, not in places with lots of other people.</p>

<p>Moments like now are good for a reassessment of priorities, and for questioning the Status Quo. They confront the Old with the New, and put to the test much of what society takes for granted. As a technologist, I can&rsquo;t help but ask myself a few questions. For instance, whether information technology really stands up to the promise of making our lives better. Whether solutions &ldquo;powered by AI&rdquo; can help us solve the difficult problems in life, or just drive up product sales. Whether &ldquo;solutions&rdquo; is what they really are, or simply, an individual&rsquo;s pipe dream. Whether &ldquo;remote work&rdquo; was ever going to be the future, or just an employee perk for a privileged class of the workforce. Whether media omnipresence does us any good, or helps dig the trap deeper.  The list goes on and on.</p>

<p>Not many have found a positive answer by now.</p>

<p>Keep being strong and healthy!</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Sicily has figured out this whole self-isolation thing.<a href="https://twitter.com/hashtag/COVID19?src=hash&amp;ref_src=twsrc%5Etfw">#COVID19</a> <a href="https://twitter.com/hashtag/CoronavirusPandemic?src=hash&amp;ref_src=twsrc%5Etfw">#CoronavirusPandemic</a> <a href="https://t.co/93whPVtQcR">pic.twitter.com/93whPVtQcR</a></p>&mdash; John Nichols (@NicholsUprising) <a href="https://twitter.com/NicholsUprising/status/1238545438476730369?ref_src=twsrc%5Etfw">March 13, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
        </item>
        
        <item>
            <title>Elixir-Style Actors in Go</title>
            <link>https://preslav.me/2020/03/07/elixir-style-actors-in-golang/</link>
            <pubDate>Sat, 07 Mar 2020 17:04:29 +0100</pubDate>
            
            <guid>https://preslav.me/2020/03/07/elixir-style-actors-in-golang/</guid>
            <description>My foray into Elixir brought forward many more similarities between it and Go, than I originally expected. One of them is how both handle concurrency. With respect to that, creating Elixir-style stateful actors in Go is surprisingly easy. Answering the question, whether one needs them, or can make use of them, I’d leave to the user. If you approach me back saying that the same thing can be achieved using a channel or a map with sync.</description>
            <content type="html"><![CDATA[

<p>My foray into <a href="https://elixir-lang.org/" target="_blank">Elixir</a> brought forward many more similarities between it and Go, than I originally expected. One of them is how both handle concurrency. With respect to that, creating Elixir-style stateful actors in Go is surprisingly easy. Answering the question, whether one needs them, or can make use of them, I’d leave to the user. If you approach me back saying that the same thing can be achieved using a channel or a map with <code>sync.Mutex</code> slapped on it, you’d be (almost) right. Yet, it’s worth exploring different ways of thinking.</p>

<h1 id="a-10-000-foot-view-of-elixir">A 10.000-foot view of Elixir</h1>

<p>For those not aware of it, Elixir is a functional language. Everything runs inside an immutable function scope, and no state remains on the table. A function can only work on what it has been fed with. Functions reside inside modules and are being executed inside Erlang processes.</p>

<p>Technical differences aside, you can think of processes as the equivalent of Go’s goroutines. A function chain call runs inside a process/goroutine. When the outermost function returns, the process/goroutine ends. A process/goroutine can spawn other processes/goroutines to achieve concurrent execution of tasks. Go synchronizes over channels while Elixir over a message inbox that is built into every process. Using the built-in receive keyword, a function’s execution blocks inside a process, until a certain type of message gets received</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elixir" data-lang="elixir">receive do
    <span style="color:#75715e"># Don&#39;t get too caught up on the Elixir syntax.</span>
    <span style="color:#75715e"># For now, it is only important to know that :message_a is equivalent</span>
    <span style="color:#75715e"># to a string with the value of &#34;message_a&#34;</span>
    <span style="color:#75715e"># Those are called &#34;atoms&#34; and are quite often used in Ruby-like laguages</span>
    {<span style="color:#e6db74">:message_a</span>, msg} <span style="color:#f92672">-&gt;</span>
        do_something_with(msg)
end</code></pre></div>
<p>Fundamentally, this is the same as having a <a href="https://play.golang.org/p/rZkdET2ZhJl" target="_blank">goroutine block its execution waiting on a channel</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">message</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">val</span> <span style="color:#66d9ef">string</span>
}

<span style="color:#a6e22e">msgStream</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#a6e22e">message</span>)

<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">out</span> <span style="color:#66d9ef">chan</span> <span style="color:#a6e22e">message</span>) {
    <span style="color:#a6e22e">out</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">message</span>{<span style="color:#a6e22e">val</span>: <span style="color:#e6db74">&#34;hello world&#34;</span>}
}(<span style="color:#a6e22e">msgStream</span>)

<span style="color:#a6e22e">msg</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">msgStream</span>
<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%+v&#34;</span>, <span style="color:#a6e22e">msg</span>)</code></pre></div>
<p>Whether you are waiting on a message to arrive in your inbox, or explicitly set a blocking channel as a communication mechanism, to me, it describes the same paradigm.</p>

<h1 id="turn-goroutines-into-stateful-actors">Turn goroutines into stateful actors</h1>

<p>Clear until now? Alright. Let’s move on. I already mentioned that Elixir is a functional language. Everything that gets passed to a function is immutable, and the only way to change it, is to return a new version of it. This means that looping constructs are not possible, since it would imply modifying and keeping track of a counter variable. The way functional languages achieve the effect of looping is through recursion (or to be more precise tail recursion):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elixir" data-lang="elixir">def loop(<span style="color:#ae81ff">5</span>) do
    <span style="color:#75715e"># Elixir uses pattern-matching when choosing which function to call.</span>
    <span style="color:#75715e"># In our case, as soon as its gets a count == 5, it will stop the loop</span>
    <span style="color:#ae81ff">5</span>
end

def loop(count) do
    <span style="color:#75715e"># Just print the count, but use pipes (|&gt;)</span>
    <span style="color:#75715e"># instead of wrapping in a function call -&gt; IO.puts(count)</span>
    <span style="color:#75715e"># Pipes totally save the day, when you have multiple call chains</span>
    count
    <span style="color:#f92672">|&gt;</span> <span style="color:#a6e22e">IO</span><span style="color:#f92672">.</span>puts()

    loop(count <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
end</code></pre></div>
<h2 id="from-recursion-to-actors">From recursion to actors</h2>

<p>What if we take this recursion example and think of it as a never-ending loop. The first call to the function sets the initial state, and the function keeps calling itself ad-infinitum.</p>

<p>Now, this is where the purely functional paradigm breaks. We already learned that Erlang allows for other processes to communicate to us. This means that if our never ending recursive function receives a message from the outside, it can use its payload to call itself with a modified version of its initial state. Keeping in mind that receiving a message is a blocking operation, the process will simply linger around, not using any CPU resources, until our the right message arrives.</p>

<p>We can use the same messaging paradigm to poke inside the state of our never-ending function. Since it runs inside a separate process, the only way to do that is to send an appropriate message to it, pass our current process’ ID (PID) and let it send us a message back.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elixir" data-lang="elixir">defmodule <span style="color:#a6e22e">Calculator</span> do
    def start do
    <span style="color:#75715e"># creates a separate process with its own internal state</span>
    spawn(fn <span style="color:#f92672">-&gt;</span> loop(<span style="color:#ae81ff">0</span>) end)
    end

    defp loop(current_value) do
    new_value <span style="color:#f92672">=</span>
        receive do
        <span style="color:#75715e"># with this type of message, we can fetch the state of our calculator</span>
        {<span style="color:#e6db74">:get</span>, caller_pid} <span style="color:#f92672">-&gt;</span>
            send(caller_pid, {<span style="color:#e6db74">:response</span>, current_value})
            current_value

        <span style="color:#75715e"># with this type of message, we can modify the state of our calculator</span>
        {<span style="color:#e6db74">:add</span>, value} <span style="color:#f92672">-&gt;</span>
            current_value <span style="color:#f92672">+</span> value
        end

    loop(new_value)
    end
end</code></pre></div>
<p>Let&rsquo;s test our calculator process:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elixir" data-lang="elixir">defmodule <span style="color:#a6e22e">CalculatorTest</span> do
    def test_calculator do
    calc_pid <span style="color:#f92672">=</span> <span style="color:#a6e22e">Calculator</span><span style="color:#f92672">.</span>start()

        <span style="color:#75715e"># Like `receive`, `send` is built-in and take a PID, as well as a message</span>
        <span style="color:#75715e"># self() returns the process id (PID) of the current process</span>
        <span style="color:#75715e"># Like in Go, every piece of Elixir/Erlang code runs in a process</span>
    send(calc_pid, {<span style="color:#e6db74">:get</span>, self()})

        <span style="color:#75715e"># `receive` will block, until we receive a message,</span>
        <span style="color:#75715e"># that matches the expected pattern - {:response, value}</span>
    receive do
        {<span style="color:#e6db74">:response</span>, value} <span style="color:#f92672">-&gt;</span>
        value <span style="color:#f92672">|&gt;</span> <span style="color:#a6e22e">IO</span><span style="color:#f92672">.</span>puts()
    end

    send(calc_pid, {<span style="color:#e6db74">:add</span>, <span style="color:#ae81ff">100</span>})

    send(calc_pid, {<span style="color:#e6db74">:get</span>, self()})

    receive do
        {<span style="color:#e6db74">:response</span>, value} <span style="color:#f92672">-&gt;</span>
        value <span style="color:#f92672">|&gt;</span> <span style="color:#a6e22e">IO</span><span style="color:#f92672">.</span>puts()
    end
    end
end</code></pre></div>
<p>In essence, our never-ending function becomes what Elixir calls a stateful server process, an implementation of the <a href="https://en.wikipedia.org/wiki/Actor_model" target="_blank">Actor model</a>. Actors are great for isolating critical state and allowing for concurrent communication to it, ensuring that only one change happens at a time.</p>

<h2 id="from-elixir-to-go">From Elixir to Go</h2>

<p>Ok now that we know how things work in Elixir land, achieving the same thing on Go is super straightforward.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#a6e22e">in</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#a6e22e">message</span>)
    <span style="color:#a6e22e">out</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">int</span>)
    <span style="color:#66d9ef">go</span> <span style="color:#a6e22e">newCalculator</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">in</span>, <span style="color:#a6e22e">out</span>)

    <span style="color:#a6e22e">in</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">message</span>{<span style="color:#a6e22e">operation</span>: <span style="color:#e6db74">&#34;get&#34;</span>}
    <span style="color:#a6e22e">state</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">out</span>
    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Current state: %d&#34;</span>, <span style="color:#a6e22e">state</span>)

    <span style="color:#a6e22e">in</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">message</span>{<span style="color:#a6e22e">operation</span>: <span style="color:#e6db74">&#34;add&#34;</span>, <span style="color:#a6e22e">value</span>: <span style="color:#ae81ff">100</span>}
    <span style="color:#a6e22e">in</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">message</span>{<span style="color:#a6e22e">operation</span>: <span style="color:#e6db74">&#34;get&#34;</span>}
    <span style="color:#a6e22e">state</span> = <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">out</span>
    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Current state: %d&#34;</span>, <span style="color:#a6e22e">state</span>)
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">message</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">operation</span> <span style="color:#66d9ef">string</span>
    <span style="color:#a6e22e">value</span>     <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">newCalculator</span>(<span style="color:#a6e22e">initialState</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">in</span> <span style="color:#66d9ef">chan</span> <span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">out</span> <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">int</span>) {
    <span style="color:#a6e22e">state</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">initialState</span>
    <span style="color:#66d9ef">for</span> {
        <span style="color:#a6e22e">p</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">in</span>
        <span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">operation</span> {
        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;add&#34;</span>:
            <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Adding %d to the current state&#34;</span>, <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">value</span>)
            <span style="color:#a6e22e">state</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">value</span>

        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;get&#34;</span>:
            <span style="color:#a6e22e">out</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">state</span>
        }
    }
}</code></pre></div>
<p>One thing to note is that since we can use an infinite-loop, we should just use that, especially, since based on my knowledge Go is not particularly optimized for long-cycle recursion. But the main premise remains the same. A function gets called with some initial state and returns a channel. The function starts an endless loop, blocking on the channel. If we push a value to that channel, the function will take it, update the state and block again.</p>

<h1 id="what-are-actors-good-for">What are actors good for?</h1>

<h2 id="private-state">Private state</h2>

<p>So, now that we unveiled the mystery behind actors, it’s a good point to discuss what they might be useful for.</p>

<p>One thing that immediately comes to mind, is achieving globally accessible, but truly private, synchronized state. This is currently achieved with the use of channels, <code>sync.Mutex</code>, or the new <code>sync.Map</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">SynchronizedMap</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">RWMutex</span>
    <span style="color:#a6e22e">internal</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{}
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">rm</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">SynchronizedMap</span>) <span style="color:#a6e22e">Store</span>(<span style="color:#a6e22e">key</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">value</span> <span style="color:#66d9ef">interface</span>{}) {
    <span style="color:#a6e22e">rm</span>.<span style="color:#a6e22e">Lock</span>()
    <span style="color:#a6e22e">rm</span>.<span style="color:#a6e22e">internal</span>[<span style="color:#a6e22e">key</span>] = <span style="color:#a6e22e">value</span>
    <span style="color:#a6e22e">rm</span>.<span style="color:#a6e22e">Unlock</span>()
}</code></pre></div>
<p>The fragility of this approach comes from the fact that there is no real private state in Go applications. The map we named <code>internal</code> in the above example is only protected from outside access. Any piece of code inside the same package as our <code>SynchronizedMap</code> can freely access and modify its internals, leading to unexpected consequences. While this shouldn&rsquo;t be a concern in most cases, it&rsquo;s definitely good to keep in mind for special cases.</p>

<h2 id="stateful-autonomous-agents">Stateful autonomous agents</h2>

<p>Where the Actor model shines is the orchestration of systems of Actor instances - autonomous agents. Each Actor instance is able to change its state, reacting to the messages sent to it. Actor instances can easily spawn other Actor instances, which only the creating actors (supervisors) have control over (private state, remember). Supervisors can also take over failures of the actors their are responsible for, potentially, killing some off, and restarting them with a clean state. Taking this example to extremes, groroutines being fairly cheap, one can easily imagine a swarm of thousands of Actor instances, in a deeply nested hierarchy, with multiple levels of supervising actors taking over their &ldquo;progeny&rdquo;. This is the unique selling proposition of Erlang, but as I hope to have demonstrated, could be replicated in Go too.</p>

<p>As discussed in the beginning, I would leave the discussions about this approach&rsquo;s practicality, as well as its other applications to the reader. I would love to hear your thoughts. Do not hesitate to drop me a comment, or start a new discussion.</p>

<hr />

<h1 id="resources">Resources</h1>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1519435676i/38732242._UY630_SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/38732242-elixir-in-action">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Elixir in Action</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The Elixir language blends the battle-tested power and stability of the Erlang virtual machine with an approachable and expressive syntax...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/38732242-elixir-in-action">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<p>One of the best books about learning Elixir, and certainly, the one that inspired me to write this post. Saša Jurić&rsquo;s explanations are clear and demonstrative, especially on complex topics such as this one. If you like this blog, and would love to support my passion for reading great books, you can <a href="https://amzn.to/39AXJ6T" target="_blank">buy it on Amazon using this special link</a>. Thanks!</p>
]]></content>
        </item>
        
        <item>
            <title>Use the Git History to Identify Pain Points in Any Project</title>
            <link>https://preslav.me/2020/03/01/use-the-git-history/</link>
            <pubDate>Sun, 01 Mar 2020 17:50:14 +0100</pubDate>
            
            <guid>https://preslav.me/2020/03/01/use-the-git-history/</guid>
            <description>Have you heard of Adam Tornhill&amp;rsquo;s work? If not, I highly recommend that you set some time aside and check out Your Code as a Crime Scene or Software DEsign X-Rays. In both books, the author dives into a bit of an unexplored territory - looking at the evolution of a codebase as a factor of its changes over time.
Much of the tooling we use to mitigate tech debt is preventive.</description>
            <content type="html"><![CDATA[

<p>Have you heard of <a href="https://twitter.com/AdamTornhill" target="_blank">Adam Tornhill</a>&rsquo;s work? If not, I highly recommend that you set some time aside and check out <em><a href="https://amzn.to/32DM1G9" target="_blank">Your Code as a Crime Scene</a></em> or <em><a href="https://amzn.to/2vtbjdR" target="_blank">Software DEsign X-Rays</a></em>. In both books, the author dives into a bit of an unexplored territory - looking at the evolution of a codebase as a factor of its changes over time.</p>

<p>Much of the tooling we use to mitigate tech debt is preventive. Compilers, linters, static analysis tools, etc. All trying to prevent developers from checking in code, which might cause problems in the future. What all of these fail to catch, is that the code might be perfectly fine, and still not lead to a well functioning system.</p>

<p>The process of software development is as much about <em>developer-to-self</em> and <em>developer-to-others</em> interaction, as much as it is about making the machine do certain things. This interaction can only be let to grow, and reflected upon at certain periods of time. And what better tool to help us do that, than the one we use on a daily basis - git.</p>

<h2 id="git-to-the-rescue">Git to the rescue</h2>

<p>In his books, Tornhill discuses multiple evolutions on the same basic idea - files that change often (with some exceptions) tend to be the ones where most issues occur, hence the need to change. We rarely think of this simple fact when we work on the same project for a long period of time. Yet, when on-boarding a new team member, looking up an unknown piece of code, or simply, retrospecting over your code, such knowledge can be invaluable.</p>

<p>The code is surprisingly simple:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git log --format<span style="color:#f92672">=</span>format: --name-only | egrep -v <span style="color:#e6db74">&#39;^$&#39;</span> | sort | uniq -c | sort -rg | head -10</code></pre></div>
<p>What I like to do is add such commands to my list of git aliases. Open up your <code>~/.gitconfig</code> file and add the following two lines to the <code>[Aliases]</code>section:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">code-changes <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;!git log --format=format: --name-only | egrep -v &#39;^</span>$<span style="color:#e6db74">&#39; | sort | uniq -c | sort -rg | head -10&#34;</span>
cc <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;!git code-changes&#34;</span></code></pre></div>
<p>What this will do, is sort the files in your project by their number of changes, and take the first 10. Those are the ones where most changes have occurred over time, consequently there is a higher chance that those will require the most changes in the future.</p>

<p>Let&rsquo;s do an example. I chose (completely by accident) to look at Gorm, one of the popular Go ORMs. These are the top 10 files that appear at the time of this writing:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#ae81ff">272</span> main.go
<span style="color:#ae81ff">246</span> scope.go
<span style="color:#ae81ff">208</span> README.md
<span style="color:#ae81ff">155</span> scope_private.go
<span style="color:#ae81ff">117</span> main_test.go
<span style="color:#ae81ff">116</span> gorm_test.go
<span style="color:#ae81ff">105</span> model_struct.go
<span style="color:#ae81ff">97</span> <span style="color:#66d9ef">do</span>.go
<span style="color:#ae81ff">81</span> model.go
<span style="color:#ae81ff">80</span> utils.go</code></pre></div>
<p>Excluding the <code>README.md</code> file, one can clearly see some dominance of certain files over others. Many Go projects start out from a single <code>main.go</code> file, and with time, logic phases out to other files and packages. In our case, this is certainly not the case. Gorm &rsquo;s <code>main.go</code> is one big chunk of code, which can easily get split into two or more files, especially, since multiple files can share the same Go package.</p>

<p>I&rsquo;ll go into more details on Adam Tornhil&rsquo;s work. There&rsquo;s even more interesting stuff, like identifying which files get changed together, etc. For now, take this simple trick and try to use it on the projects you&rsquo;re working on, or the libraries you frequently work with.</p>

<p>What do you see?</p>

<hr />

<p>




<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1502137388i/23627482._SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/23627482-your-code-as-a-crime-scene">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Your Code As a Crime Scene</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Jack the Ripper and legacy codebases have more in common than you&#39;d think. Inspired by forensic psychology methods, you&#39;ll learn strategi...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/23627482-your-code-as-a-crime-scene">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>





<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1511521225i/36517037._SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/36517037-software-design-x-rays">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Software Design X-Rays</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Are you working on a codebase where cost overruns, death marches, and heroic fights with legacy code monsters are the norm? Battle these ...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/36517037-software-design-x-rays">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div></p>
]]></content>
        </item>
        
    </channel>
</rss>

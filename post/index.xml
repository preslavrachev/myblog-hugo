<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Random Bits of Wisdom</title>
        <link>https://preslav.me/post/</link>
        <description>Recent content in Posts on Random Bits of Wisdom</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sat, 02 May 2020 22:00:00 +0000</lastBuildDate>
        <atom:link href="https://preslav.me/post/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Planks and Reading</title>
            <link>https://preslav.me/2020/05/02/planks-and-reading/</link>
            <pubDate>Sat, 02 May 2020 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/05/02/planks-and-reading/</guid>
            <description>Strengthen your body, while broadening your mind</description>
            <content type="html"><![CDATA[<p>You all have seen it at least once. The stupid tele commercial promising a ripped six pack, while watching TV, or reading a book on the couch. I&rsquo;II be honest with you. I can&rsquo;t promise you any of that. Yet, in a way, if you follow my advice, you can develop a routine that can strengthen your body and mind. Especially now, when moving outside is difficult.</p>

<p>Planks are a simple, but an incredibly effective exercise. Get on all fours, as if for doing a push up, but rather, use your forearms, instead of your hands. Got it? Now, don&rsquo;t move and simply lock your body in this position, for as long as you can.</p>

<p>That&rsquo;s really it! If you were expecting a page-long explanation of how to do a plank, I am sorry to disappoint you. Keeping your posture straight (like the lady on the photo above) is the most important bit. This part cannot be explained in any other way than trying it right away. You may pause your reading, try a simple plank, but stop at the slightest sign of pressure. Even if that&rsquo;s just a few seconds, don&rsquo;t worry too much about it. You&rsquo;Il be able to ramp it up, as days move on. You don&rsquo;t want to get injured right at the start.</p>

<p>I started doing planks back in December last year. It was more or less out of necessity. Due to an issue with my wrist, I had to cut my push-up routine. I had heard about planks before, but never taken them seriously. Staying locked in one place for minutes without moving seemed pointless. Yet, I had no choice. I needed some sort of an alternative to push-ups, and being able to use my forearms instead was crucial. I am so grateful I did. I learned two very important things:</p>

<p>First and foremost, sustaining a plank is much harder than
it looks. The first time I tried, I crashed on the floor after merely 40s. I decided to not discourage myself after the first attempt, but set a long-term goal - say, be able to lock my body for 10 minutes. Like training for a marathon, I wouldn&rsquo;t go for the 42km directly, but use my first attempt as a base and gradually increase until I reach my milestone. I have been doing planks almost every day since, increasing my time with 5s on every next attempt, until I reached 5 minutes without a break. I have been plateauing consistently between 5 and 6 mins for the past month, preparing my mind and body for conquering the 10-minute mark.</p>

<p>The second thing came, once I were able to lock my body in a plank position for more than two minutes regularly. The obvious effects on my upper and lower back, glutes, and abs were hard to ignore. I&rsquo;ve been practicing distance running non-stop since 2016, but only after a few 2-min morning planks, did I notice the positive change in my running stride. I felt, as if the pressure that usually hit straight in my knees, now spread across a whole new group of muscles, which had largely been un-utilized.</p>

<p>What&rsquo;s more though, similar to a distance run, sustaining a plank for a long time is just as much an exercise for the body, as it is por the mind. Success in each is largely the result of either getting your mind distracted from the task at hand, or learning how to quiet it down. Taming the mind is extremely difficult, and I am still in my early days of learning how to do it. Keeping the mind distracted, however is not that hard. I found that the best way to not think about the pain and pressure during a plank was reading a book.</p>

<p>Fixating my mind on the pages, I would often not notice how a few minutes have passed. What&rsquo;s even cooler, since humans are essentially a slightly more advanced version of Pavlov&rsquo;s Dog, one can associate and turn one behavior into a habit, with the drive for another. Thus, the drive to read a few more pages will push you to sustain the plank a little longer. The opposite is also true. The strive to get better at the exercise would crave some more distraction and focusing the mind somewhere else, e.g at a few more pages.</p>

<p>Try it and you won&rsquo;t be sorry.</p>
]]></content>
        </item>
        
        <item>
            <title>Still Hiring Updates: Chat, Company Cover Images, and a Company Suggestion Form</title>
            <link>https://preslav.me/2020/04/21/still-hiring-updates-chat-company-cover-images-and-a-company-suggestion-form/</link>
            <pubDate>Tue, 21 Apr 2020 06:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/04/21/still-hiring-updates-chat-company-cover-images-and-a-company-suggestion-form/</guid>
            <description>Word seems to be spreading around for my tiny side project. With more people who have taken interest in Still Hiring, it was only a matter of finding time to add some updates. I have pushed a few changes, which should be available to anyone who has signed up</description>
            <content type="html"><![CDATA[<p>Word seems to be spreading around for my tiny side project. With more people who have taken interest in <a href="ddglk.glideapp.io">Still Hiring</a>, it was only a matter of finding time to add some updates. I have pushed a few changes, which should be available to anyone who has signed up:</p>

<p>A chat section, which you can use to keep in touch with me and the other users.</p>

<p><img src="/images/2020/04/stillhiring-1.png" alt="" /></p>

<p>Opening the same side menu, one can now suggest a company to be added to <a href="ddglk.glideapp.io">Still Hiring</a>:</p>

<p><img src="/images/2020/04/stillhiring-2.png" alt="" /></p>

<p>Last but not least, (some) companies now have beautiful cover images that come directly from their “careers” pages. Lazy as I am, I did not download those manually for the 200+ companies. A few people know that the &ldquo;database&rdquo; behind Still Hiring is a single Google Spreadsheet. Instead of manually going and scraping each and every single image, I used the opportunity to write a script directly inside the spreadsheet (yes, it is possible). That, and another side project of mine (<a href="https://noembed.preslav.me/">NoEmbed</a>) did the job just fine. It is quite a cool approach, and I will probably write about it in an upcoming blog post. Until then, stay tuned, and hopefully, <a href="ddglk.glideapp.io">Still Hiring</a> helps you find the job you’re looking for.</p>

<p><img src="/images/2020/04/stillhiring-3.png" alt="" /></p>
]]></content>
        </item>
        
        <item>
            <title>Programmers: Stop Calling Yourselves Engineers</title>
            <link>https://preslav.me/2020/04/20/quote-programmers-stop-calling-yourselves-engineers/</link>
            <pubDate>Mon, 20 Apr 2020 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/04/20/quote-programmers-stop-calling-yourselves-engineers/</guid>
            <description>It undermines a long tradition of designing and building infrastructure in the public interest.</description>
            <content type="html"><![CDATA[




<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://cdn.theatlantic.com/thumbor/EtveNQlIVL6QQi3l--R39qn6ZeQ=/0x3047:4125x5195/960x500/media/img/mt/2015/11/42_22146022/original.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.theatlantic.com/technology/archive/2015/11/programmers-should-not-call-themselves-engineers/414271/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Programmers: Stop Calling Yourselves Engineers</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      It undermines a long tradition of designing and building infrastructure in the public interest.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.theatlantic.com/technology/archive/2015/11/programmers-should-not-call-themselves-engineers/414271/">https://www.theatlantic.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<p>Here is a great <a href="https://www.theatlantic.com/technology/archive/2015/11/programmers-should-not-call-themselves-engineers/414271/">essay by The Atlantic</a>, which is just as relevant today, as it was 5 years ago (at the time of its writing):</p>

<blockquote>
<p>Would-be “engineers” are encouraged to think of every project as a potential business ready to scale and sell, rather than as a process of long-term training in disciplines where concerns for social welfare become paramount. Engineering has always been a well-paid profession, but computing is turning it into a type of speculative finance rather than a calling.</p>
</blockquote>

<p>then it goes on</p>

<blockquote>
<p>Engineerwashing entails a shift from the noun to the verbal sense of “engineer.” An engineer is a professional who designs, builds, and maintains systems. But to engineer means skillfully, artfully, or even deviously contriving an outcome. To engineer is to jury-rig, to get something working more or less, for a time. Sufficiently enough that it serves an immediately obvious purpose, but without concern or perhaps even awareness of its longevity.</p>
</blockquote>

<p>Here are my 2 cents on the whole thing. Having seen one or two cycles in the software industry, I cannot help but agree wholeheartedly. As much as it hurts to say it, we, the IT folks are engineers as much as kids on the beach building a sand castle are engineers. Being an engineer is more than just being able to build something. It is an obligation to sustain. To build things that withstand the test of time. Not just hop from one cool piece of tech to the next, leaving vapour behind. It&rsquo;s hard, I am guilty of this too. But we can all accept it, and strive to become real engineers.</p>

<p>If anyone would like to argue with me on this subject, feel free to do so <a href="https://twitter.com/preslavrachev">on Twitter</a>. You can also <a href="https://twitter.com/preslavrachev">follow</a> me there for more ramblings ;)</p>
]]></content>
        </item>
        
        <item>
            <title>This Week I Learned</title>
            <link>https://preslav.me/2020/04/18/this-week-i-learned/</link>
            <pubDate>Sat, 18 Apr 2020 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/04/18/this-week-i-learned/</guid>
            <description>This Week I Learned (TWIL) is a weekly selection of interesting things and links I found useful during the week.</description>
            <content type="html"><![CDATA[

<p>This Week I Learned (TWIL) is a weekly selection of interesting things and links I found useful during the week.</p>

<hr />

<h2 id="apps-and-tools">Apps and Tools</h2>

<p>




<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://avatars3.githubusercontent.com/u/36013798?s=400&amp;v=4); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://github.com/goulinkh/podcast-cli">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        goulinkh/podcast-cli</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Podcast CLI player. Contribute to goulinkh/podcast-cli development by creating an account on GitHub.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://github.com/goulinkh/podcast-cli">https://github.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>





<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://is5-ssl.mzstatic.com/image/thumb/Purple113/v4/b1/eb/d4/b1ebd41f-8bc0-c4e2-e5ee-6f0f776d08b0/AppIcon-1x_U007emarketing-0-7-0-sRGB-85-220.png/1200x630wa.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://apps.apple.com/app/data-jar/id1453273600">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        ‎Data Jar</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      ‎Data Jar is a data store designed to be used with Shortcuts. The data store lets you persist key-value pairs.

If you have used dictionaries and lists in Shortcuts, then you’ll find that the data format used by Data Jar is very similar.

- Extensive support for Shortcuts, enabling you to read and up…</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://apps.apple.com/app/data-jar/id1453273600">https://apps.apple.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div></p>

<h2 id="media">Media</h2>

<h3 id="podcasts">Podcasts</h3>

<p>I am a child of the 90s. Technically, I was born in 1987, but I spent much of my childhood and early teenage years during the 90s. As every kid of that era, I was mesmerized by early-age 3D games. During my growing up, there was no better example of what the digital future held for us, than Sony&rsquo;s PlayStation. As a kid, I only wanted to play great games, and console makers seemed like the good guys making sure we get to play them. I never even realized how rivalry, fierce competition, and trickery tactics there were between Sony, Nintendo, and SEGA at the time. This mini podcast series pulls the curtain of the story behind the stage.</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://is4-ssl.mzstatic.com/image/thumb/Podcasts113/v4/37/f9/c4/37f9c4c9-c628-bb4f-37b1-1b6fef8f18a7/mza_7296818625298515281.jpeg/1200x630wp.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://podcasts.apple.com/de/podcast/encore-nintendo-vs-sony-stabbed-in-the-back-1/id1335814741?i=1000464454091&amp;amp;l=en">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        ‎Business Wars: Nintendo vs Sony - Stabbed in the Back | 1 auf Apple Podcasts</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      ‎Sendung Business Wars, Folge Nintendo vs Sony - Stabbed in the Back | 1 – 05.02.2020</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://podcasts.apple.com/de/podcast/encore-nintendo-vs-sony-stabbed-in-the-back-1/id1335814741?i=1000464454091&amp;amp;l=en">https://podcasts.apple.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<h2 id="tips-and-tricks">Tips and Tricks</h2>

<h3 id="browser-design-mode">Browser Design Mode</h3>

<p>Check this out:
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">That feeling when you first discovered `document.designMode` <a href="https://t.co/bxA1otzCjN">pic.twitter.com/bxA1otzCjN</a></p>&mdash; Tomek Sułkowski (@sulco) <a href="https://twitter.com/sulco/status/1177559150563344384?ref_src=twsrc%5Etfw">September 27, 2019</a></blockquote>
</p>

<p>As it turns out, setting <code>document.designMode=&quot;on&quot;</code> in the browser&rsquo;s console, will start a special mode on your browser, which allows you to edit any visible portion of any page. I have checked its existence on Chrome, Firefox, Brave (Chromium), and Safari. More of a visual gimmick than a really useful feature, if you ask me, but still, some people might find this useful.</p>

<h2 id="misc">Misc</h2>

<p><a href="https://atoms.com/products/atoms-everyday-mask">Atoms Everyday Mask</a></p>

<p>Comfortable non-medical face mask made from a blend of Polyester, Nylon, and PU with copper fused thread. They are hand washable up to 30 times, after which they behave like a regular cloth mask, just the copper will have worn down. Each mask comes with a lanyard and a pouch for safe storage.</p>
]]></content>
        </item>
        
        <item>
            <title>Developer Hegemony: The Future of Labor</title>
            <link>https://preslav.me/2020/04/15/quote-developer-hegemony-the-future-of-labor/</link>
            <pubDate>Wed, 15 Apr 2020 16:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/04/15/quote-developer-hegemony-the-future-of-labor/</guid>
            <description>You need to stop viewing yourself as a software engineer II or a QA specialist or a dev manager. You need to stop viewing yourself as an employee of your (or any) company and start viewing yourself as the owner of your personal brand and operation. You are an island. You are other.</description>
            <content type="html"><![CDATA[<p>A quote from the amazing book <a href="https://amzn.to/2Va55tn">&ldquo;Developer Hegemony&rdquo; (Buy on Amazon)</a> by Erik Dietrich:</p>

<blockquote>
<p>You need to stop viewing yourself as a software engineer II or a QA specialist or a dev manager. You need to stop viewing yourself as an employee of your (or any) company and start viewing yourself as the owner of your personal brand and operation. You are an island. You are <em>other.</em></p>
</blockquote>

<p>How many of you, dear readers think this way? Let me know in the comments below, or <a href="/contact">write me a message</a>.</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1493740696i/35051753._UY630_SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/35051753-developer-hegemony">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Developer Hegemony</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      It’s been said that software is eating the planet. The modern economy—the world itself—relies on technology. Demand for the people who ca...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/35051753-developer-hegemony">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>[Quote]: The Case for Apple to Postpone macOS 10.16 into 2021 </title>
            <link>https://preslav.me/2020/04/01/quote-the-case-for-apple-to-postpone-macos-10-16-into-2021/</link>
            <pubDate>Wed, 01 Apr 2020 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/04/01/quote-the-case-for-apple-to-postpone-macos-10-16-into-2021/</guid>
            <description>With so many errors reported throughout the lifetime of macOS Catalina, it kind of makes sense for Apple to slow down a bit and work on polishing it. Moving towards new features without fixing the existing bugs might be disastrous for the macOS ecosystem. But again, that&amp;rsquo;s Apple we&amp;rsquo;re talkign about. Anything can be expected from Apple. Like, deprecating macOS altogether, and eventually, replacing it with some some sort of iOS hybrid.</description>
            <content type="html"><![CDATA[<p>With so many errors reported throughout the lifetime of macOS Catalina, it kind of makes sense for Apple to slow down a bit and work on polishing it. Moving towards new features without fixing the existing bugs might be disastrous for the macOS ecosystem. But again, that&rsquo;s Apple we&rsquo;re talkign about. Anything can be expected from Apple. Like, deprecating macOS altogether, and eventually, replacing it with some some sort of iOS hybrid. Who knows.</p>

<p>via <a href="https://www.macobserver.com/columns-opinions/editorial/postpone-macos-10-16-till-2021/">The Case for Apple to Postpone macOS 10.16 into 2021</a></p>

<blockquote>
<p>We’re all struggling to stay safe and secure in macOS 10.15 Catalina or even 10.14 Mojave. And since new apps are being pressed into service for working at home, the last thing we need is a new version of macOS with its traditional teething pains—especially in post WWDC betas. We don’t need any rugs pulled out from under our collaboration apps. Let’s focus on stability and security until the pandemic has completely dissipated.</p>

<p>[…]</p>

<p>Our developer heroes have been complaining for years that they just can’t keep up with the fast-evolving structural and security changes in macOS every 12 months. A six month delay in 10.16 would provide critical time to iron out the kinks in their apps due to changes in Catalina. Not to mention relaxing stress on the developers due to concern for their family’s health.</p>
</blockquote>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://www.macobserver.com/wp-content/uploads/2019/03/Apple-iMac-2019-1200w.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.macobserver.com/columns-opinions/editorial/postpone-macos-10-16-till-2021">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        The Case for Apple to Postpone macOS 10.16 into 2021 - The Mac Observer</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Apple previews the next version of macOS at WWDC, then releases it late September. Now there&#39;s a case to be made to postpone macOS into 2021.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.macobserver.com/columns-opinions/editorial/postpone-macos-10-16-till-2021">https://www.macobserver.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>[Quote]: The President Is Trapped</title>
            <link>https://preslav.me/2020/03/30/quote-the-president-is-trapped/</link>
            <pubDate>Mon, 30 Mar 2020 10:38:05 +0200</pubDate>
            
            <guid>https://preslav.me/2020/03/30/quote-the-president-is-trapped/</guid>
            <description>Here is a quote from:
@media (max-width: 640px) { .embed-image { min-width: 100%; } }   The President Is Trapped  Trump is utterly unsuited to deal with this crisis, either intellectually or temperamentally. https://www.theatlantic.com |  Created with NoEmbed     The president will try to blame someone else—but in this case the “someone else” is a virus, not a Mexican immigrant or a reporter with a disability, not a Muslim or a Clinton, not a dead war hero or a family of a fallen soldier, not a special counsel or an NFL player who kneels for the national anthem.</description>
            <content type="html"><![CDATA[<p>Here is a quote from:</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://cdn.theatlantic.com/thumbor/Q-hLXmRtjhrQKlT1zeTN6pszmKc=/18x192:3831x2178/960x500/media/img/mt/2020/03/GettyImages_1189517812_bw/original.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.theatlantic.com/ideas/archive/2020/03/presidents-character-unequal-task/608743/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        The President Is Trapped</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Trump is utterly unsuited to deal with this crisis, either intellectually or temperamentally.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.theatlantic.com/ideas/archive/2020/03/presidents-character-unequal-task/608743/">https://www.theatlantic.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<blockquote>
<p>The president will try to blame someone else—but in this case the “someone else” is a virus, not a Mexican immigrant or a reporter with a disability, not a Muslim or a Clinton, not a dead war hero or a family of a fallen soldier, not a special counsel or an NFL player who kneels for the national anthem. He will try to use this crisis to pit one party against the other—but the virus will kill both Republicans and Democrats. He will try to create an alternate story to distract people from an inconvenient truth—but in this case, the public is too afraid, the story is too big, and the carnage will be too great to be distracted from it.</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>This Week in Social Distancing</title>
            <link>https://preslav.me/2020/03/29/this-week-in-social-distancing/</link>
            <pubDate>Sun, 29 Mar 2020 21:36:52 +0200</pubDate>
            
            <guid>https://preslav.me/2020/03/29/this-week-in-social-distancing/</guid>
            <description>This post is a sort of a time capsule. An attempt to journal my thoughts at this particular point in time. Despite the seemingly rough first part, I want it to have a hopeful message. I think that now is the time to re-align our principles, and set new trajectories.
Everywhere around the world, things are still developing faster than anyone had expected. More and more people getting infected, sick, and some, eventually dying.</description>
            <content type="html"><![CDATA[

<p>This post is a sort of a time capsule. An attempt to journal my thoughts at this particular point in time. Despite the seemingly rough first part, I want it to have a hopeful message. I think that now is the time to re-align our principles, and set new trajectories.</p>

<p>Everywhere around the world, things are still developing faster than anyone had expected. More and more people getting infected, sick, and some, eventually dying. Many of them among the classes of society, which would normally be spared the inconvenience of feeling the pain and misery of the masses. The Coronavirus is an equaliser. It spares no age, money, nor class of society.</p>

<p>For everyone else, things are moving along, albeit slowly, and under the dark forecast of an impeding economic depression. People in my circles have been fighting to keep their jobs for the first time in more than a decade. Many of them, up until a month ago still drank the cool-aid called having an impact on the world. The sincere belief that they actually help <em>make the world a better place</em>. That everything can be solved with technology. That there&rsquo;s more capital in the world than ever before. Until, the ship started sinking.</p>

<p>What surprised me is how many businesses went belly up in just a couple of months. I perfectly understand that the rules of the game have been tweaked to favour investing and chasing growth. But honestly, two months of salaries and rent and that&rsquo;s it? It&rsquo;s called high risk - high reward, I know. Yet, it still cracks me up when I think about it.</p>

<h2 id="what-doesn-t-kill-me-makes-me-stronger">What doesn&rsquo;t kill me, makes me stronger</h2>

<p>I like to believe in that maxim. If we survive this crisis, we will be stronger than ever. Actually, for some people, this situation is the perfect opportunity to start something new, hopefully having learned some mistakes from the past.</p>

<p>I, in particular, started using some of the time to go back to my personal projects. In only a couple of weeks, I have essentially managed to re-write a substantial part of <a href="https://mixtape.preslav.me/">Mixtape</a>&rsquo;s original code in Elixir. On top of that, there are now many new features that make the experience complete, albeit, still quite ugly. My motivation is higher than ever, but I am trying to just make things right, without overdoing them, or focusing on the useless things, such as growth.</p>

<p>Will <a href="https://mixtape.preslav.me/">Mixtape</a> become the YouTube of podcasting? Probably not, and I don&rsquo;t really care. It makes me happy, it serves my needs, and if it serves those of others, even better. I&rsquo;d much rather focus on making something that a small niche of customers would use and gladly support its development.</p>

<p>If it doesn&rsquo;t, so be it. Besides the time spent working on Mixtape, (which I consider valuable learning) keeping the app alive costs me nothing. The actual infrastructure costs at the moment sum up to around $7/m. Yes, you heard it right. A podcasting search engine, serving close to 3 million podcast episodes for just $7/m. And, I am not talking about some buzz-worthy cloud crap, but a tiny old-school VM that hosts Mixtape among a couple of other experiments. You can&rsquo;t beat that! <sup class="footnote-ref" id="fnref:1"><a href="#fn:1">1</a></sup></p>

<p>Enough boasting. This is not the idea of the post, but to hopefully reach out to others out there, lost in their own thoughts. Yes, it&rsquo;s a tough time, but usually being down at the bottom gives you a chance to change your life. Pick up your old ideas and dreams, and start slowly, step by step.</p>
<div class="footnotes">

<hr />

<ol>
<li id="fn:1">I am planning a separate post that focuses entirely on the recent development around Mixtape.
 <a class="footnote-return" href="#fnref:1">^</a></li>
</ol>
</div>
]]></content>
        </item>
        
        <item>
            <title>Stay the F*** Home, Germany!</title>
            <link>https://preslav.me/2020/03/20/stay-the-f-home-germany/</link>
            <pubDate>Fri, 20 Mar 2020 11:28:11 +0100</pubDate>
            
            <guid>https://preslav.me/2020/03/20/stay-the-f-home-germany/</guid>
            <description>TL;DR: This is not a drill! Despite the seemingly low moratilty rate in Germany, nearly 3000 people might die by the end of April alone. We can help keep many of them alive.
Judging by how much people in Munich seem to enjoy the sunny days of spring, I am going to conclude that either:
 they all live in complete denial of the situation they already gave up they fully trust that no matter what happens, the German healthcare system would fix them in no time.</description>
            <content type="html"><![CDATA[

<p><strong>TL;DR: This is not a drill! Despite the seemingly low moratilty rate in Germany, nearly 3000 people might die by the end of April alone. We can help keep many of them alive.</strong></p>

<hr />

<p>Judging by how much people in Munich seem to enjoy the sunny days of spring, I am going to conclude that either:</p>

<ul>
<li>they all live in complete denial of the situation</li>
<li>they already gave up</li>
<li>they fully trust that no matter what happens, the German healthcare system would fix them in no time.</li>
<li>it’s sunny outside, so who cares</li>
</ul>

<p>I’ve said it before, and I will say it once again. Social distancing does not mean complete isolation. I am totally for taking walks and individually doing sports. But come on, having group picnics in the middle of all this, is <em>merely irresponsible</em>.</p>

<p>What’s being widely played out in the media, is how dire the situation is in Italy. In the meantime, despite the increasingly growing worries of the Germany government, some part of the population seems to be unaffected. The popular belief is that the low death rate in Germany (0.3% as of 20.03) vs. that of Italy (8.3% as of 20.03.) is a signal that the virus is either not as deadly as previously predicted, or that Germany is well-equipped to handle it. While any of these statements may be true, sources suggest that there may be a difference in counting the casualties between countries, as well as differences in test sample interpretation, etc. Therefore, I’d still stick to the global death rate of 4.1% (as of 20.03).</p>

<p>What one is clearly underestimating, is the number of German people who will potentially get infected in the coming days.</p>

<p>One does not need a Ph.D. in Data Science or some fancy AI tool to set up a simple prediction scenario of how the infection would roll out in the coming days. I used data from <a href="https://interaktiv.morgenpost.de/corona-virus-karte-infektionen-deutschland-weltweit/">Berliner Morgenpost</a> and only Google Sheets for that. As we all know, viruses spread in an exponential fashion, by one person potentially infecting several other individuals. Based on the data, I calculated and plotted the daily percentage multiplier for Germany, Italy, and Europe:</p>

<figure>
    <img src="/images/2020/03/infection-acceleration.png"
         alt="Infection acceleration: Germany, Italy and Europe"/> <figcaption>
            <h4>Infection acceleration: Germany, Italy and Europe</h4><p>Infection acceleration: Germany, Italy and Europe</p>
        </figcaption>
</figure>


<p>Germany has the highest for now (~1.35), meaning, that on a single day, the total number of infected people becomes 1.35 times larger than the day before. Of course, assuming that:</p>

<ul>
<li>everyone ultimately gets infected, develops immunity, and breaks the cycle</li>
<li>measures are being taken to slow its spread</li>
<li>Doomsday comes true and everyone dies</li>
</ul>

<p>this multiplier will go down. And, looking at the data, it really seems to go down! Hurray! Let’s go out and have a beer!</p>

<p>Well, hold on a minute. The fact that seems to be slowing down does not mean that it won’t affect thousands or millions more on its way. Let’s try to do a rough prediction.:</p>

<p>This are the numbers that every source on the planet presents us every day:</p>

<figure>
    <img src="/images/2020/03/infected-people.png"
         alt="infected people: Germany, Italy and Europe"/> <figcaption>
            <h4>Number of infected people: Germany, Italy and Europe</h4><p><h1 id="infected-people-germany-italy-and-europe">infected people: Germany, Italy and Europe</h1></p>
        </figcaption>
</figure>


<p>Germany being well below Italy, and both being well below the total for Europe. By all means, the situation in Italy seems far worse, and no one can question that. What no one can see however, is the dramatic turn of events, which may cause the situation in Italy to improve rapidly, and Germany to start nose-diving.</p>

<p>Let’s look at the spread acceleration from the first chart again. Using a simple trick known to statisticians and stock traders, known as <a href="https://www.daytrading.com/moving-linear-regression">Moving Linear Regression</a> we can plot a naive prediction model for the change of this acceleration by the end of April:</p>

<figure>
    <img src="/images/2020/03/mlr-acceleration-prediction.png"
         alt="MLR acceleration prediction: Germany, Italy and Europe"/> <figcaption>
            <h4>MLR acceleration prediction: Germany, Italy and Europe</h4><p>MLR acceleration prediction: Germany, Italy and Europe</p>
        </figcaption>
</figure>


<p>Using my newly generated acceleration values, let me try and plot the total number of people that this model predicts would get infected by the end of April:</p>

<figure>
    <img src="/images/2020/03/infection-prediction.png"
         alt="Predicted # of infectied people: Germany, Italy and Europe"/> <figcaption>
            <h4>Predicted number of infectied people: Germany, Italy and Europe</h4><p>Predicted # of infectied people: Germany, Italy and Europe</p>
        </figcaption>
</figure>


<p>And this is where the story turns upside down. The proactive measures taken by the Italian government seem to ultimately take an effect and flatten the curve significantly. Germany, on the other hand takes a leap into the hundreds of thousands, ultimately peaking by the end of April.</p>

<p>This is a dire scenario, and one that I am crossing fingers, my naive prediction model won’t even get close to. It assumes that no further measures are taken, and the social responsibility of the population remains at the same low level. At that level of reach, even with the lower death rate in Germany would result in thousands of deaths (950.000 * 0.003 results in 2850 people dead by the end of April alone).</p>

<p>Even if none of us or our families get affected by the Coronavirus (which I sincerely hope for), we bear a social responsibility for the people we encounter. As passive transmitters, we might be causing the death of somebody, Of many. We can prevent many of those deaths from happening by just staying home.</p>

<hr />

<h2 id="read-more">Read More</h2>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://miro.medium.com/max/1200/1*4kOJv8hmd5VFPcBL1mywsw.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://medium.com/@tomaspueyo/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Coronavirus: Why You Must Act Now</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Politicians and Business Leaders: What Should You Do and When?</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://medium.com/@tomaspueyo/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca">https://medium.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://staythefuckhome.com/images/meta/og.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://staythefuckhome.com/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        A Movement to Stop the COVID-19 Pandemic | #StayTheFuckHome</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Our governments can&#39;t do it alone, we have to take action now! Do your part and stay the fuck home!</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://staythefuckhome.com/">https://staythefuckhome.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>A Step Outside the Comfort Zone</title>
            <link>https://preslav.me/2020/03/14/a-step-outside-the-comfort-zone/</link>
            <pubDate>Sat, 14 Mar 2020 17:36:59 +0100</pubDate>
            
            <guid>https://preslav.me/2020/03/14/a-step-outside-the-comfort-zone/</guid>
            <description>Yes, the current situation sucks. Big time. It&amp;rsquo;s not good for anyone. Least of all, for the ones fighting for their lives, and those, doing their best to bring things back to normal. It needs patience and coordinated effort, but we&amp;rsquo;ll make it through, sooner or later. Patience and perseverance are hard, I know, but those are what has kept humanity moving forward. They would do so, for generations to come.</description>
            <content type="html"><![CDATA[<p>Yes, the current situation sucks. Big time. It&rsquo;s not good for anyone. Least of all, for the ones fighting for their lives, and those, doing their best to bring things back to normal. It needs patience and coordinated effort, but we&rsquo;ll make it through, sooner or later. Patience and perseverance are hard, I know, but those are what has kept humanity moving forward. They would do so, for generations to come. Also, the ability to adapt to a constantly changing environment.</p>

<p>I keep seeing people I follow, express disappointment with the current situation in social media. Not so much because of fear. More, because the measures to curb the outbreak, push people to step away from the comfort zone. As individuals, we have grown to protect what&rsquo;s perceive as ours so much, that the mere act of doing something for the common good can cause a backlash.</p>

<p>Let me tell you a secret. This isn&rsquo;t the first, and won&rsquo;t be the last time that society faces a test of this kind. In markets, such phenomena are known as &ldquo;corrections&rdquo;. A very long upward run ends up with a shard downward move, only to start going up again. So is life. It has ups and downs. The general rule for living life is this: enjoy it while you&rsquo;re up, but keep in mind that there will be a day when you&rsquo;ll be down again. Also, don&rsquo;t give up hope when you&rsquo;re down. You&rsquo;ll be up again soon enough.</p>

<p>The best we can do now (besides personal hygiene) is to swallow any pride and <a href="https://www.washingtonpost.com/graphics/2020/world/corona-simulator/">distance one another from social gatherings</a> for some time. Whoever can study or work remotely, <strong>must absolutely do so</strong>. This isn&rsquo;t a time to show heroism at school, or at work, because frankly, none of this actually matters. What matters is that the lives of others are above petty profits. Plus, social distancing is not about locking oneself down completely. Regular walking, and doing sports in the open are more than welcome. I personally keep my distance running routing. Only, not in places with lots of other people.</p>

<p>Moments like now are good for a reassessment of priorities, and for questioning the Status Quo. They confront the Old with the New, and put to the test much of what society takes for granted. As a technologist, I can&rsquo;t help but ask myself a few questions. For instance, whether information technology really stands up to the promise of making our lives better. Whether solutions &ldquo;powered by AI&rdquo; can help us solve the difficult problems in life, or just drive up product sales. Whether &ldquo;solutions&rdquo; is what they really are, or simply, an individual&rsquo;s pipe dream. Whether &ldquo;remote work&rdquo; was ever going to be the future, or just an employee perk for a privileged class of the workforce. Whether media omnipresence does us any good, or helps dig the trap deeper.  The list goes on and on.</p>

<p>Not many have found a positive answer by now.</p>

<p>Keep being strong and healthy!</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Sicily has figured out this whole self-isolation thing.<a href="https://twitter.com/hashtag/COVID19?src=hash&amp;ref_src=twsrc%5Etfw">#COVID19</a> <a href="https://twitter.com/hashtag/CoronavirusPandemic?src=hash&amp;ref_src=twsrc%5Etfw">#CoronavirusPandemic</a> <a href="https://t.co/93whPVtQcR">pic.twitter.com/93whPVtQcR</a></p>&mdash; John Nichols (@NicholsUprising) <a href="https://twitter.com/NicholsUprising/status/1238545438476730369?ref_src=twsrc%5Etfw">March 13, 2020</a></blockquote>

]]></content>
        </item>
        
        <item>
            <title>Elixir-Style Actors in Go</title>
            <link>https://preslav.me/2020/03/07/elixir-style-actors-in-golang/</link>
            <pubDate>Sat, 07 Mar 2020 17:04:29 +0100</pubDate>
            
            <guid>https://preslav.me/2020/03/07/elixir-style-actors-in-golang/</guid>
            <description>My foray into Elixir brought forward many more similarities between it and Go, than I originally expected. One of them is how both handle concurrency. With respect to that, creating Elixir-style stateful actors in Go is surprisingly easy. Answering the question, whether one needs them, or can make use of them, I’d leave to the user. If you approach me back saying that the same thing can be achieved using a channel or a map with sync.</description>
            <content type="html"><![CDATA[

<p>My foray into <a href="https://elixir-lang.org/">Elixir</a> brought forward many more similarities between it and Go, than I originally expected. One of them is how both handle concurrency. With respect to that, creating Elixir-style stateful actors in Go is surprisingly easy. Answering the question, whether one needs them, or can make use of them, I’d leave to the user. If you approach me back saying that the same thing can be achieved using a channel or a map with <code>sync.Mutex</code> slapped on it, you’d be (almost) right. Yet, it’s worth exploring different ways of thinking.</p>

<h1 id="a-10-000-foot-view-of-elixir">A 10.000-foot view of Elixir</h1>

<p>For those not aware of it, Elixir is a functional language. Everything runs inside an immutable function scope, and no state remains on the table. A function can only work on what it has been fed with. Functions reside inside modules and are being executed inside Erlang processes.</p>

<p>Technical differences aside, you can think of processes as the equivalent of Go’s goroutines. A function chain call runs inside a process/goroutine. When the outermost function returns, the process/goroutine ends. A process/goroutine can spawn other processes/goroutines to achieve concurrent execution of tasks. Go synchronizes over channels while Elixir over a message inbox that is built into every process. Using the built-in receive keyword, a function’s execution blocks inside a process, until a certain type of message gets received</p>

<pre><code class="language-elixir">receive do
    # Don't get too caught up on the Elixir syntax.
    # For now, it is only important to know that :message_a is equivalent
    # to a string with the value of &quot;message_a&quot;
    # Those are called &quot;atoms&quot; and are quite often used in Ruby-like laguages
    {:message_a, msg} -&gt;
        do_something_with(msg)
end
</code></pre>

<p>Fundamentally, this is the same as having a <a href="https://play.golang.org/p/rZkdET2ZhJl">goroutine block its execution waiting on a channel</a>:</p>

<pre><code class="language-go">type message struct {
    val string
}

msgStream := make(chan message)

go func(out chan message) {
    out &lt;- message{val: &quot;hello world&quot;}
}(msgStream)

msg := &lt;-msgStream
fmt.Printf(&quot;%+v&quot;, msg)
</code></pre>

<p>Whether you are waiting on a message to arrive in your inbox, or explicitly set a blocking channel as a communication mechanism, to me, it describes the same paradigm.</p>

<h1 id="turn-goroutines-into-stateful-actors">Turn goroutines into stateful actors</h1>

<p>Clear until now? Alright. Let’s move on. I already mentioned that Elixir is a functional language. Everything that gets passed to a function is immutable, and the only way to change it, is to return a new version of it. This means that looping constructs are not possible, since it would imply modifying and keeping track of a counter variable. The way functional languages achieve the effect of looping is through recursion (or to be more precise tail recursion):</p>

<pre><code class="language-elixir">def loop(5) do
    # Elixir uses pattern-matching when choosing which function to call.
    # In our case, as soon as its gets a count == 5, it will stop the loop
    5
end

def loop(count) do
    # Just print the count, but use pipes (|&gt;)
    # instead of wrapping in a function call -&gt; IO.puts(count)
    # Pipes totally save the day, when you have multiple call chains
    count
    |&gt; IO.puts()

    loop(count + 1)
end
</code></pre>

<h2 id="from-recursion-to-actors">From recursion to actors</h2>

<p>What if we take this recursion example and think of it as a never-ending loop. The first call to the function sets the initial state, and the function keeps calling itself ad-infinitum.</p>

<p>Now, this is where the purely functional paradigm breaks. We already learned that Erlang allows for other processes to communicate to us. This means that if our never ending recursive function receives a message from the outside, it can use its payload to call itself with a modified version of its initial state. Keeping in mind that receiving a message is a blocking operation, the process will simply linger around, not using any CPU resources, until our the right message arrives.</p>

<p>We can use the same messaging paradigm to poke inside the state of our never-ending function. Since it runs inside a separate process, the only way to do that is to send an appropriate message to it, pass our current process’ ID (PID) and let it send us a message back.</p>

<pre><code class="language-elixir">defmodule Calculator do
    def start do
    # creates a separate process with its own internal state
    spawn(fn -&gt; loop(0) end)
    end

    defp loop(current_value) do
    new_value =
        receive do
        # with this type of message, we can fetch the state of our calculator
        {:get, caller_pid} -&gt;
            send(caller_pid, {:response, current_value})
            current_value

        # with this type of message, we can modify the state of our calculator
        {:add, value} -&gt;
            current_value + value
        end

    loop(new_value)
    end
end
</code></pre>

<p>Let&rsquo;s test our calculator process:</p>

<pre><code class="language-elixir">defmodule CalculatorTest do
    def test_calculator do
    calc_pid = Calculator.start()

        # Like `receive`, `send` is built-in and take a PID, as well as a message
        # self() returns the process id (PID) of the current process
        # Like in Go, every piece of Elixir/Erlang code runs in a process
    send(calc_pid, {:get, self()})

        # `receive` will block, until we receive a message,
        # that matches the expected pattern - {:response, value}
    receive do
        {:response, value} -&gt;
        value |&gt; IO.puts()
    end

    send(calc_pid, {:add, 100})

    send(calc_pid, {:get, self()})

    receive do
        {:response, value} -&gt;
        value |&gt; IO.puts()
    end
    end
end
</code></pre>

<p>In essence, our never-ending function becomes what Elixir calls a stateful server process, an implementation of the <a href="https://en.wikipedia.org/wiki/Actor_model">Actor model</a>. Actors are great for isolating critical state and allowing for concurrent communication to it, ensuring that only one change happens at a time.</p>

<h2 id="from-elixir-to-go">From Elixir to Go</h2>

<p>Ok now that we know how things work in Elixir land, achieving the same thing on Go is super straightforward.</p>

<pre><code class="language-go">func main() {
    in := make(chan message)
    out := make(chan int)
    go newCalculator(0, in, out)

    in &lt;- message{operation: &quot;get&quot;}
    state := &lt;-out
    log.Printf(&quot;Current state: %d&quot;, state)

    in &lt;- message{operation: &quot;add&quot;, value: 100}
    in &lt;- message{operation: &quot;get&quot;}
    state = &lt;-out
    log.Printf(&quot;Current state: %d&quot;, state)
}

type message struct {
    operation string
    value     int
}

func newCalculator(initialState int, in chan message, out chan int) {
    state := initialState
    for {
        p := &lt;-in
        switch p.operation {
        case &quot;add&quot;:
            log.Printf(&quot;Adding %d to the current state&quot;, p.value)
            state += p.value

        case &quot;get&quot;:
            out &lt;- state
        }
    }
}
</code></pre>

<p>One thing to note is that since we can use an infinite-loop, we should just use that, especially, since based on my knowledge Go is not particularly optimized for long-cycle recursion. But the main premise remains the same. A function gets called with some initial state and returns a channel. The function starts an endless loop, blocking on the channel. If we push a value to that channel, the function will take it, update the state and block again.</p>

<h1 id="what-are-actors-good-for">What are actors good for?</h1>

<h2 id="private-state">Private state</h2>

<p>So, now that we unveiled the mystery behind actors, it’s a good point to discuss what they might be useful for.</p>

<p>One thing that immediately comes to mind, is achieving globally accessible, but truly private, synchronized state. This is currently achieved with the use of channels, <code>sync.Mutex</code>, or the new <code>sync.Map</code>.</p>

<pre><code class="language-go">type SynchronizedMap struct {
    sync.RWMutex
    internal map[string]interface{}
}

func (rm *SynchronizedMap) Store(key string, value interface{}) {
    rm.Lock()
    rm.internal[key] = value
    rm.Unlock()
}
</code></pre>

<p>The fragility of this approach comes from the fact that there is no real private state in Go applications. The map we named <code>internal</code> in the above example is only protected from outside access. Any piece of code inside the same package as our <code>SynchronizedMap</code> can freely access and modify its internals, leading to unexpected consequences. While this shouldn&rsquo;t be a concern in most cases, it&rsquo;s definitely good to keep in mind for special cases.</p>

<h2 id="stateful-autonomous-agents">Stateful autonomous agents</h2>

<p>Where the Actor model shines is the orchestration of systems of Actor instances - autonomous agents. Each Actor instance is able to change its state, reacting to the messages sent to it. Actor instances can easily spawn other Actor instances, which only the creating actors (supervisors) have control over (private state, remember). Supervisors can also take over failures of the actors their are responsible for, potentially, killing some off, and restarting them with a clean state. Taking this example to extremes, groroutines being fairly cheap, one can easily imagine a swarm of thousands of Actor instances, in a deeply nested hierarchy, with multiple levels of supervising actors taking over their &ldquo;progeny&rdquo;. This is the unique selling proposition of Erlang, but as I hope to have demonstrated, could be replicated in Go too.</p>

<p>As discussed in the beginning, I would leave the discussions about this approach&rsquo;s practicality, as well as its other applications to the reader. I would love to hear your thoughts. Do not hesitate to drop me a comment, or start a new discussion.</p>

<hr />

<h1 id="resources">Resources</h1>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1519435676i/38732242._UY630_SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/38732242-elixir-in-action">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Elixir in Action</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The Elixir language blends the battle-tested power and stability of the Erlang virtual machine with an approachable and expressive syntax...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/38732242-elixir-in-action">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<p>One of the best books about learning Elixir, and certainly, the one that inspired me to write this post. Saša Jurić&rsquo;s explanations are clear and demonstrative, especially on complex topics such as this one. If you like this blog, and would love to support my passion for reading great books, you can <a href="https://amzn.to/39AXJ6T">buy it on Amazon using this special link</a>. Thanks!</p>
]]></content>
        </item>
        
        <item>
            <title>Use the Git History to Identify Pain Points in Any Project</title>
            <link>https://preslav.me/2020/03/01/use-the-git-history/</link>
            <pubDate>Sun, 01 Mar 2020 17:50:14 +0100</pubDate>
            
            <guid>https://preslav.me/2020/03/01/use-the-git-history/</guid>
            <description>Have you heard of Adam Tornhill&amp;rsquo;s work? If not, I highly recommend that you set some time aside and check out Your Code as a Crime Scene or Software DEsign X-Rays. In both books, the author dives into a bit of an unexplored territory - looking at the evolution of a codebase as a factor of its changes over time.
Much of the tooling we use to mitigate tech debt is preventive.</description>
            <content type="html"><![CDATA[

<p>Have you heard of <a href="https://twitter.com/AdamTornhill">Adam Tornhill</a>&rsquo;s work? If not, I highly recommend that you set some time aside and check out <em><a href="https://amzn.to/32DM1G9">Your Code as a Crime Scene</a></em> or <em><a href="https://amzn.to/2vtbjdR">Software DEsign X-Rays</a></em>. In both books, the author dives into a bit of an unexplored territory - looking at the evolution of a codebase as a factor of its changes over time.</p>

<p>Much of the tooling we use to mitigate tech debt is preventive. Compilers, linters, static analysis tools, etc. All trying to prevent developers from checking in code, which might cause problems in the future. What all of these fail to catch, is that the code might be perfectly fine, and still not lead to a well functioning system.</p>

<p>The process of software development is as much about <em>developer-to-self</em> and <em>developer-to-others</em> interaction, as much as it is about making the machine do certain things. This interaction can only be let to grow, and reflected upon at certain periods of time. And what better tool to help us do that, than the one we use on a daily basis - git.</p>

<h2 id="git-to-the-rescue">Git to the rescue</h2>

<p>In his books, Tornhill discuses multiple evolutions on the same basic idea - files that change often (with some exceptions) tend to be the ones where most issues occur, hence the need to change. We rarely think of this simple fact when we work on the same project for a long period of time. Yet, when on-boarding a new team member, looking up an unknown piece of code, or simply, retrospecting over your code, such knowledge can be invaluable.</p>

<p>The code is surprisingly simple:</p>

<pre><code class="language-bash">git log --format=format: --name-only | egrep -v '^$' | sort | uniq -c | sort -rg | head -10
</code></pre>

<p>What I like to do is add such commands to my list of git aliases. Open up your <code>~/.gitconfig</code> file and add the following two lines to the <code>[Aliases]</code>section:</p>

<pre><code class="language-bash">code-changes = &quot;!git log --format=format: --name-only | egrep -v '^$' | sort | uniq -c | sort -rg | head -10&quot;
cc = &quot;!git code-changes&quot;
</code></pre>

<p>What this will do, is sort the files in your project by their number of changes, and take the first 10. Those are the ones where most changes have occurred over time, consequently there is a higher chance that those will require the most changes in the future.</p>

<p>Let&rsquo;s do an example. I chose (completely by accident) to look at Gorm, one of the popular Go ORMs. These are the top 10 files that appear at the time of this writing:</p>

<pre><code class="language-bash">272 main.go
246 scope.go
208 README.md
155 scope_private.go
117 main_test.go
116 gorm_test.go
105 model_struct.go
97 do.go
81 model.go
80 utils.go
</code></pre>

<p>Excluding the <code>README.md</code> file, one can clearly see some dominance of certain files over others. Many Go projects start out from a single <code>main.go</code> file, and with time, logic phases out to other files and packages. In our case, this is certainly not the case. Gorm &rsquo;s <code>main.go</code> is one big chunk of code, which can easily get split into two or more files, especially, since multiple files can share the same Go package.</p>

<p>I&rsquo;ll go into more details on Adam Tornhil&rsquo;s work. There&rsquo;s even more interesting stuff, like identifying which files get changed together, etc. For now, take this simple trick and try to use it on the projects you&rsquo;re working on, or the libraries you frequently work with.</p>

<p>What do you see?</p>

<hr />

<p>




<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1502137388i/23627482._SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/23627482-your-code-as-a-crime-scene">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Your Code As a Crime Scene</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Jack the Ripper and legacy codebases have more in common than you&#39;d think. Inspired by forensic psychology methods, you&#39;ll learn strategi...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/23627482-your-code-as-a-crime-scene">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>





<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1511521225i/36517037._SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/36517037-software-design-x-rays">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Software Design X-Rays</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Are you working on a codebase where cost overruns, death marches, and heroic fights with legacy code monsters are the norm? Battle these ...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/36517037-software-design-x-rays">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div></p>
]]></content>
        </item>
        
        <item>
            <title>iEx Is Dope!</title>
            <link>https://preslav.me/2020/02/24/iex-is-dope/</link>
            <pubDate>Mon, 24 Feb 2020 07:45:20 +0100</pubDate>
            
            <guid>https://preslav.me/2020/02/24/iex-is-dope/</guid>
            <description>iEx (Elixir&amp;rsquo;s interactive shell) is pure dope! It helped bring my development efforts back to the &amp;ldquo;let&amp;rsquo;s play and see what happens&amp;rdquo; level. Since Elixir modules are stateless and made up of pure functions, reloading a module is as easy as calling r MyModule inside iEx. During development, I&amp;rsquo;d try to keep one module called Demo, or Scratch, etc, where I&amp;rsquo;d do the quick and dirty setting up of things. This scratch module would usually have one function only, called demo or run.</description>
            <content type="html"><![CDATA[<p><a href="https://hexdocs.pm/iex/IEx.html">iEx (Elixir&rsquo;s interactive shell)</a> is pure dope! It helped bring my development efforts back to the &ldquo;let&rsquo;s play and see what happens&rdquo; level. Since Elixir modules are stateless and made up of pure functions, reloading a module is as easy as calling <code>r MyModule</code> inside iEx.
During development, I&rsquo;d try to keep one module called <code>Demo</code>, or <code>Scratch</code>, etc, where I&rsquo;d do the quick and dirty setting up of things. This scratch module would usually have one function only, called <code>demo</code> or <code>run</code>. This is what I call in iex. The rest I do in the respective modules, which I reload after every change.</p>

<p>At work, I get to work with Python a lot and one of the things I love there is <a href="https://ipython.org/">iPython</a>. It&rsquo;s such a strong REPL that I would often try and get my hands dirty there, before formalizing into code/test. In Python <a href="https://preslav.me/2018/04/22/live-reloading-of-python-modules/">module reloads are not always trivial</a>, however. This is where Elixir&rsquo;s functional, &ldquo;share-nothing&rdquo; nature steps up the game. It&rsquo;s easy to reload modules that have essentially no state.</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://miro.medium.com/max/1200/1*DKLIm-vne8pO-G58yjaRwA.jpeg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://blog.echobind.com/tips-and-tricks-for-iex-161d0049cfcd">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Tips and Tricks for IEx</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      When I first started learning Elixir, one of the first things I learned is how to get into the command line interface via IEx. Here are the…</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://blog.echobind.com/tips-and-tricks-for-iex-161d0049cfcd">https://blog.echobind.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Elixir Month</title>
            <link>https://preslav.me/2020/02/11/elixir-month/</link>
            <pubDate>Tue, 11 Feb 2020 07:49:10 +0100</pubDate>
            
            <guid>https://preslav.me/2020/02/11/elixir-month/</guid>
            <description>Yes, the Elixir. I’ve decided to use the cold February weather, as well as the relative project calm, and see how far I can go with it.
But why Elixir and why just now? There are a few reasons. Actually, this is not my first encounter with the language or the Erlang/BEAM ecosystem. About a year ago, a colleague at work and I started doing lunch break walks, in which we discussed tech topics, beyond the scope of our current projects.</description>
            <content type="html"><![CDATA[

<p>Yes, the <a href="https://elixir-lang.org/">Elixir</a>. I’ve decided to use the cold February weather, as well as the relative project calm, and see how far I can go with it.</p>

<h2 id="but-why-elixir-and-why-just-now">But why Elixir and why just now?</h2>

<p>There are a few reasons. Actually, this is not my first encounter with the language or the Erlang/BEAM ecosystem. About a year ago, a colleague at work and I started doing lunch break walks, in which we discussed tech topics, beyond the scope of our current projects. My colleague is a big Elixir fan and has mentioned many times the advantages of Erlang and the BEAM VM. More than anything else, one thing struck me the most. All of the challenges that the cloud community of today is trying to tackle, such as:</p>

<ul>
<li>resilience</li>
<li>scalabiltiy</li>
<li>distribution</li>
<li>deployment</li>
</ul>

<p>etc, have already been thought about, and solved by a research group at Ericsson around three decades ago (albeit, at a smaller scale). Sure, Erlang is not an easy language to work with, but thanks to <a href="https://twitter.com/josevalim">José Valim</a> and his work on Elixir, it wouldn’t even be necessary. So, about a year back, I took my first plunge.</p>

<h2 id="that-s-not-for-me">That’s not for me</h2>

<p>I got out of the water just as quickly as I got in there. Sure, Elixir is not nearly as obscure as Erlang, but it can be a bit overwhelming for the newcomer. Especially, if one is trying to swallow the whole OTP bit at the same time. At the time, I had discovered the simplistic philosophy of Golang, and despite all the alleged advantages, Elixir seemed way too much overhead. I (in)famously dismissed the language, as one where “the amount of punctuation might give you a headache”. Let alone the fact that similar to Java applications, Elixir ones also need the entire kitchen sink to be in place for an application to run. Compare this to a statically-bound Go app that you just throw onto a machine and you are good to go.</p>

<h2 id="crystal-enters-the-stage">Crystal enters the stage</h2>

<p>As a side note, I have to mention that part of why I dropped my initial foray into Elixir was because of a bias. I felt that it was too, Ruby-esque, whatever that must have meant to me at the time. I have somehow missed the early Ruby and Rails train around 15 years ago. My programming career set me on a different path. I have always been aware of Ruby’s community spirit, but only during the past year, did I come to appreciate the language and its writing aesthetic. Ironically, not through a Ruby itself, but via a wonderful derivative language, named <a href="https://crystal-lang.org/">Crystal</a>. I already went into more detail about Crystal <a href="https://preslav.me/2020/01/26/a-crystal-in-go-s-world/">in a previous post</a>.</p>

<p>The more I started dabbling into Crystal, the more I started looking at its inspiration - Ruby. Ruby is certainly not a language without flaws, and the community is trying to work on those. Partially, via addressing those issues at the core - Ruby 3.0 is expected to arrive <a href="https://bugs.ruby-lang.org/versions/5">at the end of this year</a>. Yet, others are taking what the language is best known for, and applying it to other paradigms - such as Elixir’s functional approach to programming.</p>

<h2 id="second-attempt-elixir-month">Second attempt: Elixir Month</h2>

<p>My second attempt to tackle Elixir seems to go much more smoothly than the first one. One day, I had the feeling that the constructs in the language just clicked for me- even the nasty OTP ones. I set out out a goal for myself to use Elixir for a month during February, and see how far I can go with it.</p>

<hr />

<h2 id="some-starting-resources">Some starting resources</h2>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1519435676i/38732242._UY630_SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/38732242-elixir-in-action">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Elixir in Action</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The Elixir language blends the battle-tested power and stability of the Erlang virtual machine with an approachable and expressive syntax...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/38732242-elixir-in-action">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<p>Really, one of the best books on starting with Elixir. If you enjoy it, please help me support this site by <a href="https://amzn.to/2HFjtSR">buying it on Amazon</a>.</p>

<p>Let Saša Jurić himself convince you:

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/JvBT4XBdoUE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/gom6nEvtl3U" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content>
        </item>
        
        <item>
            <title>[Quote] You Can Think of Any Web Server as a Function</title>
            <link>https://preslav.me/2020/02/10/quote-you-can-think-of-any-web-server-as-a-function/</link>
            <pubDate>Mon, 10 Feb 2020 19:07:54 +0100</pubDate>
            
            <guid>https://preslav.me/2020/02/10/quote-you-can-think-of-any-web-server-as-a-function/</guid>
            <description>“You can think of any web server as a function. Each time you type a URL, think of it as a function call to some remote server. That function takes your request and generates some response. A web server is a natural problem for a functional language to solve.”
 Excerpt From Programming Phoenix by Chris McCord
Buy on Amazon
@media (max-width: 640px) { .embed-image { min-width: 100%; } }   Programming Phoenix  Don’t accept the compromise between fast and beautiful: you can have it all.</description>
            <content type="html"><![CDATA[<blockquote>
<p>“You can think of any web server as a function. Each time you type a URL, think of it as a function call to some remote server. That function takes your request and generates some response. A web server is a natural problem for a functional language to solve.”</p>
</blockquote>

<p>Excerpt From <em><a href="https://www.goodreads.com/book/show/26871792-programming-phoenix">Programming Phoenix</a></em> by Chris McCord</p>

<p><a href="https://amzn.to/2vkYthk">Buy on Amazon</a></p>

<hr />






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1444081913i/26871792._UY630_SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/26871792-programming-phoenix">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Programming Phoenix</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Don’t accept the compromise between fast and beautiful: you can have it all. Phoenix creator Chris McCord, Elixir creator José Valim, and...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/26871792-programming-phoenix">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>A Crystal in Go’s World</title>
            <link>https://preslav.me/2020/01/26/a-crystal-in-go-s-world/</link>
            <pubDate>Sun, 26 Jan 2020 08:35:04 +0000</pubDate>
            
            <guid>https://preslav.me/2020/01/26/a-crystal-in-go-s-world/</guid>
            <description>Imagine a programming language with the ergonomic syntax of Ruby, the speed of execution of C, the concurrency model of Go, and last but not least, a compiler that performs null checks at compile time. Sounds like a dream? Well, this language exists, but chances are, you haven’t heard of it so far.
Meet Crystal!
Crystal is all of the above, plus it has types, outstanding documentation, and a strong community, delivering a steady stream of new libraries (a.</description>
            <content type="html"><![CDATA[

<p>Imagine a programming language with the ergonomic syntax of Ruby, the speed of execution of C, the concurrency model of Go, and last but not least, a compiler that performs null checks at compile time. Sounds like a dream? Well, this language exists, but chances are, you haven’t heard of it so far.</p>

<p>Meet <a href="https://crystal-lang.org/">Crystal</a>!</p>


    <img src="/images/2020/image-crystal.png"  alt="Crystal home page"  class="center"  style="border-radius: 8px;"  />



<p>Crystal is all of the above, plus it has types, <a href="https://crystal-lang.org/reference/overview/">outstanding documentation</a>, and a strong community, delivering a steady stream of new libraries (a.k.a “shards”). Don’t get fooled by the current version number (0.32.1). Crystal has been around for quite a few years (since 2012) and has a mature set of language features and an ecosystem of good libraries.</p>

<h2 id="where-does-the-speed-come-from">Where does the speed come from?</h2>

<p>Crystal produces fast and lightweight native applications using the LLVM infrastructure. When I say fast, I mean, <a href="https://github.com/kostya/benchmarks">really fast</a>. Take the fastest Go code you can find and chances are, the same code in Crystal will perform at least on par with it, and often quite a bit faster. Measuring Crystal’s performance against that of Ruby makes no sense.</p>

<p>There are no runtime frameworks or virtual machines necessary. One can just grab the compiled binary and deploy it. When compared with deploying and running a Ruby application, this feels like a whole different league.</p>

<p>Note that there are some caveats, which I am going to discuss in a future blog post. For now, let’s just say that building and distribution are equally as easy, as those in Rust. As of yet, nothing can beat the Go compiler speed-wise, but my experience with the Crystal tooling has been more than pleasant so far.</p>

<h2 id="csp-style-concurrency">CSP-style concurrency</h2>

<p>One of the things that make Go so interesting is its concurrency model. The idea about goroutines that communicate via channels is based on an approach dating back to the late 1970s, called <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">Communicating Sequential Processes (CSP)</a>. Crystal uses an analogous approach. Programs run in what is known as <a href="https://crystal-lang.org/reference/guides/concurrency.html">“fibers”</a>. The main fiber can spawn any number of concurrent fibers that send and receive data via blocking channels.</p>

<pre><code class="language-crystal">channel = Channel(Nil).new 
spawn do    
	puts &quot;Before send&quot;    
	channel.send(nil)    
	puts &quot;After send&quot; 
end  

puts &quot;Before receive&quot; 
channel.receive 
puts &quot;After receive&quot;
</code></pre>

<h2 id="why-re-invent-ruby-in-2020">Why re-invent Ruby in 2020?</h2>

<p>The creators of Crystal obviously didn’t intend on changing the world of programming by creating a new language. They just <a href="https://web.archive.org/web/20181126095302/https://manas.tech/blog/2016/04/01/the-story-behind-crystal.html">loved Ruby</a> and felt it sad to leave it for a more performant and type-safe alternative. Due to a series of trade-offs at the implementation level, Ruby is still slower and more memory-hungry than its competitors. Despite perfectly serving the needs of a large segment of Web users through Rails, its performance puts it at the back of the pack, when it comes to other use cases.</p>

<p>The point is fair and valid. As a language, Ruby has a concise and elegant syntax for writing. Once beyond the basic idioms, writing Ruby evokes pure joy. Crystal brings that joy to an even higher level through type-safety, native speed, and extremely simple concurrency model.</p>

<p>Don’t get me wrong, I like Go too, precisely because of its verbosity and lack of idioms. When working with others on a big project, I’d prefer more ceremony and hoops, in the name of transparency and equal code comprehension. Different languages exist to serve different purposes and be used by different groups of people. The trick is knowing when to use and when the other.</p>

<h2 id="so-is-crystal-worth-having-a-look">So, is Crystal worth having a look?</h2>

<p>Absolutely! If only to know that it exists and keep an eye on it, I’d go check it out and write a few applications with it. Whether Crystal will take off in the future is a bit more difficult to say, however. As mentioned, the 99% resemblance to Ruby is nice, and so is the blazing-fast performance. Yet, I am missing the Crystal community’s drive towards more prominence. There has been a long-awaited move towards a 1.0 release, which is a crucial milestone and would surely bring in many newcomers. To my understanding, the language and its tooling are stable enough for a 1.0 release.</p>

<p>I understand that Crystal does not have the backing of either Google or Mozilla. Neither does it have multi-billion-dollar use-cases to put on its home page. I understand that fighting for the same space with Go, C/C++, and Rust is an unfair battle. Yet, I also believe that we’re long past the days when choosing one technology over another was a zero-sum game. All it needs is a little push.</p>

<p>I am hoping for the best!</p>
]]></content>
        </item>
        
        <item>
            <title>[Quote] Manual Work is a Bug</title>
            <link>https://preslav.me/2020/01/18/quote-manual-work-is-a-bug/</link>
            <pubDate>Sat, 18 Jan 2020 08:35:04 +0000</pubDate>
            
            <guid>https://preslav.me/2020/01/18/quote-manual-work-is-a-bug/</guid>
            <description>Here are a few lines from Manual Work is a Bug that I firmly stand by:
 The successful engineer has a quick way to create documents for new procedures and to find existing procedures. People with this mindset avoid the cognitive load of deciding whether or not a task is worth documenting, because they document everything. On finding a potential improvement, they are not slowed by the speed bump of switching from a document viewer to a document editor because they work from the editor at the start.</description>
            <content type="html"><![CDATA[<p>Here are a few lines from <em><a href="https://queue.acm.org/detail.cfm?id=3197520">Manual Work is a Bug</a></em> that I firmly stand by:</p>

<blockquote>
<p>The successful engineer has a quick way to create documents for new procedures and to find existing procedures. People with this mindset avoid the cognitive load of deciding whether or not a task is worth documenting, because they document everything. On finding a potential improvement, they are not slowed by the speed bump of switching from a document viewer to a document editor because they work from the editor at the start. Heck, they have a dedicated second monitor just for their editing app!</p>

<p>[…]</p>

<p>The successful engineer realizes that the earlier he starts collaborating, the sooner others can contribute. Together they can create a culture of documentation that spreads throughout the team. Thus, every project is collaborative and has a “stone soup” feeling, as all are invited to bring their skills and insights. The more people who embody this culture, the more success it has.</p>

<p>[…]</p>

<p>By creating a culture of continuous improvement, constantly taking baby steps along the four phases, the work becomes less stressful and easier to manage. While the other reasons listed here are quite logical, what motivates me to maintain this discipline is more emotional: I want to reduce stress and have more time for creativity and joy.</p>
</blockquote>

<p>/Thomas A. Limoncelli/</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  

  <div class="embed-image"
    style="flex: 1 1 0%; background: rgba(0, 0, 0, 0) linear-gradient(#eaeaea 0%, #73747b 100%) repeat scroll 0% 0%; min-height: 120px;">
  </div>

  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://queue.acm.org/detail.cfm?id=3197520">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Manual Work is a Bug</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      </div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://queue.acm.org/detail.cfm?id=3197520">https://queue.acm.org | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Reflecting on My Experience With Go, One Year After</title>
            <link>https://preslav.me/2020/01/17/reflecting-on-my-experience-with-go-one-year-after/</link>
            <pubDate>Fri, 17 Jan 2020 08:35:04 +0000</pubDate>
            
            <guid>https://preslav.me/2020/01/17/reflecting-on-my-experience-with-go-one-year-after/</guid>
            <description>In my little more than a year day-to-day developer experience with Go, I have so far learned three things:
 I can change my entire view of how programming works, even after 12+ years of doing it in one form or another. People are blaming Java for all the wrong reasons People are praising Go for all the wrong reasons  Let me explain. This post is not about saying that “language A is better than language B”, or vice versa.</description>
            <content type="html"><![CDATA[

<p>In my little more than a year day-to-day developer experience with Go, I have so far <strong>learned three things</strong>:</p>

<ol>
<li>I can change my entire view of how programming works, even after 12+ years of doing it in one form or another.</li>
<li>People are blaming Java for all the wrong reasons</li>
<li>People are praising Go for all the wrong reasons</li>
</ol>

<p>Let me explain. This post is not about saying that “language A is better than language B”, or vice versa. It is about asking ourselves the question why things work the way they do, and whether doing them differently is a bad, or potentially, good thing.</p>

<p>Before joining the Go camp, I had worked quite a few years as a Java developer, with all the stereotypes that this role could evoke in one’s head. I co-developed data-processing systems for various industries. Yet, much of the code I wrote was just boilerplate: passing data from one format to the other, or devising complex abstractions behind what should have really just been calling a function and obtaining its result. Yes, the code was difficult to comprehend, but I was proud of it for this exact reason. The more hoops I created, the more secure I felt that:</p>

<ol>
<li>I was doing what I thought was right</li>
<li>If people didn’t understand the code, they’d have to come to me for an advice, further boosting my ego.</li>
</ol>

<h2 id="the-language-is-not-to-blame-for-this">The language is not to blame for this</h2>

<p>The fact that much of the existing Java code is full of bureaucracy has nothing to do with the language itself, or with its platform. Our developer community should bear the sole responsibility. I can assure anyone that perfectly functioning Java applications can be written without 90% of the ceremony. They will be smaller and run faster. Most probably, easier to comprehend, too. And yet, they won’t get you hired in any well-respected company. They just won’t pass the <em>developer prejudice</em> test. I know. I’ve seen many elegant solutions and rejected them for not being /idiomatic/ enough.</p>

<h2 id="go-isn-t-a-silver-bullet-either">Go isn’t a silver bullet either</h2>

<p>For much of the same reasoning, jumping ship towards Go, just because “it is not Java”, won’t bring anyone far. Even before I started writing Go, I had heard and read many stories, about how simple and fast it made everything, how little ceremony it had, compared to Java, how it would eventually kill all other languages, etc. All blah, blah. Despite all of the above being true, you have to discover the truth in each for yourselves. If you approach the language out of desperation with your current way of working, you’re going to be set for a rough path.</p>

<p>See, if you all you wanted was to get a faster running (name language of choice), you could certainly do it. Yet, holding on to the mental baggage of your previous experience will be hard and messy. My first Go project started out as a rewrite of a Spring Boot app I’d started earlier, so I thought I’d just organize it the same way. To keep the story short, let’s just say it was a spectacular disaster. Only after I started from scratch, did it really start taking off.</p>

<h2 id="go-is-a-language-without-with-less-idioms">Go is a language without (with less) idioms</h2>

<p>Let’s do a naive math experiment. Imagine that you could create valid programming expressions combining any 3 keywords, from a programming language’s vocabulary. Thus, if a language only has 10 keywords, the maximum number of possible expressions is 10 * 9 * 8 = 720. In contrast, a language, with, say, 20 keywords would end up having 20 * 19 * 18 = 6840 expressions. Twice as many keywords would result in almost 10 times as many expressions!</p>

<p>Languages tend to encourage the creation and use of idioms. With that many possible expressions, it’s a normal behaviour for an individual, or a group of people to start associating and using expressions for certain things. The problems usually occur when another group comes with its own way of expressing the same thing. Both are perfectly valid, but each group would have issues understanding the other.</p>

<p>This is not to say that Go having a very strict and concise nature, is totally devoid of idioms. That would be impossible. It is in our nature to try to associate and abstract certain concepts. Yet, when a language has a deliberately smaller vocabulary, the chances for different groups accidentally finding multiple ways of doing the same thing are smaller. This helps the communication between people a great deal, but comes with a very obvious downside. Code (or any written expression, for that matter) without idioms is very, very verbose.</p>

<p>So, whoever told you that Go is not a verbose language, probably either lied to you on purpose, or had’n really seen any other programming languages up until that point. But hey, we agreed that verbosity in the name of communication and common understanding is a actually a good thing, right?s</p>

<h2 id="go-is-a-test-for-senior-engineers">Go is a test for senior engineers</h2>

<p>A lot has been said about the initial concept about Go, and how the idea was to design a language for juniors fresh out of college, and with little programming experience. I think that understanding the beauty of going back to the roots of programming, can be a cathartic experience for many seasoned programmers.</p>

<p>See, junior programmers start with little baggage and preconceptions, so in their view, anything that can be done with code is fair and justified. Including, burning a CPU, or erasing a disk due to an arithmetic error.</p>

<p>Somewhere along the middle of the career path, a bunch of principles start to pile up. All of them out of the desire to step on what’s already been learned, and to make sure that things are smoothly and safely without immediate supervision. Learning and applying the principles is great, because it ensures a gradual path forward. But for many, it becomes a dogma which they blindly stick to, without asking whether a simpler alternative could be better.</p>

<p>The problem with principles is that they only work well around 80% of the time. It is the remaining 20% that can be disastrous for a project, or for one’s career. It is the understanding where to apply a principle, and where to deliberately throw it away in the name of pragmatism, which turns a software engineer into a senior software engineer.</p>

<p>To really appreciate Go, one needs to learn how to discern what makes it and its community stand out from the rest. One needs to go through a phase of utter disgust with the language, for it “lacking” certain feature. Moving on despite the urge to go back to a familiar ground, would result in one of two things:</p>

<ol>
<li>Make one realise that indeed, the Go language is not what they need or want</li>
<li>Learn to appreciate going back to the roots, as well as when to favour pragmatism over principles</li>
</ol>

<p>In any case, it would be an interesting experience.</p>
]]></content>
        </item>
        
        <item>
            <title>Using Gohack for Temporary Modifications to Go Module Dependencies</title>
            <link>https://preslav.me/2020/01/10/using-gohack-for-temporary-modifications-to-go-module-dependencies/</link>
            <pubDate>Fri, 10 Jan 2020 19:14:17 +0100</pubDate>
            
            <guid>https://preslav.me/2020/01/10/using-gohack-for-temporary-modifications-to-go-module-dependencies/</guid>
            <description>I started programming Go right at the time when the topic of modularization heated up. Of course, we all know how it all played out with Go modules. They are here and they are (IMO) great. I have spent a significant amount programming Python before virtual environments were really a thing, and believe me, things got really messed up at times.
One big disadvantage of modules is that one can’t really edit them.</description>
            <content type="html"><![CDATA[<p>I started programming Go right at the time when the topic of <em>modularization</em> heated up. Of course, we all know how it all played out with Go modules. They are here and they are (IMO) great. I have spent a significant amount programming Python before virtual environments were really a thing, and believe me, things got really messed up at times.</p>

<p>One big disadvantage of modules is that one can’t really edit them. For a good reason, of course. You want them to be clean and reproducible, but occasionally, one needs to just insert a <code>log.Printf</code> or a tiny inspection function somewhere. One option is to call <code>mod vendor</code>, but this would copy all the dependencies to the vendor folder. Clearly, a lot more overhead than what one would need.</p>

<p>This is where <a href="https://github.com/rogpeppe/gohack">gohack</a> comes in really handy. It uses a clever feature of the Go modules, called /replace/. It allows the user to manually override the path to a given dependency. Instead of doing all of this manually, however, gohack will do it all for you.</p>

<p>After installing go-installing gohack, go to your module-bound Go project and use it instead of <code>go get</code> for a given dependency:</p>

<pre><code>gohack get example.com/foo/bar
</code></pre>

<p>gohack will fetch the code and store it in a special place inside your <code>$HOME</code> directory. It will also do the go.mod replacements for you:</p>

<pre><code>replace example.com/foo/bar =&gt; /home/me/gohack/example.com/foo/bar
</code></pre>

<p>All the edits you now do to the dependency that was added to your <code>$HOME</code> folder, will now affect the project that uses it.</p>

<p>Once you have done checking, and want to revert to using the original dependency, you can simply use the undo functionality:</p>

<pre><code>gohack undo example.com/foo/bar
</code></pre>

<p>or to revert all changes to all “hacked” dependencies:</p>

<pre><code>gohack undo
</code></pre>

<hr />






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://avatars0.githubusercontent.com/u/66491?s=400&amp;v=4); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://github.com/rogpeppe/gohack">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        rogpeppe/gohack</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Make temporary edits to your Go module dependencies - rogpeppe/gohack</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://github.com/rogpeppe/gohack">https://github.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Trip to Vienna</title>
            <link>https://preslav.me/2020/01/05/trip-to-vienna/</link>
            <pubDate>Sun, 05 Jan 2020 23:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/01/05/trip-to-vienna/</guid>
            <description>My wife and I spent the last two days in beautiful Vienna. This trip changed quite a few of the prejudices and assumptions I had previously had about the Austrian capital.
There is no doubt that Vienna is a world city, both historically, geographically, and culturally. For years in a row, the city has been named the world’s best place to live in, and as much as Munich is trying to steal the title, it’s not come close yet.</description>
            <content type="html"><![CDATA[

<p>My wife and I spent the last two days in beautiful Vienna. This trip changed quite a few of the prejudices and assumptions I had previously had about the Austrian capital.</p>

<p><img src="/images/2020/04/fullsizeoutput_c04-scaled.jpeg" alt="" /></p>

<p><img src="/images/2020/04/IMG_0421-scaled.jpg" alt="" /></p>

<p><img src="/images/2020/04/IMG_0395-scaled.jpg" alt="" /></p>

<p><img src="/images/2020/04/IMG_0433-scaled.jpg" alt="" /></p>

<p><img src="/images/2020/04/IMG_0406-scaled.jpg" alt="" /></p>

<p>There is no doubt that Vienna is a world city, both historically, geographically, and culturally. For years in a row, the city has been named the world’s best place to live in, and as much as Munich is trying to steal the title, it’s not come close yet.</p>

<p>Yet, I’ve always put such statistics aside, after having read the stories of tens of expats who had chosen Austria as a place to start a new life. Especially in the 90s and 00s, people claimed, living as an expat in Austria was hard. Being judged by everyone, and having to fight prejudice everywhere, made the lives of many first and second generation expats quite a traumatic experience.</p>

<p>I know, being a tourist is something completely different. People would gladly take your money, no matter what country you come from. Yet, I’m just such a type of person. I like to imagine living in the places I visit.</p>

<h1 id="breaking-the-prejudice">Breaking the prejudice</h1>

<p>For the two days in Vienna, I changed a few of my assumptions about the Austrian capital and the Austrian culture.</p>

<p>First, the obvious things. The city is extremely clean, and the central parts feel really, really safe. Coming from Munich, one develops a certain sense of noticing these things. At the same time, however, Vienna seems to open up to many more and diverse activities at all times. Munich is pretty boring and conservative in that regard. Despite its (on paper) population of 1.5 million people, Munich often feels dead on evenings, Sundays and holidays. Vienna looked like a normal big city, hustling and bustling at all times. If are coming from other parts of the world where big city culture is prevalent, don’t expect miracles. This is Europe after all.</p>

<p>What was even more surprising was people’s reception, which appeared to be totally friendly and positive. Everywhere we went, my wife and I were met warmly and openly. Now, I have to say again that being a tourist is quite different from actually living in a place. Plus, we have lived long enough in a German-speaking world to pass for locals. On that note, the other interesting fact was that everybody spoke Hochdeutsch (standard German taught in school) with a tiny hint of southern Bavarian-like accent. This was perfect, because I felt like home, as if I were in Munich. Sadly, this is not often the case if you go up the mountains. There you can frequently lost the track when you start speaking to locals. However, the same can be said about villages in Bavaria, so…</p>

<h1 id="the-verdict">The verdict</h1>

<p>For the two days we spent in Vienna, I liked it well enough to imagine living there at some point. The city is big enough, and opportunities for work, development, and recreation appear everywhere. Not to mention the housing situation, which from what I have hear is way more affordable than that in Munich. I am not yet sure, if I would like my future kids to grow up in Austria. I haven’t had enough exposure yet to decide on that, but I hope that a lot of the old walls have fallen and stereotypes have been erased.</p>

<hr />

<p><em>P.S. Write me a comment describing your tourist or expat experience in Vienna, and Austria in general. Especially, if you are fellow software engineers working there. I would love to hear what you have struggled with.</em></p>
]]></content>
        </item>
        
        <item>
            <title>How to Request an App Refund on the Apple App Store</title>
            <link>https://preslav.me/2019/12/21/how-to-request-an-app-refund-on-the-apple-app-store/</link>
            <pubDate>Sat, 21 Dec 2019 08:35:04 +0000</pubDate>
            
            <guid>https://preslav.me/2019/12/21/how-to-request-an-app-refund-on-the-apple-app-store/</guid>
            <description>Buying the wrong product happens all the time, and apps make no exception to that. Although it does not apply to every country, if you live within the EU, you have the right to ask for a full refund of your purchases, no strings attached. You can do that with apps you have bought from the App Store too, without having to provide an explanation. It is actually very easy, though providers try to put a few stones on the way.</description>
            <content type="html"><![CDATA[<p>Buying the wrong product happens all the time, and apps make no exception to that. Although it does not apply to every country, if you live within the EU, you have the right to ask for a full refund of your purchases, no strings attached. You can do that with apps you have bought from the App Store too, without having to provide an explanation. It is actually very easy, though providers try to put a few stones on the way. In the case of the App Store, I don’t think you can really do it from the app itself. You have to go to a special site instead:</p>

<p><a href="reportaproblem.apple.com">https://reportaproblem.apple.com</a></p>

<p>After signing in, you will see all the apps you have downloaded for free or purchased. Find the one you want to refund (assuming, you are within 14 days of the purchase). Click on “Report a Problem” (I know, you are actually exercising your rights, but just keep playing the game). Be careful to select the right option from the menu:</p>

<figure>
    <img src="/images/2019/12/appstore1.png"
         alt="The right option is down below"/> <figcaption>
            <p>The right option is down below</p>
        </figcaption>
</figure>


<p>See how far below the right option is? Anyway, once you choose it, there are no further obstructions. Just hit “Cancel Purchase” and you are good to go!</p>

<p><img src="/images/2019/12/appstore2.png" alt="" /></p>

<p><img src="/images/2019/12/appstore3.png" alt="" /></p>
]]></content>
        </item>
        
        <item>
            <title>Why Is Bulgaria So Poor?</title>
            <link>https://preslav.me/2019/12/20/why-is-bulgaria-so-poor/</link>
            <pubDate>Fri, 20 Dec 2019 16:30:10 +0100</pubDate>
            
            <guid>https://preslav.me/2019/12/20/why-is-bulgaria-so-poor/</guid>
            <description>Note: What follows is my answer to question on Quora. I thought it might be worth sharing with my readers too.
This is perhaps an unpopular opinion, but for whatever it is worth, I am going to let my mind speak. I would like to emphasize on the fact that I am, and will always be a Bulgarian, despite my conscious choice to live and have business somewhere else.
The reason why Bulgaria is so poor has nothing to do with its nature and geographic location.</description>
            <content type="html"><![CDATA[<p><strong>Note:</strong> What follows is my answer to <a href="https://www.quora.com/Why-is-Bulgaria-so-poor/answer/Preslav-Rachev">question on Quora</a>. I thought it might be worth sharing with my readers too.</p>

<hr />

<p>This is perhaps an unpopular opinion, but for whatever it is worth, I am going to let my mind speak. I would like to emphasize on the fact that I am, and will always be a Bulgarian, despite my conscious choice to live and have business somewhere else.</p>

<p>The reason why Bulgaria is so poor has nothing to do with its nature and geographic location. Neither, is it a lack of smart brains, creative artists, or strong athletes. It also isn’t (shocking to some) a lack of money and material possessions. Nope, it is none of those.</p>

<p>What makes Bulgaria so poor is <strong>the lack of a strong society and civic spirit</strong>. We might be smart as individuals, but as a society, we are below mediocre.</p>

<p>It is this lack of strong social norms, which has led our tiny nation from one bad choice to the next, living a sub-standard level of life for decades in a row. This lack of a strong society causes distrust and apathy. Those in turn, have managed to estrange people even further from one another, ultimately leading to the disintegration of our tiny nation. It is a vicious cycle.</p>

<p>It is easy to blame it on the politicians and the mafia, but remember, neither came to power alone. Our distrust and apathy let them be where they are today.</p>

<p>It is easy to blame it on the others, but when the time comes to pay our dues, invest in our common future, or take action to discourage grey economy, we are the first to hide back in the rat hole.</p>

<p>By not showing civic courage, the Bulgarian people (myself included) have been putting a nail after nail in the coffin holding our society, but it’s not too late to act. I see hope in many places, and this makes me look at opportunities to help.</p>

<p>So, yes, my friends, Bulgarians are poor. They can’t see how rich they could have been, had they given each other a hand, instead of sneaking behind the front door, looking through the peephole.</p>

<p>—</p>

<p>P.S. I fully realize that people like me are a big part of the problem. Yet, I also believe that in order to see the problem, one needs to have gotten out, only to return with fresh solutions. Sitting in the warm broth and complaining about daily life won’t help.</p>
]]></content>
        </item>
        
        <item>
            <title>Panic Without Worry</title>
            <link>https://preslav.me/2019/12/14/panic-without-worry/</link>
            <pubDate>Sat, 14 Dec 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/12/14/panic-without-worry/</guid>
            <description>In the Go community, there is some kind of paranoia around panicking, as if it’s the worst thing that can happen to your application. In fact, it often is the better option. Think about Go programs as CLI applications. Would you rather crash right away and let the user react, or hang, trying to recover? The same applies to applications running as services. Modern tooling makes it easy to automatically restart a crashing service within seconds.</description>
            <content type="html"><![CDATA[<p>In the Go community, there is some kind of paranoia around panicking, as if it’s the worst thing that can happen to your application. In fact, it often is the better option. Think about Go programs as CLI applications. Would you rather crash right away and let the user react, or hang, trying to recover? The same applies to applications running as services. Modern tooling makes it easy to automatically restart a crashing service within seconds.</p>

<p>When necessary, panic without worry.</p>
]]></content>
        </item>
        
        <item>
            <title>If You Can’t Get Flutter to Work with Your Beta Version of Xcode</title>
            <link>https://preslav.me/2019/11/11/get-flutter-to-work-with-beta-xcode/</link>
            <pubDate>Mon, 11 Nov 2019 07:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/11/11/get-flutter-to-work-with-beta-xcode/</guid>
            <description>You need to explicitly set the beta version of Xcode as your default one via the command line:
sudo xcode-select -s /Applications/Xcode-beta.app/Contents/Developer/  Afterwards, getting your app to run via flutter run should work as it used to before.
Related Resources @media (max-width: 640px) { .embed-image { min-width: 100%; } }   select - Managing Multiple Versions Of Xcode  It&amp;#39;s not uncommon developers to have multiple versions of Xcode installed.</description>
            <content type="html"><![CDATA[

<p>You need to explicitly set the beta version of Xcode as your default one via the command line:</p>

<pre><code class="language-bash">sudo xcode-select -s /Applications/Xcode-beta.app/Contents/Developer/
</code></pre>

<p>Afterwards, getting your app  to run via <code>flutter run</code> should work as it used to before.</p>

<h2 id="related-resources">Related Resources</h2>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  

  <div class="embed-image"
    style="flex: 1 1 0%; background: rgba(0, 0, 0, 0) linear-gradient(#eaeaea 0%, #73747b 100%) repeat scroll 0% 0%; min-height: 120px;">
  </div>

  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="http://iosdevelopertips.com/xcode/xcode-select-managing-multiple-versions-of-xcode.html">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        select - Managing Multiple Versions Of Xcode</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      It&#39;s not uncommon developers to have multiple versions of Xcode installed. For example, I typically have the latest beta as well as the most current</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="http://iosdevelopertips.com/xcode/xcode-select-managing-multiple-versions-of-xcode.html">http://iosdevelopertips.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Why I Still Find the Minimap Useful</title>
            <link>https://preslav.me/2019/11/10/why-i-still-find-the-minimap-useful/</link>
            <pubDate>Sun, 10 Nov 2019 07:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/11/10/why-i-still-find-the-minimap-useful/</guid>
            <description>This is an answer, I wrote in response to a recent blog post by Erica Sadun:
@media (max-width: 640px) { .embed-image { min-width: 100%; } }   My enemy the Minimap  The minimap is one of Xcode 11’s starring features. I know many people were excited for it at its debut but after months of exposure, I now just disable it in the Adjust Editor Options menu (… https://ericasadun.</description>
            <content type="html"><![CDATA[<p>This is an answer, I wrote in response to a recent blog post by <a href="https://ericasadun.com">Erica Sadun</a>:</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://ericasadun.com/wp-content/uploads/2019/11/Screen-Shot-2019-11-08-at-8.07.45-AM.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://ericasadun.com/2019/11/08/my-enemy-the-minimap/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        My enemy the Minimap</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The minimap is one of Xcode 11’s starring features. I know many people were excited for it at its debut but after months of exposure, I now just disable it in the Adjust Editor Options menu (…</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://ericasadun.com/2019/11/08/my-enemy-the-minimap/">https://ericasadun.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<p>Many people ignore a particular use of the minimap - understanding the complexity of some portion of the code, without having to look at each line. In most languages, complexity increases with the level of nesting of code. This is usually difficult to estimate when reading the code itself, since the brain is focused on what the code does, rather than how nested it is. By obscuring the text, and leaving only a bird&rsquo;s-eye view of the layout, the minimap might help pinpoint parts of the code, needing improvement. It can be very helpful when working with someone else code, or with a code base, which you haven&rsquo;t touched in a while.</p>
]]></content>
        </item>
        
        <item>
            <title>How I Stay Focused on Twitter Despite All the Buzz</title>
            <link>https://preslav.me/2019/11/06/how-i-stay-connected-on-twitter/</link>
            <pubDate>Wed, 06 Nov 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/11/06/how-i-stay-connected-on-twitter/</guid>
            <description>With so much going on Twitter, we long have passed the point of being able to just look at our timelines and stay up-to-date. In fact, I have personally stopped following and would even go as far as to remove a significant portion of the people I’ve been following over the years.
From people to topics Before anyone gets offended by my supposed rudeness, let me clear up. I do get to stay up-to-date with a large variety of stuff on Twitter.</description>
            <content type="html"><![CDATA[

<p>With so much going on Twitter, we long have passed the point of being able to just look at our timelines and stay up-to-date. In fact, I have personally stopped following and would even go as far as to remove a significant portion of the people I’ve been following over the years.</p>

<h1 id="from-people-to-topics">From people to topics</h1>

<p>Before anyone gets offended by my supposed rudeness, let me clear up. I do get to stay up-to-date with a large variety of stuff on Twitter. I achieve this with by organizing accounts into thematic lists, combined with clever searching.</p>

<p>If you have never created a single list on Twitter, you’re missing half the fun. At the moment of this writing, I actively curate <a href="https://twitter.com/preslavrachev/lists">around 50 lists</a>. The majority of those revolve around a certain topic I’m interested about, say <a href="https://twitter.com/preslavrachev/lists/go-developers">Go</a> or <a href="https://twitter.com/preslavrachev/lists/python-developers">Python</a> programming. Others are location based (Bremen, Munich, Bulgaria). In short, the fact that I don’t follow people on Twitter into a single timeline does not mean that that I don’t follow them at all. It’s actually the opposite - I follow many more people into many more thematically organized timelines.</p>

<p>This won’t solve the original problem, will it? In fact, many timelines must be making it a hell of a time to stay on top of each one. Well, yes, and this is where the power of clever searching comes to the stage.</p>

<p>In a <a href="https://preslav.me/2018/04/02/how-to-use-twitter-more-efficiently-with-these-hidden-search-features/">previous article</a>, I wrote at length about some of the hidden powers of Twitter searching. One of the many examples I presented in my article was using a Twitter list as the base filter for your search. Put simply, the following search:</p>

<pre><code>list:username/list “climate change”
</code></pre>

<p>Will only return results that match the query <code>climate change</code>, but only within the scope of the given list. Search for the right topics within the right lists, and you automatically get a significant noise reduction. As lists will inevitably get bigger, you can further reduce the noise, by leaving out only tweets with certain popularity or number of responses to.</p>

<pre><code>list:username/list “climate change” min_retweets:3
</code></pre>

<p>or</p>

<pre><code>list:username/list “climate change” min_replies:3
</code></pre>

<p>I have saved many such searches, which I then keep open on my favourite Twitter client. I like using <a href="https://tapbots.com/tweetbot/mac/">TweetBot</a> for iOS and macOS, but one could easily <a href="https://tweetdeck.twitter.com/">TweetDeck’s</a> tabs for the same purpose.</p>

<p><img src="https://i.imgur.com/4ml6zVF.jpg" alt="" /></p>

<hr />

<p>P.S. I hear that Twitter is also going to release some support for topic subscriptions as soon as this week. Let’s wait and see the final outcome. Until then, I keep using the method, I described above.</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://cdn.vox-cdn.com/thumbor/XHLt3wEMJOsEC2eUPaLuGXUQqBw=/0x492:1080x1057/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/19352076/CB_14444_Topics_2.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.theverge.com/2019/11/6/20948547/twitter-topics-launch-sports-gaming-entertainment-test">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Twitter is rolling out Topics, a way to follow subjects automatically in the timeline</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      It’s starting with more than 300 subjects across sports, gaming, and entertainment.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.theverge.com/2019/11/6/20948547/twitter-topics-launch-sports-gaming-entertainment-test">https://www.theverge.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Q/A: Why Does an iPhone Need Less Memory Than an Android Phone?</title>
            <link>https://preslav.me/2019/10/31/iphone-less-memory-android/</link>
            <pubDate>Thu, 31 Oct 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/10/31/iphone-less-memory-android/</guid>
            <description>Note: Unlike my usual posts, this is a very basic, non-technical explanation. A friend asked me this question, and I thought I might share the answer here. You can use it on your next cocktail party 🍻
It mainly boils down to how memory garbage gets collected on each platform. iOS applications rely on an approach called Automatic Reference Counting (ARC). Every piece of memory that gets assigned some value gets tracked and released, as soon as the number of its accessors reaches zero.</description>
            <content type="html"><![CDATA[<p><strong>Note:</strong> <em>Unlike my usual posts, this is a very basic, non-technical explanation. A friend asked me this question, and I thought I might share the answer here. You can use it on your next cocktail party 🍻</em></p>

<hr />

<p>It mainly boils down to how memory garbage gets collected on each platform. iOS applications rely on an approach called <a href="https://en.wikipedia.org/wiki/Automatic_Reference_Counting">Automatic Reference Counting (ARC)</a>. Every piece of memory that gets assigned some value gets tracked and released, as soon as the number of its accessors reaches zero.</p>

<p>Android on the other hand, uses a mark-and-sweep garbage collector, known from the <a href="https://en.wikipedia.org/wiki/Java_virtual_machine?wprov=sfti1">Java virtual machine (JVM)</a>. It won’t clean up memory right away, but will occasionally free big chunks of it in one big pass (also known as stop-the-world). This approach assumes that there is a lot of memory available on the device so that these stop-the-world cleanups occur less frequently.</p>

<p>Both approaches have their advantages and disadvantages.</p>
]]></content>
        </item>
        
        <item>
            <title>Any Code Style You like as Long It&#39;s Black</title>
            <link>https://preslav.me/2019/10/26/any-code-style-you-like-as-long-as-it-is-black/</link>
            <pubDate>Sat, 26 Oct 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/10/26/any-code-style-you-like-as-long-as-it-is-black/</guid>
            <description>The other day, I had to go over some (not so) old Python code I wrote. The moment I started pulling my hair, came not when I figured out that I could no longer understand what it does. It was when I looked at how the code was formatted. To be precise - at its total lack of any formatting.
@media (max-width: 640px) { .embed-image { min-width: 100%; } }   psf/black  The uncompromising Python code formatter.</description>
            <content type="html"><![CDATA[

<p>The other day, I had to go over some (not so) old Python code I wrote. The moment I started pulling my hair, came not when I figured out that I could no longer understand what it does. It was when I looked at how the code was formatted. To be precise - at its total lack of <strong>any</strong> formatting.</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://repository-images.githubusercontent.com/125266328/48aef880-6cce-11e9-9e3c-3ca0dd3ac138); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://github.com/psf/black">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        psf/black</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The uncompromising Python code formatter. Contribute to psf/black development by creating an account on GitHub.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://github.com/psf/black">https://github.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<p>The first thing I do when I start a new project nowadays, is to set up an automatic code formatter. My personal favorite for Python is <a href="https://github.com/psf/black">Black</a>. It is an opinionated formatter made by <a href="https://github.com/ambv">Łukasz Langa</a> - a Python Core developer. Black leaves little choice when it comes to configuration. You can think of it as the <a href="https://golang.org/cmd/gofmt/">gofmt</a> or <a href="https://prettier.io/">Prettier</a> of Python. Integrate it with your editor of choice, or use the CLI over your code base and Black will do the rest:</p>

<pre><code class="language-python">from seven_dwwarfs import Grumpy, Happy, Sleepy, Bashful, Sneezy, Dopey, Doc
x = {  'a':37,'b':42, 'c':927}

if very_long_variable_name is not None and \
 very_long_variable_name.field &gt; 0 or \
 very_long_variable_name.is_debug:
 z = 'hello '+'world'
else:
 world = 'world'
 a = 'hello {}'.format(world)
 f = rf'hello {world}'
if (this
and that): y = 'hello world'
</code></pre>

<p>will transform into this:</p>

<pre><code class="language-python">from seven_dwwarfs import (
    Grumpy,
    Happy,
    Sleepy,
    Bashful,
    Sneezy,
    Dopey,
    Doc,
)

x = {&quot;a&quot;: 37, &quot;b&quot;: 42, &quot;c&quot;: 927}

if (
    very_long_variable_name is not None
    and very_long_variable_name.field &gt; 0
    or very_long_variable_name.is_debug
):
    z = &quot;hello &quot; + &quot;world&quot;
else:
    world = &quot;world&quot;
    a = &quot;hello {}&quot;.format(world)
    f = rf&quot;hello {world}&quot;
if this and that:
    y = &quot;hello world&quot;
</code></pre>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://black.now.sh/static/screenshot.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://black.now.sh">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Black Playground</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Playground for Black, the uncompromising Python code formatter.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://black.now.sh">https://black.now.sh | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<h1 id="isn-t-pep8-enough">Isn&rsquo;t PEP8 enough?</h1>

<p>When it comes to code style, most Python developers point out <a href="https://www.python.org/dev/peps/pep-0008">PEP8</a>. <a href="https://www.python.org/dev/peps/pep-0008">PEP8</a> is a good style guide, but definitely not a set of strict formatting rules. The same piece of code might be written in different ways, and still be compliant with PEP8. This is by design, as much of the Python philosophy is to leave the freedom and the final decision to the programmer. For comparison, Go follows a different mentality, where most of the extra energy aspects of programming are taken over by the compiler and the available tooling.</p>

<p>Unfortunately, even PEP8-compliant code still leads to arguments when it comes to keeping a unified code base. I don&rsquo;t know about you, but I have reached a level of pragmatism, where I don&rsquo;t care much about style and formatting, as long as it has been standardized everywhere. This is where Black enters the stage.</p>

<h1 id="black-is-relentless">Black is relentless</h1>

<p>Black has one guiding philosophy - produce diffs as small as possible. If one expression can fit on a single line (88 chars), regardless of how complex it is, it will be kept on a single line.</p>

<p>In most programming languages, nested expressions (multiple levels of indentation, as well as opening and closing brackets) are what makes code complex. Python list and dict comprehensions can be particularly nasty to comprehend, once they go over a certain length.</p>

<p>Black splits long expressions into multiple lines, where the outermost brackets get separated from the inner content. If the inner content is longer than the line limit, the same operation gets repeated recursively on and on.</p>

<p>The result is code, which, although taking more vertical space than writing a few one-liners, is much easier to read and reason about. The fact that Black will always format your code the same way makes even more sense when working with other people. Lines diffs are the way source control systems indicate changes. Therefore, uniformly splitting complex code into multiple lines makes code reviews easier and takes away almost discussions around style.</p>

<h1 id="black-is-stubborn">Black is stubborn</h1>

<p>Borrowing ideas from <a href="https://golang.org/cmd/gofmt/">gofmt</a>, Black has close to zero configuration options, especially, when it comes to variations of formatting style. I welcome such initiatives, because formatting is not something I would like to personally spend time dealing with. If this is not to your taste, however, you might try out the notable alternatives, such as <a href="https://github.com/google/yapf">yapf</a> and <a href="https://github.com/hhatto/autopep8">autopep8</a>. <a href="https://github.com/google/yapf">yapf</a>, in particular, has multiple code style options, e.g. from Google, Facebook, which you can try and see if any fits your taste. You can always create your own, and share it across all fo your projects.</p>

<h1 id="know-when-to-be-inconsistent">Know when to be inconsistent</h1>

<p>Contrary to everything I have said so far, there might be times when blindlyy following a consistent standard is just inapplicable. As PEP8 says it: <em>&ldquo;When in doubt, use your best judgment. Look at other examples and decide what looks best. And don&rsquo;t hesitate to ask!&rdquo;</em></p>

<hr />


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/esZLCuWs_2Y" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>




<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://www.python.org/static/opengraph-icon-200x200.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.python.org/dev/peps/pep-0008">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        PEP 8 -- Style Guide for Python Code</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The official home of the Python Programming Language</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.python.org/dev/peps/pep-0008">https://www.python.org | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>





<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://kevinpeters.net/thumbnails/auto-formatters-for-python-opengraph.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.kevinpeters.net/auto-formatters-for-python">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        The 3 best auto formatters for Python</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      🔥Save time by using the best auto formatters for python - a comparison to find the best. The auto formatters in this blog article can be used online or in editors like vscode and feature Python 2 and Python 3.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.kevinpeters.net/auto-formatters-for-python">https://www.kevinpeters.net | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>





<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://github.com/google/yapf">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        google/yapf</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      A formatter for Python files. Contribute to google/yapf development by creating an account on GitHub.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://github.com/google/yapf">https://github.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>





<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://avatars1.githubusercontent.com/u/150309?s=400&amp;v=4); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://github.com/hhatto/autopep8">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        hhatto/autopep8</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      A tool that automatically formats Python code to conform to the PEP 8 style guide. - hhatto/autopep8</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://github.com/hhatto/autopep8">https://github.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div></p>
]]></content>
        </item>
        
        <item>
            <title>Go is Good Enough</title>
            <link>https://preslav.me/2019/10/18/go-is-good-enough/</link>
            <pubDate>Fri, 18 Oct 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/10/18/go-is-good-enough/</guid>
            <description>Have you heard about the Pareto Principle? Also known as the 80&amp;frasl;20 Rule, it states that for many aspects of life, 80% of the effects come from 20% of the inputs. Flip it around and the opposite is also true: reaching out for the rest of the 20% requires 80% of the initial effort. It is amazing how many manifestations of both exist in real life. One of the big wisdoms in life - it is often not the smartest, fastest, or strongest individuals that leave a dent.</description>
            <content type="html"><![CDATA[<p>Have you heard about the <a href="https://en.wikipedia.org/wiki/Pareto_principle">Pareto Principle</a>? Also known as the <em><sup>80</sup>&frasl;<sub>20</sub> Rule</em>, it states that for many aspects of life, 80% of the effects come from 20% of the inputs. Flip it around and the opposite is also true: reaching out for the rest of the 20% requires 80% of the initial effort. It is amazing how many manifestations of both exist in real life. One of the big wisdoms in life - it is often not the smartest, fastest, or strongest individuals that leave a dent. It is the ones pragmatic enough to achieve the 80% with 20% of the effort and energy spent.</p>

<p>The slight deviation aside, the same very much applies to the Go programming language. It is just good enough. Go won&rsquo;t win the category of language design, neither is it the fastest one on the market. Nor is it the safest member of the bunch. The truth is, what Go offers on the table might seem pretty boring at first. It is a compiled, statically typed language with an extremely reduced syntax, a somewhat simplified concurrency model, and a bit of memory safety. Nothing near close to the speed of C, the beauty of Ruby or the dogmatic memory management of Rust.</p>

<p>And this is what makes Go succeed. It does not have any of those things, but it is simple and fast enough to get you going on a new project without having to second-guess your approach every second. The lack of features helps reduce the cognitive burden on both the programmer and the compiler. The speed, file-size and memory consumption of the final applications is more optimal than those of 80% of applications built using other technologies.</p>

<p>Will Go ever be the best in any single programming language category? Probably no. Is it good enough to sustain 80% of your programming efforts? Absolutely!</p>

<hr />






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  

  <div class="embed-image"
    style="flex: 1 1 0%; background: rgba(0, 0, 0, 0) linear-gradient(#eaeaea 0%, #73747b 100%) repeat scroll 0% 0%; min-height: 120px;">
  </div>

  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://en.wikipedia.org/wiki/Pareto_principle">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Pareto principle - Wikipedia</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The Pareto principle (also known as the 80/20 rule, the law of the vital few, or the principle of factor sparsity)[1][2] states that, for many events, roughly 80% of the effects come from 20% of the causes.[3] Management consultant Joseph M. Juran suggested the principle and named it after Italian economist Vilfredo Pareto, who noted the 80/20 connection while at the University of Lausanne in 1896, as published in his first work, Cours d&#39;économie politique. In it, Pareto showed that approximately 80% of the land in Italy was owned by 20% of the population.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://en.wikipedia.org/wiki/Pareto_principle">https://en.wikipedia.org | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>This Is How We Write History</title>
            <link>https://preslav.me/2019/10/12/this-is-how-we-write-history/</link>
            <pubDate>Sat, 12 Oct 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/10/12/this-is-how-we-write-history/</guid>
            <description>This morning, a humble distance runner from Kenya once again proved that the impossible is only a state of mind. A performance, more resembling a concert symphony than an endurance race. Eliud Kipchoge broke the 2-hour marathon barrier today - something that for years was deemed unthinkable for any human being:
  This is the beginning of a new era of running. I am certain that Kipchoge&amp;rsquo;s achievement will inspire others, if not to try a and beat it, to at least get out and be active.</description>
            <content type="html"><![CDATA[<p>This morning, a humble distance runner from Kenya once again proved that the impossible is only a state of mind. A performance, more resembling a concert symphony than an endurance race. Eliud Kipchoge broke the 2-hour marathon barrier today - something that for years was deemed unthinkable for any human being:</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/km3NxpOq3NU" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>This is the beginning of a new era of running. I am certain that Kipchoge&rsquo;s achievement will inspire others, if not to try a and beat it, to at least get out and be active.</p>

<p>No human is limited!</p>

<p>To the critics: Yes, it was not an official race, yes, Kipchoge did wear special cushioned shoes, and drank electrolyte gels. Yes, it was an incredibly well engineering feat. One, where everyone, from the shoe designer and the single factory worker, through the pacers, crewmen, and spectators, to Kipchoge himself, played an equally important part.</p>

<p>And so it should be. As a species, we have been destined to move forward and achieve great things only when doing things together. There is nothing wrong with that. In fact, this victory comes right time, when we badly need the good example of a group of individuals achieving the impossible by going beyond the limitations of body, mind, and spirit.</p>

<blockquote>
<p>&ldquo;We have made history together, and together we can make this world a beautiful world.&rdquo; -</p>

<p>Eliud Kipchoge</p>
</blockquote>

<p>Cheers!</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://img.olympicchannel.com/images/image/private/t_social_share_thumb/primary/hddlcbqmdekn5lbrkin5); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.olympicchannel.com/en/stories/news/detail/eliud-kipchoge-first-sub-two-hour-marathon/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Eliud Kipchoge runs first ever sub-two hour marathon</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Kenya&#39;s marathon Olympic champion and world record holder Kipchoge clocked 1:59:40 on a historic morning in Vienna</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.olympicchannel.com/en/stories/news/detail/eliud-kipchoge-first-sub-two-hour-marathon/">https://www.olympicchannel.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>What&#39;s New in Mixtape</title>
            <link>https://preslav.me/2019/10/10/what-is-new-in-mixtape/</link>
            <pubDate>Thu, 10 Oct 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/10/10/what-is-new-in-mixtape/</guid>
            <description>Give me more like these&amp;hellip; Search engines are a great tool for content discovery beyond the simple text searching. Often, it is difficult to express exactly what we are looking for. This may be due to limitations of the interface, or our own struggle to explain it in enough detail. There is one thing, however, which we are fairly good at. Given two things, we can easily say which one we like more than the other.</description>
            <content type="html"><![CDATA[

<h2 id="give-me-more-like-these">Give me more like these&hellip;</h2>

<p>Search engines are a great tool for content discovery beyond the simple text searching. Often, it is difficult to express exactly what we are looking for. This may be due to limitations of the interface, or our own struggle to explain it in enough detail. There is one thing, however, which we are fairly good at. Given two things, we can easily say which one we like more than the other.</p>

<p>With the most recent update on <a href="https://mixtape.preslav.me/">Mixtape</a>, I have added the ability to use Mixtape as a way to discover new podcast episodes, by simply providing the IDs of ones that might be of interest to you. Those who have worked with search engines before, probably know that this is something that this type of applications are fairly well-suited, but not often used for. In particular, ElasticSearch (the brain behind the whole search operation) has a particular type of search query, which allows for just that.</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://www.elastic.co/static/images/elastic-logo-200.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        More like this query | Elasticsearch Reference [7.4]</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The More Like This Query finds documents that are &#34;like&#34; a given
set of documents. In order to do so, MLT selects a set of representative terms
of these input documents, forms a query using these terms, executes the query
and returns the results. The user controls the input documents, how the terms
should be selected and how the query is formed.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html">https://www.elastic.co | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<h2 id="next-steps">Next steps</h2>

<p>Currently, this is still an API-only feature, but it will open up the door for applications of various sorts. One particular thing I am working on, is in the form of a chat bot application, which one will be able to send podcast episode links to (e.g. from <a href="https://overcast.fm/">Overcast</a>, <a href="https://www.pocketcasts.com/">Pocket Casts</a>, <a href="https://www.apple.com/itunes/">Apple Podcasts</a>, etc) and get related podcast episodes to keep listening to.</p>

<p>Stay tuned!</p>
]]></content>
        </item>
        
        <item>
            <title>A Few Broken Windows</title>
            <link>https://preslav.me/2019/10/10/a-few-broken-windows-apple-ios13/</link>
            <pubDate>Thu, 10 Oct 2019 08:35:04 +0000</pubDate>
            
            <guid>https://preslav.me/2019/10/10/a-few-broken-windows-apple-ios13/</guid>
            <description>I have been using iOS 13 / iPadOS / watchOS 6 for a couple of weeks now. My general impression: something seems a bit off. Don&amp;rsquo;t get me wrong, the new features are great. I totally love the Dark Mode support, the new Notes features, etc. I also have managed to get through the whole update phase without any major issues. No iCloud syncing problems, no significant battery drain, no frequent restarts, or any of the kind.</description>
            <content type="html"><![CDATA[<p>I have been using iOS 13 / iPadOS / watchOS 6 for a couple of weeks now. My general impression: something seems a bit off. Don&rsquo;t get me wrong, the new features are great. I totally love the Dark Mode support, the new Notes features, etc. I also have managed to get through the whole update phase without any major issues. No iCloud syncing problems, no significant battery drain, no frequent restarts, or any of the kind. Yet, there are many tiny things that give a feeling of something unfinished. The worst thing is, those used to work in previous OS versions, and they do now too, but only sometimes:</p>

<ul>
<li>copying links and files between Apple devices occasionally won&rsquo;t happen</li>
<li>the same for the new Share Sheet. Sometimes, I&rsquo;d keep tapping an app or an action several times and nothing would happen.</li>
<li>when running the Apple Watch in Cinema Mode, tapping the screen might not wake it up. Sometimes, up to four or five taps were needed.</li>
<li>Apple Pay occasionally won&rsquo;t open up on a double tap.</li>
</ul>

<p>If those were all things that did not work in general, I wouldn&rsquo;t t be worried. Those I am sure that Apple would have fixed by now. What worries me are those many tiny things that work most of the time, but often fail to do so. I know from experience with the the products that I have been working on that those are the issues that cause the most customer distrust, because of being treated as <em>working</em>.</p>

<p>P.S. All of this reminds me of:</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://upload.wikimedia.org/wikipedia/commons/6/6e/Pentonvilleiso19.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://en.wikipedia.org/wiki/Broken_windows_theory">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Broken windows theory - Wikipedia</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Theory</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://en.wikipedia.org/wiki/Broken_windows_theory">https://en.wikipedia.org | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Simple Immutable Builders in Go, Using Value Receivers</title>
            <link>https://preslav.me/2019/10/06/simple-immutable-builders-in-go-using-value-receivers/</link>
            <pubDate>Sun, 06 Oct 2019 07:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/10/06/simple-immutable-builders-in-go-using-value-receivers/</guid>
            <description>Even in a simple language like Go, concurrently updating mutable state is like playing with fire. Take this piece of code, for example:
l := content.NewLoader() l.PageCount = 5 c := l.Load(bytes)  Can you be sure that what you are loading is actually going to contain five pages? What if another goroutine having access to l, interjects and sets PageCount to 1000? Or worse, updates the state of l such that a panic is inevitable?</description>
            <content type="html"><![CDATA[

<p>Even in a simple language like Go, concurrently updating mutable state is like playing with fire. Take this piece of code, for example:</p>

<pre><code class="language-go">l := content.NewLoader()
l.PageCount = 5
c := l.Load(bytes)
</code></pre>

<p>Can you be sure that what you are loading is actually going to contain five pages? What if another goroutine having access to <code>l</code>, interjects and sets <code>PageCount</code> to 1000? Or worse, updates the state of <code>l</code> such that a panic is inevitable?</p>

<p>The simplest solution to this is to pack as much of the initial state configuration into the initialisation step. Constructors do not exist in Go, but unless we speak about a data-only struct (no logic), I would always recommend providing an initialiZer func <code>NewLoader(...)</code> and keeping as much of the state   of the struct unexported. This will transform the previous piece of code into:</p>

<pre><code class="language-go">l := content.NewLoader(pageCount: 5)
c := l.Load(bytes)
</code></pre>

<p>The problem there becomes apparent when you start having more than three arguments:</p>

<pre><code class="language-go">l := content.NewLoader(pageCount: 5, offset: 3, protocol: &quot;HTTP&quot;, //... )
c := l.Load(bytes)
</code></pre>

<p>How can we initialize <code>Loader</code> in a safe way, providing for some defaults, and without having to pack tens of parameters into the initializing func? There are various ways to achieve this. I have already written about <a href="https://preslav.me/2019/07/07/implementing-a-functional-style-builder-in-go/">one way</a> to approach this, another could be the functional options approach, suggested by <a href="https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis">Dave Cheney</a>.</p>

<h1 id="value-receivers-as-builder-methods">Value receivers as builder methods</h1>

<p>The simplest one I have found so far, takes advantage of an innate property of the Go language. Namely, the fact that everything is passed by value. One of the first questions many go beginners ask about, is the difference between <a href="https://tour.golang.org/methods/8">value and pointer receivers</a>. Pointer receivers are usually the preferred way to go, often, as an (premature) optimization, rather than because modifications are required. A bit underrated, value receivers have one big advantage, which is that they are safe for concurrent use. What a value receiver would get is a copy of the original value. This makes them perfect for implementing builder methods:</p>

<pre><code class="language-go">type Loader struct {
	pageSize int
}

func NewLoader() *Loader {
	return &amp;Loader{
		pageSize:10, // default
	}
}

// check the use of a value receiver here
func (l Loader) WithPageSize(ps int) *Loader {
	l.pageSize = ps
	return &amp;l
}

// The rest could be your usual pointer receivers
func (l *Loader) Load(bytes []byte) string {
	// ...
}
</code></pre>

<p>The fact that we use a value receiver will cause the value of <code>l</code> to be copied, so technically, what we set <code>pageSize</code> to is a completely different place in memory. This is why we have to return a pointer to it and and reassign <code>l</code>:</p>

<pre><code class="language-go">l := content.NewLoader().
			withPageSize(5)

c := l.Load(bytes)
</code></pre>

<p>This will cause some copying and a bit of work for the garbage collector, but in the grand scheme of things, it will be a negligible overhead. The safety that you gain is far more important.</p>

<p>Let me know what you think.</p>
]]></content>
        </item>
        
        <item>
            <title>What&#39;s in a Mixtape?</title>
            <link>https://preslav.me/2019/09/25/what-is-in-a-mixtape/</link>
            <pubDate>Wed, 25 Sep 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/09/25/what-is-in-a-mixtape/</guid>
            <description>Mixtape
 A homemade music compilation (usually on cassette or CD-R) that contains all your favourite tracks. Often you give such a compilation to the guy or gal of your fancy in hopes that it will help you win their heart. &amp;ndash; Urban Dictionary A budding search and discovery engine for podcasts built by yours truly.  The 20th century marked a giant leap forward in music production and distribution.</description>
            <content type="html"><![CDATA[

<p><em>Mixtape</em></p>

<ol>
<li><em>A homemade music compilation (usually on cassette or CD-R) that contains all your favourite tracks. Often you give such a compilation to the guy or gal of your fancy in hopes that it will help you win their heart. &ndash; <a href="https://www.urbandictionary.com/define.php?term=Mixtapes">Urban Dictionary</a></em></li>
<li><em>A budding <a href="https://mixtape.preslav.me/">search and discovery engine for podcasts</a> built by yours truly.</em></li>
</ol>

<p>The 20th century marked a giant leap forward in music production and distribution. It started with the vinyl record which made music available in everyone&rsquo;s home. Then, at the turn of the century, the digital cassette recorder came to shake the game, by allowing everyone to create mixes of their own liking.</p>

<p>See, vinyl records are great, but they could only play the same thing over and over again. Assuming you bought one album per record, you quickly ended up holding a pile of records from your favourite bands. We all know that artists back then were great and almost all songs in an album became hits, but what if, hypothetically, one liked only a couple of songs and skipped the rest? One still needed to buy and keep the entire record.</p>

<p>Digital cassette recorders changed all that. Not only were cassettes smaller in size; one could record on top, multiple times over. This gave the birth of the <strong>mixtape</strong>. Decades before the playlists of today, mixtapes let everyone create and share thematic mixes of songs from different artists, and often, from completely different genres.</p>

<h1 id="from-cassettes-to-podcasting">From cassettes to podcasting</h1>

<p>In a funny, but similar way, podcast distribution still works like buying vinyls from a record store. You can subscribe manually, or via any of the myriads of mobile apps out there. Yet, podcasts still get distributed primarily as RSS feeds that you either follow entirely or not at all. Just like with records, if you like the podcast host, over the years you build up a certain sense of loyalty and bonding. I have been listening to podcasts since 2004, and there are are many that I have been following for more than a decade.</p>

<p>Unfortunately, just like music, podcasts nowadays are in the millions. While I still follow my favorites, there are many more, from which I occasionally grab an interesting episode and skip the rest. Kind of like your Twitter timeline. Of the hundreds (or thousands) of people you follow, perhaps, you only interact with a couple. The rest are somewhat matching your taste, but you probably only added them because you like one of their tweets. Now you are stuck with them forever, hoping for them to strike gold again.</p>

<p>This is one of the reasons why I started working on <a href="https://mixtape.preslav.me/">Mixtape</a>. From a rough first glance, <a href="https://mixtape.preslav.me/">Mixtape</a> looks like a search engine. This is totally true - the search engine is what powers the foundation of <a href="https://mixtape.preslav.me/">Mixtape</a>. Unlike what you would get in your podcast player, the search engine goes beyond the podcast itself, and focuses on what makes each of its episodes unique. That&rsquo;s why, you would get episodes from various podcasts when searching for a given topic:</p>

<ul>
<li><a href="https://mixtape.preslav.me/?search=sleep%20science"><em>Why is sleep so important</em></a></li>
<li><a href="https://mixtape.preslav.me/?search=space%20exploration&amp;category=science"><em>What&rsquo;s the up with space exploration?</em></a></li>
<li><a href="https://mixtape.preslav.me/?search=future%20of%20work&amp;category=business"><em>Are we ready for the future of work?</em></a></li>
</ul>

<p>Yet, the search is only the beginning. The <strong>mixtape</strong> part in <a href="https://mixtape.preslav.me/">Mixtape</a> comes from the fact that each search is essentialy a new podcast you can subscribe to. A whole new podcast, made up of episodes from various shows, and centred around the topic that interested you.</p>

<p>And here comes the discovery part. By providing the full credits to the original podcast creator (incl. links, podcast covers, etc), I am hoping that having caught up on a new podcast via a mixtape feed, a listener would eventually go and subscribe for the podcast itself. The difference with subscribing up-front, is that the listener would have gained enough confidence that the podcast is really up to their liking.</p>
]]></content>
        </item>
        
        <item>
            <title>Good Code is Boring</title>
            <link>https://preslav.me/2019/09/21/good-code-is-boring/</link>
            <pubDate>Sat, 21 Sep 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/09/21/good-code-is-boring/</guid>
            <description>You have seen them many times. Small snippets of code and the question &amp;ldquo;What would the the following piece of code print&amp;rdquo; beneath. You might have tried taking a guess, and perhaps, even failed.
#golang pop quiz: what will this print? https://t.co/99xR8wybpp pic.twitter.com/Q7YpJbYr8c
&amp;mdash; ✕✕✕✕✕ (@peterbourgon) May 18, 2017 I find those kinds of questions utterly pointless. They not only teach you nothing about real-world programming, but might also lead many newcomers to long-term frustration with programming.</description>
            <content type="html"><![CDATA[<p>You have seen them many times. Small snippets of code and the question <strong><em>&ldquo;What would the the following piece of code print</em></strong>&rdquo; beneath. You might have tried taking a guess, and perhaps, even failed.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw">#golang</a> pop quiz: what will this print? <a href="https://t.co/99xR8wybpp">https://t.co/99xR8wybpp</a> <a href="https://t.co/Q7YpJbYr8c">pic.twitter.com/Q7YpJbYr8c</a></p>&mdash; ✕✕✕✕✕ (@peterbourgon) <a href="https://twitter.com/peterbourgon/status/865159346149314560?ref_src=twsrc%5Etfw">May 18, 2017</a></blockquote>


<p>I find those kinds of questions utterly pointless. They not only teach you <strong>nothing</strong> about real-world programming, but might also lead many newcomers to long-term frustration with programming.</p>

<p>All programming languages have baggage - obscure features that made it in the spec but were later deemed as <strong>hacks</strong> that should be avoided. There is a certain sense of pride that junior programmers feel when they find such hacks and use them to demonstrate problem-solving skills. I am all in favor of encouraging developers to be proactive and think out of the box. Yet, I often try to point out that using questions like the above as a way of judging one&rsquo;s skills is the wrong way to do it. The mere fact that an opportunity for such questions exists in the first place, should make one take a skeptical look at the language itself.</p>

<p>Contrary to what your teacher taught you, real-world programming is all but proving yourself at solving complex riddles. Much of the well-written production code I have seen is pretty trivial and boring-looking like. This makes it easy to follow and maintain years down the road, once its original creator no longer works on it.</p>
]]></content>
        </item>
        
        <item>
            <title>Bought a Year-Long License for GoLand</title>
            <link>https://preslav.me/2019/08/29/goland-license/</link>
            <pubDate>Thu, 29 Aug 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/08/29/goland-license/</guid>
            <description>NOTE: This is not a paid product endorsement. I&amp;rsquo;m just a happy customer. I have recently bought a full license of GoLand for a year. The trial served me well for a few months, but the IDE shutting down automatically after every 30 minutes of work, became way too annoying. I know, I shouldn&amp;rsquo;t rely on an IDE for writing Go, when VS Code or Vim would have worked just fine.</description>
            <content type="html"><![CDATA[

<h5 id="note-this-is-not-a-paid-product-endorsement-i-m-just-a-happy-customer">NOTE: This is not a paid product endorsement. I&rsquo;m just a happy customer.</h5>

<p>I have recently bought a full license of <a href="https://www.jetbrains.com/go/">GoLand</a> for a year. The trial served me well for a few months, but the IDE shutting down automatically after every 30 minutes of work, became way too annoying. I know, I shouldn&rsquo;t rely on an IDE for writing Go, when VS Code or Vim would have worked just fine. It&rsquo;s just that the entire experience of writing, and more importantly, refactoring Go code in GoLand is so amazing.</p>

<p>Picking up a JetBrains product when coming to Go was a natural move. As a Java developer, I have used IntelliJ Idea for years. I am used to much of the refactoring goodness, and know most of the available key shortcuts by heart, so switching literally took me a minute. This one is a big plus, and JetBrains deserves a big thanks for it. Knowing that developers often switch platforms, offering the same experience everywhere is nothing short of great. I know, I know, in reality, those &ldquo;IDE&rdquo;s are nothing other than platform-specific plugins that run in the same core. One gets a similar experience when installing various officially-supported plugins for say, Visual Studio Code.</p>

<p>Almost. The official language support plugin for Go in VS Code uses much of the available open-source tooling for Go, developed by the community. While this is great, it also presents a temporary drawback. A large portion of the tooling still relies on projects using <code>GOPATH</code> and need to be updated in order to support Go modules. Since all of my projects have used Go modules from the start, I have experienced issues doing even basic refactoring in VS Code (e.g. renaming across the project)</p>

<p>The transition is happening and will sooner or later be no longer a problem. Luckily, GoLand does not seem to suffer from much of this, because it uses a different mechanism of indexing and analyzing code. I think that I&rsquo;ll stick to it for a year while community tooling gets to a stage, where modules are fully supported.</p>
]]></content>
        </item>
        
        <item>
            <title>Reduce Struct Size by Laying out Attributes Accordingly</title>
            <link>https://preslav.me/2019/08/27/reduce-struct-size-by-laying-out-attributes-accordingly/</link>
            <pubDate>Tue, 27 Aug 2019 15:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/08/27/reduce-struct-size-by-laying-out-attributes-accordingly/</guid>
            <description>Many thanks to @themaour for sharing this tip on Twitter TIL that in Go, struct size depends on how underlying types were defined.
struct { a bool b int32 c string d string }  The size of the struct above is is different from the one down below
struct { b int32 c string d string a bool }  Why is that? Well, think of memory as consisting of segments of certain size, where, if the amount of data you fill the segment with is bigger than the current remainder of the segment, the data will get written onto the next segment.</description>
            <content type="html"><![CDATA[

<h5 id="many-thanks-to-themaour-https-twitter-com-themaour-status-1165555578019692544-for-sharing-this-tip-on-twitter">Many thanks to <a href="https://twitter.com/themaour/status/1165555578019692544">@themaour</a> for sharing this tip on Twitter</h5>

<p>TIL that in Go, struct size depends on how underlying types were defined.</p>

<pre><code class="language-go">struct {
	a bool
    b int32
    c string
    d string
}
</code></pre>

<p>The size of the struct above is is different from the one down below</p>

<pre><code class="language-go">struct {
	b int32
    c string
    d string
    a bool
}
</code></pre>

<p>Why is that? Well, think of memory as consisting of segments of certain size, where, if the amount of data you fill the segment with is bigger than the current remainder of the segment, the data will get written onto the next segment. The remaining space (a.k.a, <em>padding</em>) remains unused, and every instance of your struct might have some portion of unused padding when initialised.</p>

<p>There is a <a href="http://golang-sizeof.tips">great online resource</a> where you can see this by providing a sample struct definition. Let&rsquo;s see what it shows for struct #1:</p>

<p><img src="/images/2019/08/Image 2019-08-27 18-07-29.png" alt="" /></p>

<p>and struct #2:</p>

<p><img src="/images/2019/08/Image 2019-08-27 18-03-26.png" alt="" /></p>

<p>Think of this the next time you get to process a slice of 1 mln instances of a given struct.</p>

<h1 id="resources">Resources</h1>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  

  <div class="embed-image"
    style="flex: 1 1 0%; background: rgba(0, 0, 0, 0) linear-gradient(#eaeaea 0%, #73747b 100%) repeat scroll 0% 0%; min-height: 120px;">
  </div>

  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="http://www.catb.org/esr/structure-packing/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        The Lost Art of Structure Packing</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      This page is about a technique for reducing the memory footprint of
programs in compiled languages with C-like structures - manually
repacking these declarations for reduced size. To read it, you will
require basic knowledge of the C programming language.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="http://www.catb.org/esr/structure-packing/">http://www.catb.org | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Mind the Frog</title>
            <link>https://preslav.me/2019/08/23/mind-the-frog/</link>
            <pubDate>Fri, 23 Aug 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/08/23/mind-the-frog/</guid>
            <description>If you put a frog in a frying pan, it will quickly jump out. Yet, if you put the frog in cold water and slowly heat, the frog will enjoy the warmth until it&amp;rsquo;s too late to escape.
 We have all heard that story, but how many of us can admit that we play the frog on a daily basis? Especially at work, people tend to put a lot more focus on what they are working on and rather, avoid having a say on how the rest of the organization moves forward.</description>
            <content type="html"><![CDATA[<blockquote>
<p>If you put a frog in a frying pan, it will quickly jump out. Yet, if you put the frog in cold water and slowly heat, the frog will enjoy the warmth until it&rsquo;s too late to escape.</p>
</blockquote>

<p>We have all heard that story, but how many of us can admit that we play the frog on a daily basis? Especially at work, people tend to put a lot more focus on what they are working on and rather, avoid having a say on how the rest of the organization moves forward. This is all normal, and granted, traditionally not everyone has had the leverage to pull strings at the project or organizational levels. But IT startups are different, or they want us to believe that they are different. Therefore, when I see so many people in the IT industry changing jobs all the time, it makes me want to ask for the reasons. Money or titles are the usual answers, but I often sense there&rsquo;s something deeper lurking behind. An inability to admit that, just like the frog, they have enjoyed the perks of the industry, not noticing how the organization had shifted in the meantime.</p>

<p><strong>If you&rsquo;re passionate about what you&rsquo;re doing, you need to keep an eye on how things are changing around you</strong>. Don&rsquo;t worry about leaving your comfort zone. Unless you actively speak up your mind, you&rsquo;ll be forced to by the warm water becoming too hot to bear.</p>

<p>If you still fail to change things, <strong>you&rsquo;ll know that you&rsquo;ve tried at least</strong>. It&rsquo;s never too late to change the train and start again. As Martin Fowler <a href="http://wiki.c2.com/?ChangeYourOrganization">wrote</a> once:</p>

<blockquote>
<p>You can change your <strong>organization</strong>, or <strong>change</strong> your organization.</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>X509: Certificate Signed by Unknown Authority (Running a Go App Inside a Docker Container)</title>
            <link>https://preslav.me/2019/08/11/x509-certificate-signed-by-unknown-authority-running-a-go-app-inside-a-docker-container/</link>
            <pubDate>Sun, 11 Aug 2019 07:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/08/11/x509-certificate-signed-by-unknown-authority-running-a-go-app-inside-a-docker-container/</guid>
            <description>If you ever get the following message:
x509: certificate signed by unknown authority  While running your Go app in a Docker container, there is a chance that you might not have the necessary trusted certificates installed in your Docker container. Assuming that you run your Go apps in lightweight containers, based on Scratch or Alpine, you will have to add the certificates yourselves.
On Alpine, this can be done using the default package installer:</description>
            <content type="html"><![CDATA[

<p>If you ever get the following message:</p>

<pre><code class="language-bash">x509: certificate signed by unknown authority
</code></pre>

<p>While running your Go app in a Docker container, there is a chance that you might not have the necessary trusted certificates installed in your Docker container. Assuming that you run your Go apps in lightweight containers, based on <a href="https://docs.docker.com/develop/develop-images/baseimages/#create-a-simple-parent-image-using-scratch">Scratch</a> or Alpine, you will have to add the certificates yourselves.</p>

<p>On Alpine, this can be done using the default package installer:</p>

<pre><code class="language-docker">RUN apk --no-cache add ca-certificates
</code></pre>

<p>Since Scratch is not based on a particular distribution you would have to download the certificates manually and add them as part of the build process:</p>

<pre><code class="language-docker">ADD ca-certificates.crt /etc/ssl/certs/
</code></pre>

<hr />

<h2 id="further-reading">Further Reading</h2>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://stackoverflow.com/questions/52969195/docker-container-running-golang-http-client-getting-error-certificate-signed-by">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Docker container running golang http.Client getting error `certificate signed by unknown authority`</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      I created a docker container for talking to the google api using GoLang. I started off using a SCRATCH container and am getting the error certificate signed by unknown authority upon changing to ub...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://stackoverflow.com/questions/52969195/docker-container-running-golang-http-client-getting-error-certificate-signed-by">https://stackoverflow.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://miro.medium.com/max/1200/1*-SxwIr4XV3YS0OSLrLNVqg.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://medium.com/@chemidy/create-the-smallest-and-secured-golang-docker-image-based-on-scratch-4752223b7324">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Create the smallest and secured golang docker image based on scratch</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      When we are building a docker Image, the first idea is using the default official image.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://medium.com/@chemidy/create-the-smallest-and-secured-golang-docker-image-based-on-scratch-4752223b7324">https://medium.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Mixtape Retrospective: Time to Split the Monolith?</title>
            <link>https://preslav.me/2019/08/03/mixtape-retrospective-time-to-split-the-monolith/</link>
            <pubDate>Sat, 03 Aug 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/08/03/mixtape-retrospective-time-to-split-the-monolith/</guid>
            <description>I have recently made my project Mixtape open to the world. Mixtape is a search and discovery platform for podcasts, built exclusively using Go. I decided to use Go primarily because of its compiler&amp;rsquo;s ability to deliver small, self-contained executables with close-to-metal native performance and extremely low memory footprint. It was also a way to battle-test the stack and figure out where and how it will benefit future projects in my portfolio.</description>
            <content type="html"><![CDATA[

<p>I have recently made my project <a href="https://mixtape.preslav.me/">Mixtape</a> open to the world. <a href="https://mixtape.preslav.me/">Mixtape</a> is a search and discovery platform for podcasts, built exclusively using Go. I decided to use Go primarily because of its compiler&rsquo;s ability to deliver small, self-contained executables with close-to-metal native performance and extremely low memory footprint. It was also a way to battle-test the stack and figure out where and how it will benefit future projects in my portfolio.</p>

<p>In the few months running to the initial release, I learned a lot and was confronted by a couple of challenges that other fellow programmers have also been raving about:</p>

<ul>
<li><p>Panics are lurking at every corner. A single panic can kill your entire app. The single (thought not 100% reliable) cure is to handle every error explicitly. This leads to code which is often interrupted by the same three lines:</p>

<pre><code class="language-go">result, err := doSomething()
if err != nil {
// do something with the error, and potentially return or throw a Panic
}
</code></pre></li>

<li><p>Codebases do not scale well. Whether due to the simplistic syntax of the language, data types, or its approach to packaging and encapsulation, there is a certain point, in which either the cost of setting up proper abstractions or that of copying the same piece of code multiple times, ultimately slows down development efforts.</p></li>
</ul>

<h1 id="build-deploy-take-a-step-back">Build, deploy, take a step back</h1>

<p>I had to build a whole app in Go, only to realize that what I initially considered shortcomings, were features in disguise, intentionally put by the design team as protection against bloat. They are a very good indicator of when the time has come to split an application into two or more smaller apps. Some call them micro-services. I tend to think of them as commands, in the UNIX sense of single-purpose apps that do one thing and one thing alone.</p>

<p>When you start thinking this way, you realize that resilience and fault tolerance move away from the responsibilities of the single app/service/command and shift to the orchestration layer. That is not to say that you should not check for errors in your Go apps. On the contrary, check and cover what you can. However, not every error can be, or even, <strong>should be</strong> covered by your app. Some are even out of your control. Especially, when using 3rd-party code. Admit it, services fail and will fail, and that&rsquo;s their natural behavior.</p>

<p>By having the components split from one another at the service level, you allow each one to fail separately, without these causing problems on the rest or bringing the entire system down. With infrastructure tech such as Docker and Kubernetes, restarting a faulty service, or load-balancing between a myriad of service copies has become rather easy.</p>

<h1 id="no-s-t-sherlock">No s**t, Sherlock!</h1>

<p>All of that should have seemed obvious, you say? After, all, Go has been pointed time and again as the programming language of the Cloud (which, TBH, is pure marketing BS, from the same people that called MongoDB &ldquo;web-scale&rdquo; back in the day). Why did I go for a monolith, then? Because, developing a monolith is the most natural way you can start a project, especially when working on it alone. I come from the world of Java, where, assuming you have enough CPU and RAM to sustain it, your app can practically run forever out of a single instance. You can have as many separate threads as your hardware allows for, and each of those may fail, without this necessarily bringing your entire app down. You might end up in deadlocks and resource starvation might cause the app to crash, but this won&rsquo;t happen as often as people imagine.</p>

<p>So, it was our of practicality that I started building <a href="https://mixtape.preslav.me/">Mixtape</a> as a monolith. Now, I am at a crossroads. I have tried to stay away from messing up with infrastructure configuration for as long as I could. However, if I decide to continue with Go, I might have to eventually start splitting the app. Only time will tell.</p>
]]></content>
        </item>
        
        <item>
            <title>[Quote] Ten Years of Erlang</title>
            <link>https://preslav.me/2019/07/10/quote-ten-years-of-erlang/</link>
            <pubDate>Wed, 10 Jul 2019 10:28:44 +0100</pubDate>
            
            <guid>https://preslav.me/2019/07/10/quote-ten-years-of-erlang/</guid>
            <description>It&amp;rsquo;s probably not too important, in the grand scheme of things, whether you are using a language like Erlang or not. While I do feel it&amp;rsquo;s under-used and under-rated, the biggest benefit of it is not in running a system that uses it. The biggest benefit comes from learning about the fundamentals of solid system design, and internalizing its lessons in a practical context.
 @media (max-width: 640px) { .</description>
            <content type="html"><![CDATA[<blockquote>
<p>It&rsquo;s probably not too important, in the grand scheme of things, whether you are using a language like Erlang or not. While I do feel it&rsquo;s under-used and under-rated, the biggest benefit of it is not in running a system that uses it. The biggest benefit comes from learning about the fundamentals of solid system design, and internalizing its lessons in a practical context.</p>
</blockquote>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://ferd.ca/static/img/erlang-ladder.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://ferd.ca/ten-years-of-erlang.html">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Ten Years of Erlang</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      For my ten years in the Erlang community, I decided to cover a few topics such as hype phases and how this related to Erlang, the ladder of ideas within the language and how that can impact adoption, what changed in my decade there, and what I think Erlang still has to bring to the programming community at large.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://ferd.ca/ten-years-of-erlang.html">https://ferd.ca | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Adding Version Information to Go Binaries</title>
            <link>https://preslav.me/2019/07/09/adding-version-information-to-go-binaries/</link>
            <pubDate>Tue, 09 Jul 2019 04:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/07/09/adding-version-information-to-go-binaries/</guid>
            <description>One of the things that I find really neat about Go, is the single-executable delivery model. For small projects, it&amp;rsquo;s as simple as dragging and dropping the built executable right where I need it. After some time, however, I might easily forget which version of my codebase a given executable has been built upon. If I have to revert a change, how can I make sure that I build from the right commit?</description>
            <content type="html"><![CDATA[<p>One of the things that I find really neat about Go, is the single-executable delivery model. For small projects, it&rsquo;s as simple as dragging and dropping the built executable right where I need it. After some time, however, I might easily forget which version of my codebase a given executable has been built upon. If I have to revert a change, how can I make sure that I build from the right commit?</p>

<p>In large projects, this is where CI/CD comes to save the day. For small prototypes, however, setting up CI might be an unnecessary overkill until a much later stage in the process.</p>

<p>Luckily, there is an easy way to &ldquo;bake&rdquo; the information about the current commit hash right into the built executable.</p>

<p>Go does not have a dedicated build system, but the standard practice across the community is to use <a href="https://en.wikipedia.org/wiki/Make_(software)">make</a>. Make is widely available across *nix operating systems (incl. macOS), so I would usually add a simple <code>Makefile</code> to most of my Go projects. In this case, my makefile would look like this:</p>

<pre><code class="language-make">GOOS=linux
GOARCH=386

.PHONY: build

GIT_COMMIT := $(shell git rev-list -1 HEAD)

build:
	GOOS=$(GOOS) GOARCH=$(GOARCH) go build -ldflags &quot;-X main.gitCommit=$(GIT_COMMIT)&quot; .
</code></pre>

<p>Two things to note here:</p>

<ol>
<li><code>GIT_COMMIT</code> will store of the value of the current commit hash that our code base is at.</li>
<li><code>-ldflags &quot;-X main.gitCommit=$(GIT_COMMIT)&quot;</code> is Go&rsquo;s way of telling the linker to pass the commit hash to a variable in the code (<code>main.gitCommit</code>). Think of this as &ldquo;baking&rdquo; the information right into the compiled executable.</li>
</ol>

<p>All we need to make this happen, is use <code>make build</code> instead of <code>go build ...</code></p>

<p>In our code, we can check for the presence of a flag (e.g. <code>-v</code>) and display the hash:</p>

<pre><code class="language-go">package main

var gitCommit string

func printVersion() {
	log.Printf(&quot;Current build version: %s&quot;, gitCommit)
}

func main() {
	versionFlag := flag.Bool(&quot;v&quot;, false, &quot;Print the current version and exit&quot;)
	flag.Parse()

	switch {
	case *versionFlag:
		printVersion()
		return
	}
	// continue with other stuff
}
</code></pre>

<hr />

<p>Related reading:</p>

<p>




<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  

  <div class="embed-image"
    style="flex: 1 1 0%; background: rgba(0, 0, 0, 0) linear-gradient(#eaeaea 0%, #73747b 100%) repeat scroll 0% 0%; min-height: 120px;">
  </div>

  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://en.wikipedia.org/wiki/Make_%28software%29">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Make (software) - Wikipedia</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      In software development, Make is a build automation tool that automatically builds executable programs and libraries from source code by reading files called Makefiles which specify how to derive the target program. Though integrated development environments and language-specific compiler features can also be used to manage a build process, Make remains widely used, especially in Unix and Unix-like operating systems.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://en.wikipedia.org/wiki/Make_%28software%29">https://en.wikipedia.org | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>





<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://blog.alexellis.io/content/images/2017/08/pexels-photo-249580_crop.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://blog.alexellis.io/inject-build-time-vars-golang/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Inject build-time variables with Golang</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      In this blog post I&#39;ll show you how to inject variables into your Golang executable at build-time such as a Git Commit digest, then automate it with Docker</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://blog.alexellis.io/inject-build-time-vars-golang/">https://blog.alexellis.io | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>





<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://goreleaser.com/static/card.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://goreleaser.com/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        GoReleaser</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Deliver Go binaries as fast and easily as possible</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://goreleaser.com/">https://goreleaser.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div></p>
]]></content>
        </item>
        
        <item>
            <title>Implementing a Functional-Style Builder in Go</title>
            <link>https://preslav.me/2019/07/07/implementing-a-functional-style-builder-in-go/</link>
            <pubDate>Sun, 07 Jul 2019 10:17:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/07/07/implementing-a-functional-style-builder-in-go/</guid>
            <description>Go is definitely not the first language on my mind, when I hear the term “Functional Programming”. Yet, functions are first-class citizens in Go, and one can achieve a lot using higher-order functions (those that can receive and/or return other functions) alone.
In this post, I want to demonstrate the use of functional constructs for implementing the well-known Builder pattern. Please, note that there are many ways to implement a Builder, and I don&amp;rsquo;t claim that mine is certainly the best.</description>
            <content type="html"><![CDATA[

<p>Go is definitely not the first language on my mind, when I hear the term “Functional Programming”. Yet, functions are <a href="https://golangbot.com/first-class-functions/">first-class citizens</a> in Go, and one can achieve a lot using higher-order functions (those that can receive and/or return other functions) alone.</p>

<p>In this post, I want to demonstrate the use of functional constructs for implementing the well-known <a href="https://en.wikipedia.org/wiki/Builder_pattern">Builder</a> pattern. Please, note that there are many ways to implement a Builder, and I don&rsquo;t claim that mine is certainly the best. Think of it as a neat and simple exercise that would teach you some introductory functional concepts in the scope of Go.</p>

<p>To begin with, what is a <a href="https://en.wikipedia.org/wiki/Builder_pattern">Builder</a>? Builders help separate the <em>construction</em> of an object from its <em>representation</em>. Often, when dealing with complex object configurations, we end up writing code like this:</p>

<pre><code class="language-golang">instance := NewInstanceBuilder().
	WithA(1).
	WithB(2).
	WithC(3).
	Build()
</code></pre>

<p>using an intermediate Builder <code>struct</code>, or more directly:</p>

<pre><code class="language-golang">instance := NewInstance().
	WithA(1).
	WithB(2).
	WithC(3)
</code></pre>

<p>which is not safe, because the final instance is accessible at any point in time, and can be modified by any other goroutine running in parallel.</p>

<h1 id="a-functional-approach-to-building">A Functional Approach to Building</h1>

<p>Functional programming guarantees the safety of providing the instance only at the final step. At the same time, it can help minimise boilerplate. Using the functional approach, no additional structs should be necessary. Let&rsquo;s see how we can achieve this. Start with our core <code>struct</code>:</p>

<pre><code class="language-golang">type MyStruct struct {
	a int
	b int
}
</code></pre>

<p>Nothing special there. Now, pay attention to the next line of code:</p>

<pre><code class="language-golang">type Decorator func(m *MyStruct) *MyStruct
</code></pre>

<p>What do we have here? One of the revelations for every new Go programmer is that everything in Go can be a type, including functions. In our case, we specify a type called <code>Decorator</code>, to which we pass an instance of <code>MyStruct</code>, it performs some modifications on it, and returns the modified instance.</p>

<p><small><strong>Side note:</strong> the use of a pointer makes the example simpler. It is also safe-enough, since the <code>MyStruct</code> instance will not be accessible until the final build step. Still, if you prefer <a href="https://en.wikipedia.org/wiki/Pure_function">pure functions</a>, the example should be equally easy to implement using value-copying.</small></p>

<p>The really ingenious thing of thinking about a function as a type, is that we can reuse the type, and what&rsquo;s even more grounbreaking, add functionality to it. Check this out:</p>

<pre><code class="language-golang">func (f Decorator) WithA(a int) Decorator {
	return func(m *MyStruct) *MyStruct {
		f(m).a = a
		return m
	}
}
</code></pre>

<p>What did we just do? We added more functionality to <code>Decorator</code> - a higher-order function, which unwraps the decorator it has been attached to by calling it, modifies the value, and wraps it in a new <code>Decorator</code>.</p>

<p>The same way, we can add a function that sets the <code>b</code> property of our <code>MyStruct</code>:</p>

<pre><code class="language-golang">func (f Decorator) WithB(b int) Decorator {
	return func(m *MyStruct) *MyStruct {
		f(m).b = b
		return m
	}
}
</code></pre>

<p>By now you have probably started to guess that attaching decorators to each other will form a chain, which, when eventually executed, will unwrap itself in a reverse manner, each decorator applying its modifications to the passed <code>MyStruct</code> instance.</p>

<p>We are almost done, but how do we actually get our <code>MyStruct</code> instance out? We need some sort of a Go-style <code>constructor</code> function, right? Indeed, we do, but our <code>constructor</code> is a little different when we apply the <code>Builder</code> pattern. Instead of returning the <code>MyStruct</code> instance, it would rather create a simple no-op <code>Decorator</code> function, so we can attach other decorators to it:</p>

<pre><code class="language-golang">func NewMyStruct() Decorator {
	return func(m *MyStruct) *MyStruct {
		// This function really does nothing 
		return m
	}
}
</code></pre>

<p>The last part of our construct is the actual <code>Build</code> method. Its role is to create an empty <code>MyStruct</code> instance and pass it onto the decorator that it gets attached to:</p>

<pre><code class="language-golang">func (f Decorator) Build() *MyStruct {
	return f(&amp;MyStruct{})
}
</code></pre>

<p>Please, recall that since the chain of <code>Decorator</code> functions gets unwrapped in a reverse fashion, even though <code>Build</code> is the last method to be called, it is actually the one that starts the unwrapping of the chain.</p>

<p>Finally, let&rsquo;s see how we can use our <code>Builder</code>:</p>

<pre><code class="language-golang">instance := NewMyType().
		WithA(42).
		WithB(123).
		Build()

// at this point, `instance` is fully configured and ready for use
</code></pre>

<p>You can see the entire example in action <a href="https://play.golang.org/p/kmDh_oD-8qu">here</a></p>

<p>I hope you liked my little take on Go-style functional programming, applied to the Builder pattern. Feel free to share your feedback.</p>

<p>Happy coding!</p>
]]></content>
        </item>
        
        <item>
            <title>Sofia&#39;s Trams</title>
            <link>https://preslav.me/2019/06/23/sofia-s-trams/</link>
            <pubDate>Sun, 23 Jun 2019 21:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/06/23/sofia-s-trams/</guid>
            <description>It has been almost a decade, since I last set foot in the city center of Bulgaria’s capital, Sofia. Although I fly home regularly, Sofia’s Airport is just an intermediary stop on my ultimate route to my hometown.
This time was different. My wife and I flew for the wedding of one of our best friends, and since we had a whole day to spare, we decided to take a walk through the centre of the City of Trams.</description>
            <content type="html"><![CDATA[<p>It has been almost a decade, since I last set foot in the city center of Bulgaria’s capital, Sofia. Although I fly home regularly, Sofia’s Airport is just an intermediary stop on my ultimate route to my hometown.</p>

<p>This time was different. My wife and I flew for the wedding of one of our best friends, and since we had a whole day to spare, we decided to take a walk through the centre of the <em>City of Trams</em>.</p>

<p><img src="/images/2019/06/Sofia Tram 1.jpeg" alt="" /></p>

<p>For those who have never been in Sofia, trams are a major form of transportation here, the first line having been established back in 1901. Although Sofia citizens enjoy a modern (and surprisingly clean) subway, trams have long been one of the things that people usually associate the city&rsquo;s center with.</p>

<p><img src="/images/2019/06/Sofia Tram 2.jpeg" alt="" /></p>

<p><img src="/images/2019/06/Sofia Tram 3.jpeg" alt="" /></p>

<p><img src="/images/2019/06/Sofia Tram 6.jpeg" alt="" /></p>

<hr />

<p>Read more about the history of tram transportation in Sofia:</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://upload.wikimedia.org/wikipedia/commons/e/ee/Tatra_T6A5_Sofia.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://en.wikipedia.org/wiki/Trams_in_Sofia">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Trams in Sofia - Wikipedia</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Tram Tatra T6A5 on line 22</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://en.wikipedia.org/wiki/Trams_in_Sofia">https://en.wikipedia.org | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Introducing NoEmbed</title>
            <link>https://preslav.me/2019/06/20/introducing-noembed/</link>
            <pubDate>Thu, 20 Jun 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/06/20/introducing-noembed/</guid>
            <description>@media (max-width: 640px) { .embed-image { min-width: 100%; } }   NoEmbed: Create rich URL embeds, even when sites don&amp;#39;t support oEmbed.  NoEmbed uses performant and state-of-the-art technology to extract website information and present it in a format easy to embed and share https://noembed.preslav.me |  Created with NoEmbed    A picture is worth a thousand words. Everyone knows that. How about, a preview is worth a thousand links, however?</description>
            <content type="html"><![CDATA[






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://images.unsplash.com/uploads/141103282695035fa1380/95cdfeef?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=80); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://noembed.preslav.me">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        NoEmbed: Create rich URL embeds, even when sites don&#39;t support oEmbed.</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      NoEmbed uses performant and state-of-the-art technology to extract website information and present it in a format easy to embed and share</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://noembed.preslav.me">https://noembed.preslav.me | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<hr />

<p>A picture is worth a thousand words. Everyone knows that. How about, <em>a preview is worth a thousand links</em>, however? If you have ever written a <a href="https://medium.com/">Medium</a> article, more than certainly, you have tried adding links to videos or other Web pages. One of the cool features that distinguished Medium early on, were its really nice link previews. Simply, dropping a link will turn it into a block of information containing a title, an image, and an informative description:</p>

<p><img src="/images/2019/06/noembed.gif" alt="" /></p>

<p>In fact, if you keep looking around, you will find quite a few other apps adopting the same idea. <a href="https://slack.com">Slack</a> and <a href="https://www.notion.so/">Notion</a> are good examples that come to mind. Such previews are great, because unlike plain links, they deliver much more context, and therefore, help increase visitor engagement.</p>

<p>I wanted to provide similar link previews to my personal website, but what I found right away was how poorly adopted <a href="https://oembed.com/">oEmbed</a> is out in the world. I will discuss <a href="https://oembed.com/">oEmbed</a> in detail in a further post, but basically, it is a Web format allowing website owners to expose structured information for every particular link in that website. A good example is YouTube. If you check out the <a href="http://www.youtube.com/oembed?url=http%3A//youtube.com/watch%3Fv%3DM3r2XDceM6A&amp;format=json">following link</a>, you will get a JSON object will all the information about the video in the URL parameter. This info is ready to be rendered as a preview in a site or an app that consumes it.</p>

<p>The problems with oEmbed are apparent right away. In order for you to use it, the order side must have adopted it, and exposed an API endpoint for you to obtain metadata. Even if you built a proxy service that wrapped all the known oEmbed providers on the Web, you are essentially limited to the number of those providers. What about the rest of the Web?</p>

<p>Those were the thoughts that made me start working on what I called <a href="https://noembed.preslav.me/">NoEmbed</a>. It solves the problem with the limited number of oEmbed providers by employing smart content extraction characteristics where needed. By using an officially provided list of well-known oEmbed providers, the service proxies to them when possible. Most of the time, however, <a href="https://noembed.preslav.me/">NoEmbed</a> grabs the content of the requested URL, extracts valuable information out of it (title, excerpt, main image, etc) and returns an oEmbed-compatible response, so it can be integrated by any other services that already use oEmbed in some form or fashion.</p>

<p>I built <a href="https://noembed.preslav.me/">NoEmbed</a> in my spare time writing 100% Go code. It is still crude and unfinished, but already working, and with your help and feedback, I might be able to turn it into a real service.</p>

<h1 id="faq">FAQ</h1>

<h2 id="aren-t-there-other-services-doing-this-already">Aren&rsquo;t there other services doing this already?</h2>

<p>Of course, there are. <a href="https://embed.ly/">Embed.ly</a> is a great example (used by Medium). Other notable examples are <a href="https://iframely.com/">Iframely</a>, <a href="https://microlink.io/">microlink.io</a>, and <a href="https://embed.rocks/try">Embed.rocks</a>. All of them are great services, of course, but I wanted to one first and foremost for myself; one that is lean and fast and also respects the privacy of its users.</p>

<h2 id="what-s-with-the-name">What&rsquo;s with the name?</h2>

<p>This is just a temporary name. NoEmbed is actually the name of a <a href="https://noembed.com/">famous oEmbed proxy</a>, which I wanted to use in the very begging. Yet, the small number of available oEmbed provides was a crucial factor that led me not to.</p>

<p>That said, the name will most probably change, and I am open to hear your suggestions.</p>

<h2 id="what-is-the-tech-stack">What is the tech stack?</h2>

<p>Pretty boring, actually. Nothing super fancy. At the moment, we are talking about a single tailor-made Web/API service written in pure Go, sitting behind nginx (doing the load-balancing and some heavy caching).</p>

<h2 id="who-is-using-it">Who is using it?</h2>

<p>At the moment, the primary integrator of NoEmbed is the site you are reading at the moment. The embed that you saw at the beginning of this page, was generated with it.</p>

<h2 id="are-you-planning-on-turning-this-into-an-actual-product">Are you planning on turning this into an actual product?</h2>

<p>If you think you are ready to pay me for it, absolutely! If you already have a matching use case, do let me know, or sign up right away. I am planning to release a future update, which will allow consumers to use the API using secure tokens and authentication.</p>
]]></content>
        </item>
        
        <item>
            <title>[Quote] What Do I Know?</title>
            <link>https://preslav.me/2019/06/11/quote-what-do-i-know/</link>
            <pubDate>Tue, 11 Jun 2019 10:12:58 +0100</pubDate>
            
            <guid>https://preslav.me/2019/06/11/quote-what-do-i-know/</guid>
            <description>I happen to know and have worked together with Dom. A really inspiring person, and one, whose opinions I often share. Particularly, this one on writing and sharing your knowdledge with the world:
 Don’t question whether something is advanced enough to share it. Don’t worry if that knowledge already exists on the internet. The only question you need to ask yourself is this:
What do I know?
 @media (max-width: 640px) { .</description>
            <content type="html"><![CDATA[<p>I happen to know and have worked together with <a href="https://islovely.co">Dom</a>. A really inspiring person, and one, whose opinions I often share. Particularly, this one on writing and sharing your knowdledge with the world:</p>

<blockquote>
<p>Don’t question whether something is advanced enough to share it. Don’t worry if that knowledge already exists on the internet. The only question you need to ask yourself is this:</p>

<p><strong><em>What do I know?</em></strong></p>
</blockquote>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  

  <div class="embed-image"
    style="flex: 1 1 0%; background: rgba(0, 0, 0, 0) linear-gradient(#eaeaea 0%, #73747b 100%) repeat scroll 0% 0%; min-height: 120px;">
  </div>

  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://islovely.co/posts/what-do-i-know/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        What do I know?</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      I recently started an email newsletter helping people improve their English. I manage the content and list on ConvertKit (👈 affiliate link), which is a fantastic tool. Their motto is highly motivating: “teach everything you know”.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://islovely.co/posts/what-do-i-know/">https://islovely.co | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Busting the Myth Around Multithreading in Python</title>
            <link>https://preslav.me/2019/06/03/busting-the-myth-around-multithreading-in-python/</link>
            <pubDate>Mon, 03 Jun 2019 05:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/06/03/busting-the-myth-around-multithreading-in-python/</guid>
            <description>One of the things I often hear from other developers, along with the usual “Python is slow”, is that “multithreading in Python sucks”. The sad reality is that I hear those from Python developers too. While I will pretend I have not heard the former accusation (hoping you’ve already heard how well Python integrates with C), I will try to bring up some light on the latter.
When I ask the same guys about why they think that multithreading in Python sucks, some of them mention the GIL (Global Interpreter Lock) as the root cause.</description>
            <content type="html"><![CDATA[

<p>One of the things I often hear from other developers, along with the usual <em>“Python is slow”</em>, is that <em>“multithreading in Python sucks”</em>. The sad reality is that I hear those from Python developers too. While I will pretend I have not heard the former accusation (hoping you’ve already heard how well Python integrates with C), I will try to bring up some light on the latter.</p>

<p>When I ask the same guys about why they think that multithreading in Python sucks, some of them mention the GIL (Global Interpreter Lock) as the root cause. <em>The GIL</em>, they say, <em>prevents you from running more than one thread a time</em>.</p>

<h1 id="tl-dr">TL;DR</h1>

<p>Threads in python are perfect for issuing long-running I/O operations, such as database or remote API calls, file operations, etc. Where they show pretty miserable performance is heavy CPU operations (e.g. nested loops, recursion, etc)</p>

<p>If there is one thing you should remember from this whole article, it is that <strong>multithreading is perfectly fine in Python</strong>, as it is all other languages that make use of it. Yes, there are <strong>some caveats</strong> that you need to keep an eye on, but you should not be afraid to use just because someone told you so. Depending on the implementation of Python you are using, there <strong>might be no GIL in place</strong>, so you might be using your development life harder by not using threads.</p>

<p>OK? Good. Let me start with:</p>

<h1 id="what-is-the-gil-anyway">What is the GIL anyway?</h1>

<p>The Global Interpreter Lock (GIL) is a feature (yes, actually a feature) of CPython (the default Python implementation) which is highly related to how CPython manages memory. There are two popular ways for garbage collection in software applications: tracing garbage collection (also known simply as garbage collection) and reference counting. CPython uses reference counting, which is a simple and deterministic way of managing memory. Every time one acquires a reference to a variable, a reference counter gets automatically incremented. Every time a variable gets out of scope, the reference counter gets automatically decremented. When the reference counter reaches 0, the referred to memory gets disposed.</p>

<h1 id="gil-and-multithreading">GIL and multithreading</h1>

<p>Sounds nice and easy, and it is for the most part. Which is, until multithreading comes in place. See, if two threads access the same reference at the same time, a few things might happen. Decrement in and incrementing the reference count take some technological time. It&rsquo;s not much, but it also doesn&rsquo;t happen instantaneously. Imagine that one thread finishes execution and the decrement process has just begun. Another thread enters right in the middle of this and tries to obtain a reference to the same portion of memory. If the dereferencing finishes first, but the time the second thread obtains a reference, the associated memory might have been disposed of, which will result in SEGFAULT.</p>

<p>It might also be the case that two or more threads try to increment the reference counter in parallel. This opens up a possibility for overwriting the counter with the lower value, unaware that it has already been incremented. The referenced memory will never be disposed of, which is a classical memory leak.</p>

<h1 id="here-comes-the-gil-again">Here comes the GIL again</h1>

<p>And this is why we have the GIL. Locking on every reference counter operation is too cumbersome, and certainly, introduce performance drawbacks. Therefore, the GIL is a single, globally-shared instance that can be obtained by one <strong>RUNNING</strong> thread at a time, and released afterward.</p>

<h1 id="so-one-running-thread-at-a-time">So, one RUNNING thread at a time</h1>

<p>Keep in mind the word RUNNING. I am writing it in capitals, in order to distinguish between a thread’s RUNNING and WAITING states. When a thread issues a long-running I/O operation, such as a database call, it switches from a RUNNING to a WAITING state and drops the lock on the GIL. Since no further operations will be executed in that thread during the WAITING state, none of the scenarios mentioned above can happen, so another thread can grab the GIL and continue. When a thread gets out of the WAITING state back to RUNNING, it obtains a lock on the GIL again and performs a quick refresh on the reference counters of its claimed state.</p>

<p>Ideally, if the code executed in thread consists of only a blocking call (DB, remote API, disk, etc), it is a perfect candidate for concurrent execution. When the code starts getting more complex, and CPU-heavy operations get computed, performance starts dropping to the rate of serial execution, or even worse (due to the GIL lock overhead). This is where <strong>multiprocessing</strong> comes to the rescue. Though processes are limited by the number of available CPU cores, they share no memory, and consequently, there is no need for a GIL. If a heavy operation involves polling multiple I/O sources for data, before assembling a formatted result together, you’d rather do the I/O operations in separate threads, and if needed, the final transformations in separate processes.</p>

<h1 id="not-all-python-implementations-need-a-gil">Not all Python implementations need a GIL</h1>

<p>When we speak about the GIL, it is important to make certain that it is present in CPython, but not all Python implementations have it or need it. Since the vast majority of Python developers use CPython, the GIL is a relevant topic, but one should not forget there are other language implementations that don’t use it.</p>

<p>Note: Unlike popular belief, <a href="https://www.pypy.org/">PyPy</a> (the Python JIT-compiler) **<a href="http://doc.pypy.org/en/latest/faq.html#does-pypy-have-a-gil-why">actually** <strong>has a GIL</strong></a>, although it uses tracing garbage collection, instead of reference counting. This has been more of a design decision to stick to the original design of the language, rather than an actual technological need, There are other implementations, however, such as <a href="https://www.jython.org/jythonbook/en/1.0/Concurrency.html#no-global-interpreter-lock">Jython</a>, and <a href="https://wiki.python.org/moin/IronPython">IronPython</a> which lack the GIL altogether.</p>
]]></content>
        </item>
        
        <item>
            <title>Sixtus Half-Marathon (Schliersee) 2019</title>
            <link>https://preslav.me/2019/05/17/sixtus-half-marthon-schliersee-2019/</link>
            <pubDate>Fri, 17 May 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/05/17/sixtus-half-marthon-schliersee-2019/</guid>
            <description>Today, I took part in the Sixtus Half-Marathon near lake Schliersee for the third time in a row. Unlike last year, this time I started with a completely different strategy - keep it cool and let everyone else pass by me during the first third of the race. Seeing everyone else&amp;rsquo;s backs can be demotivating and requires a lot of patience and training.
   After the first 5-6K, having realized that I was really the last of the HM group, I started slowly picking up the pace.</description>
            <content type="html"><![CDATA[<p>Today, I took part in the <a href="https://www.schliersee-lauf.de/">Sixtus Half-Marathon</a> near lake Schliersee for the third time in a row. Unlike last year, this time I started with a completely different strategy - keep it cool and let everyone else pass by me during the first third of the race. Seeing everyone else&rsquo;s backs can be demotivating and requires a lot of patience and training.</p>

<iframe height='405' width='590' frameborder='0' allowtransparency='true' scrolling='no' src='https://www.strava.com/activities/2377361336/embed/d4e9d70791307ab432f548dc622a1186e7793c3d'></iframe>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/D5XpvzbFD_E" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>After the first 5-6K, having realized that I was really the last of the HM group, I started slowly picking up the pace. In no time, I started nearing the end of the group, and one by one, the people who went ahead at the start, were now looking at my back.</p>

<p>Although, I did not beat my PR of two years ago, I managed to beat my previous time on this course by 2 mins, and with a much better physical and mental condition at the end. i can say with a certainty that this was the first HM where I was not ready to give up everything at the 18th km, but clearly knew that I would finish the race. My strategy (start slowly, pick up later) has worked!</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/b3ceLWAPA7U" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>I want to thank my wife, and my best friends for the support, and for running along during a part of the race. You, guys are the best!!!</p>
]]></content>
        </item>
        
        <item>
            <title>Tech monopolies tend not to fall like Rome. They fall like Venice.</title>
            <link>https://preslav.me/2019/05/11/quote-tech-monopolies-tend-not-to-fall-like-rome/</link>
            <pubDate>Sat, 11 May 2019 05:36:25 +0000</pubDate>
            
            <guid>https://preslav.me/2019/05/11/quote-tech-monopolies-tend-not-to-fall-like-rome/</guid>
            <description>Tech monopolies tend not to fall like Rome. They fall like Venice. They’re still there, and no-one actually invades them, but the trade routes moved, the things that gave them power and wealth stop mattering, and they become just another city, and then a backwater.</description>
            <content type="html"><![CDATA[<p>Today, I caught this nice series of tweets by <a href="https://twitter.com/benedictevans">@benedictevans</a> on the rise and demise of tech giants. Unlike smaller companies, those do not die abruptly, or in a direct fight with the competition. Instead, they get sidelined by smarter and more innovative upstarts.</p>

<p>The series starts with:</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Tech monopolies tend not to fall like Rome. They fall like Venice. They’re still there, and no-one actually invades them, but the trade routes moved, the things that gave them power and wealth stop mattering, and they become just another city, and then a backwater.</p>&mdash; Benedict Evans (@benedictevans) <a href="https://twitter.com/benedictevans/status/1127280727475679232?ref_src=twsrc%5Etfw">May 11, 2019</a></blockquote>


<p>then it continues:</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Microsoft didn’t take IBM’s mainframe business, and Apple and Google didn’t take Microsoft’s businesses in PC operating systems or spreadsheets. And those businesses have a long half life, but they stopped being the means for dominance. No-one is scared of IBM or Microsoft today.</p>&mdash; Benedict Evans (@benedictevans) <a href="https://twitter.com/benedictevans/status/1127283553639604224?ref_src=twsrc%5Etfw">May 11, 2019</a></blockquote>


<p>I compiled the entire series into a <a href="https://threader.app/thread/1127280727475679232">single post</a> - for your (and mine) reading pleasure:</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://s3.amazonaws.com/bucketmany/threadercovers/YD3VRVHrmY6Np3o4qPoQBIM-bPzO5t1wz_nxAU8XdnSi3AfgpwBmQHY58nqV.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://threader.app/thread/1127280727475679232">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        A thread written by @benedictevans</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Tech monopolies tend not to fall like Rome. They fall like Venice. They’re still there, and no-one actually invades them, but the trade routes moved, the things that gave them power and wealth stop mattering, and they become just another city, and then a backwater.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://threader.app/thread/1127280727475679232">https://threader.app | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>My Reasons to Consider Go Coming from Java</title>
            <link>https://preslav.me/2019/05/07/my-reasons-to-consider-go-coming-from-java/</link>
            <pubDate>Tue, 07 May 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/05/07/my-reasons-to-consider-go-coming-from-java/</guid>
            <description>I hate listicles, and I am highly hoping that this doesn’t become one of them. Yet, I somehow felt the need to write down the reasons why I am giving Go a second (or maybe, third 🤔) chance. To the Java developers out there, searching for a new weapon of choice, I am hoping that this will give you a bit of perspective. This is not a description of Go-specific features.</description>
            <content type="html"><![CDATA[

<p>I hate listicles, and I am highly hoping that this doesn’t become one of them. Yet, I somehow felt the need to write down the reasons why I am giving Go a second (or maybe, third 🤔) chance. To the Java developers out there, searching for a new weapon of choice, I am hoping that this will give you a bit of perspective. This is not a description of Go-specific features. For those, readers can find plenty of information online.</p>

<h1 id="go-focuses-on-less-is-more">Go focuses on “less is more&rdquo;</h1>

<p>The first time I saw a relatively simple Go program, my internal reaction was “Why all the torture?”. Somehow, things I used to solve with a Python or even a Java one-liner, look ginormously over-bloated in Go. At least, on the surface. Searching for an answer, I found this talk by Rob Pike, which helped put things in some order:</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/rFejpH_tAHM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p><a href="https://www.youtube.com/watch?v=rFejpH_tAHM">dotGo 2015 - Rob Pike - Simplicity is Complicated</a></p>

<p>The thing is, unlike other languages, Go has been left out of many “niceties” of modern programming, and this was an intentional decision. More features add a level of cognitive burden. Of course, they also add more productivity, but at the cost of a higher comprehension barrier. I remember the days before Java 8, and how excited I was to see lambdas and streams make it into the language. A lot of previously lengthy boilerplate code was about to get replaced by a more elegant and fluent approach. Suddenly, every problem I ran into, I tried to solve using those two alone. So much so, that I often ended up spending hours screwing the logic of my code, because suddenly, no other approach seemed elegant enough. And I was not alone in this - the rest of my team was doing it too. Not long after, some pieces of the code turned into crystal figures - beautiful at first sight, but very brittle and difficult to move around.</p>

<p>Some programming languages focus on developer satisfaction when writing, but miss on the long-term maintainability of the piece of software. Others, like Go, sacrifice the expressiveness, in favor of readability and easy comprehension.  I tend to over-engineer things (I believe you too, fellow Java engineers), so for me writing Go code feels a bit like therapy. By offering less, it teaches me to focus on getting the right things done, instead of getting stuck in the design phase, trying to make things “right”.</p>

<p>Don&rsquo;t trust much of what you read about Go online. It is a tough nut to crack. Be prepared for a change in how you write code, especially, if you switch from a more fluent language like Scala or Kotlin. If you are a fan of immutability as part of the language, you’re up for a change of thinking. As said before, nothing is impossible, it just takes time. Give it time and come back after a while. In my short history with Go, there have been some upsides, followed by a period of recapitulation, eventual comeback, and understanding why things are the way they are.</p>

<p>Remember:</p>

<blockquote>
<p>Verbosity is a feature. Simplicity is complicated</p>
</blockquote>

<h1 id="the-tooling-and-the-standard-library-are-outstanding">The tooling and the standard library are outstanding</h1>

<p>Despite being called an 80s language living in the 21st century, Go’s ecosystem has borrowed from many of the trends and best practices in software development nowadays. The setup process is nice and easy and brings in a myriad of tiny tools and utils that all fit in place right away. Formatting, package management, linting, module management (as of recent versions) are all things that one does not have to really think about. Those are really taken care of with the standard tooling.</p>

<p>Besides that, the Go standard library is one of the most complete Stdlibs I‘ve worked with so far, and understandably so. Go came out relatively recently, so a lot of the standards and practices in software had a chance to make it in the library right from the beginning, rather than get added years after. As a result, the Go standard library feels like something that a developer can actually use in their daily work, rather than something that always needs to get wrapped inside a third-party library.</p>

<p>That said, I don’t share the opinion of Go purists to use standard library only. There should be a balance, and although I am not a fan of <em>“npm install”</em>-ing everything, standard libraries are created to be building blocks, so don’t feel ashamed if you have to pull in some libraries to ease your work. There are some pretty <a href="https://github.com/avelino/awesome-go">good ones</a> out there.</p>

<h1 id="go-apps-are-fast-and-small">Go apps are fast and small</h1>

<p>We have all heard that, but the actual outcome blew my mind away!</p>

<p>I have spent the bulk of the past decade working with Spring, and it has gradually become my go-to solution for all things Web. Despite working with Flask on my current projects, Spring (Boot) will always remain near and dear to my heart.</p>

<p>Yet, Spring is a beast. You might not notice it, because the hardware has gotten quite cheap these days, but a lot of otherwise useful resources get locked up when running a hefty JVM app.</p>

<p>To see where Go stands on this, I rebuilt a not-so-smallish Spring Boot app of mine using Go. I did not even take the purist approach but was quite liberal in my choice of libraries. The results blew all of my previous expectations by a factor of ten. The Spring app took nearly half a GB right away, keeping around 5-10% of my MacBook Pro&rsquo;s CPU busy at all time (spiking when requests came in). For deploying a single artifact, I had built a fat JAR, which is quite a standard procedure for developing Java apps these days. It took a couple of hundred of MBs as well. Due to the JVM warmup and Spring&rsquo;s loading all dependencies, it took almost a minute until the app was ready.</p>

<p>For comparison, the Go app ran instantaneously (let&rsquo;s be fair, there was literally no component scanning and reflection involved). Even at the height of handling requests, the CPU barely reached 1% (mostly sitting around 0.1%). With all libraries and assets included, the final binary ended up being around 20MB. The RAM usage, however, I found to be a metric that changed everything. In an age where a typical messaging application might eat up to a couple of GBs, this app was sitting there minding its business, rocking a 20MB?!? footprint. 20MB? Even if following a very naive logic, this is close to fitting 20 of these apps together, for the cost of running one Spring Boot app!</p>

<p>Before the expert readers start criticizing, yes, none of this is really a fair comparison. The fact that an app is built in Go does not guarantee a blazing fast performance if there is a lot of runtime loading and checks. Also, experts can tweak a JVM app in various ways, significantly reducing the footprint of the app. It takes time and effort, but it is certainly doable. And of course, there is always the argument about cheap hardware and premature optimization.</p>

<p>I am not saying that this should necessarily resonate with you, but it certainly does with me. I strive to be a minimalist. Exactly because the hardware is so cheap these days, I believe that people and companies spend way more on it than they probably should. There are various articles out there speculating about the millions and hundreds of millions of dollars that big software companies pay for server costs every year. All of it to pay for servers that get powered by electricity generated from burning fossil fuels.</p>

<h1 id="the-community">The community</h1>

<p>The Go community is welcoming and very helpful. Part of the helpfulness factor comes from the fact that many gophers have already spent years programming in a different domain. What makes these people stick around and help each other, is the experience of the past, having taught them that complexity does not equal productivity.</p>

<h1 id="instead-of-conclusion">Instead of conclusion</h1>

<p>As people say in stock trading, “always do your own research”. I don’t want to convince you to switch and use Go full-time, because I haven’t convinced myself yet. As with everything else, programming languages are just tools, and there will always be a different tool which is better for the particular circumstances. What I hope to have managed to convince you, is to try to understand where the need for the language came from and what it tries to solve</p>

<p>As always, happy coding!</p>

<p>P.S. if you have an interesting project that you are considering using Go for, feel free to reach out to me. I’d love to help.</p>
]]></content>
        </item>
        
        <item>
            <title>Developer Tool Tip: DevDocs</title>
            <link>https://preslav.me/2019/05/03/dev-tip-devdocs/</link>
            <pubDate>Fri, 03 May 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/05/03/dev-tip-devdocs/</guid>
            <description>Here is a handy developer tool tip for today: DevDocs
As developers, we spend a large portion of our time, searching for the &amp;ldquo;name of the function abc that did thing xyz&amp;rdquo;. Not surprisingly, sites like StackOverflow have become so popular. Yet, SO answers are often full of additional information, and what we need most of the time is a simple search on top of the docs themselves. Years ago, I used a tool for macOS, called Dash.</description>
            <content type="html"><![CDATA[<p>Here is a handy developer tool tip for today: <a href="https://devdocs.io/">DevDocs</a></p>

<p>As developers, we spend a large portion of our time, searching for the <em>&ldquo;name of the function abc that did thing xyz&rdquo;</em>. Not surprisingly, sites like StackOverflow have become so popular. Yet, SO answers are often full of additional information, and what we need most of the time is a simple search on top of the docs themselves. Years ago, I used a tool for macOS, called <a href="https://kapeli.com/dash">Dash</a>. It was a good tool at the time, but eventually, I stopped using it, because it was accessing my (still spinning) HDD way too much at the time.</p>

<p>A couple of years ago, I discovered <a href="https://devdocs.io/">DevDocs</a>.</p>

<p><img src="https://user-images.githubusercontent.com/8784712/27121730-11676ba8-511b-11e7-8c01-00444ee8501a.png" alt="" /></p>

<p>image source: <a href="https://electronjs.org/apps/devdocs-app">electronjs.org</a></p>

<p>It is the same idea, but running on the Web (supports offline as well) and accessible from everywhere. It has been my primary go-to docs site for much of my non-library-specific stuff (programming language syntax, standard libraries, popular frameworks). The default selection of docsets is pretty satisfactory and there are many coming all the time. The real magic here is the search:</p>

<p><img src="/images/2019/05/2019-05-06 15-01-27.2019-05-06 15_02_36.gif" style="width: 320px !important" /></p>

<p>There are quite a few options for bringing DevDocs to your daily workflow. For instance, a <a href="https://marketplace.visualstudio.com/items?itemName=deibit.devdocs">VS Code plugin</a>, an <a href="https://github.com/yannickglt/alfred-devdocs">Alfred workflow</a>, a <a href="https://github.com/egoist/devdocs-app">desktop app</a>, etc.</p>
]]></content>
        </item>
        
        <item>
            <title>Deploying a Native Go Binary on Heroku</title>
            <link>https://preslav.me/2019/04/20/deploying-native-go-binary-on-heroku/</link>
            <pubDate>Sat, 20 Apr 2019 07:30:04 +0000</pubDate>
            
            <guid>https://preslav.me/2019/04/20/deploying-native-go-binary-on-heroku/</guid>
            <description>My company, KI labs recently held its first hackathon in our Munich office. My team and I went for a very cool mobile app idea that promotes healthy walking competitions among colleagues and friends. Though the app itself deserves a proper introduction, I will talk about it in a separate post. This time I will focus on one problem I experienced while working on the app&amp;rsquo;s backend part, written in Go.</description>
            <content type="html"><![CDATA[

<p>My company, <a href="https://www.ki-labs.com/">KI labs</a> recently held its first hackathon in our Munich office. My team and I  went for a very cool mobile app idea that promotes healthy walking competitions among colleagues and friends. Though the app itself deserves a proper introduction, I will talk about it in a separate post. This time I will focus on one problem I experienced while working on the app&rsquo;s backend part, written in Go.</p>

<p>The challenges with using the Go language aside, one unanticipated hurdle was actually getting the backend to run in Heroku. I know, I could have gone for a different solution, but my usual workflow is to deploy to Heroku, until the requirements push for an alternative approach. And Heroku already supports deploying Go applications. Or at least, that&rsquo;s what the <a href="https://www.heroku.com/go">documentation</a> says. And indeed, after the stress of the hackathon, I figured it out, but at the time, getting Heroku to build a Go application that uses modules seemed like it needed more time than we actually had.</p>

<p>Due to the limited time constraints, I decided to take a shortcut and use what has traditionally been one of the Go&rsquo;s strongest selling points - creating a static binary and running it natively inside a VM or a container. But Heroku can&rsquo;t run native apps directly, can it? Or at least, it won&rsquo;t allow you to run those directly.</p>

<h2 id="the-solution">The Solution</h2>

<p>The trick is to make the installer think that it is going to use a certain <a href="https://devcenter.heroku.com/articles/buildpacks">Buildpack</a>, but actually in your Procfile you override the control and execute a native binary directly.</p>

<p>Heroku uses certain triggers to initiate the start of an instance. For example, the presence of a <code>package.json</code> file (Node.js) or <code>pom.xml</code> / <code>build.gradle</code> (Java), <code>requirements.txt</code> / <code>setup.py</code> (Python), etc.</p>

<pre><code class="language-bash">GOOS=linux go build server.go
</code></pre>

<p>For our needs, we might as well hijack the <a href="https://github.com/heroku/heroku-buildpack-nodejs">Node.js Buildpack</a>. This is relatively simple. In order to trick Heroku, all we need is a <code>package.json</code> file, which lists a few basic properties needed for the Buildpack initialization:</p>

<pre><code class="language-json">{ &quot;name&quot;: &quot;appname&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;dependencies&quot;: {} }
</code></pre>

<p>With the <code>package.json</code> file in place, we need a simple <code>Procfile</code>, which will tell Heroku what to execute once the Buildpack initialization has finiehsed. In our case, this will be the already compiled Go executable:</p>

<pre><code class="language-yaml">web: ./main $PORT
</code></pre>

<p>A minor disadvantage of this approach is that we need to check the compiled binary into our git repository. I would do this on a separate branch, which I would try not to merge back to master and delete as soon as no longer necessary. By default, Heroku would use the <code>master</code> branch when buiding an application, so we need to be assertive when pushing our special deployment branch:</p>

<pre><code class="language-bash">git push heroku my-deployment-branch:master
# tell Heroku to use my deployment branch as its `master`
</code></pre>

<p>That&rsquo;s it! If fyour application is built using a technology that Heroku might not be actively supporting, or you are in for an extra performance boost (e.g. using Swift, Rust, C, etc) this tip might help you.</p>

<h1 id="related-resources">Related Resources</h1>

<ul>
<li><a href="http://blog.jan-ahrens.eu/2014/06/17/heroku-with-c.html">Heroku with C</a></li>
<li><a href="https://github.com/heroku/heroku-buildpack-go">heroku/heroku-buildpack-go: Heroku Go Buildpack</a></li>
<li><a href="https://github.com/heroku/go-getting-started">heroku/go-getting-started: Getting Started with Go on Heroku https://devcenter.heroku.com/articles/getting-started-with-go</a></li>
<li><a href="https://devcenter.heroku.com/articles/go-support">Heroku Go Support | Heroku Dev Center</a></li>
<li><a href="https://www.heroku.com/go">Deploy, manage, scale Go apps in the cloud | Heroku</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Give Me Back My Monolith</title>
            <link>https://preslav.me/2019/03/23/give-me-back-my-monolith/</link>
            <pubDate>Sat, 23 Mar 2019 05:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/03/23/give-me-back-my-monolith/</guid>
            <description>@media (max-width: 640px) { .embed-image { min-width: 100%; } }   Give me back my monolith  It feels like we’re starting to pass the peak of the hype cycle of microservices. It’s no longer multiple times a week we now see a blog … http://www.craigkerstiens.com |  Created with NoEmbed    Give Me Back My Monolith by Craig Kerstiens is something I have been ranting about for quite some time.</description>
            <content type="html"><![CDATA[




<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  

  <div class="embed-image"
    style="flex: 1 1 0%; background: rgba(0, 0, 0, 0) linear-gradient(#eaeaea 0%, #73747b 100%) repeat scroll 0% 0%; min-height: 120px;">
  </div>

  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Give me back my monolith</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      It feels like we’re starting to pass the peak of the hype cycle of microservices. It’s no longer multiple times a week we now see a blog …</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/">http://www.craigkerstiens.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<p><p><a href="http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/">Give Me Back My Monolith</a> by Craig Kerstiens is something I have been ranting about for quite some time. It is thus good to see <a href="http://www.craigkerstiens.com">other people</a> standing on the same side of the bridge:</p><blockquote>As we ventured into micro-services onboarding time skyrocketed. Yes, we have docker and orchestration such as K8s these days to help, but the time from start to up and running a K8s cluster just to onboard a new engineer is orders of magnitude larger than we saw a few years ago. For many junior engineers this is a burden that really is unnecessary complexity.</blockquote><p>What most programmers forget is that a) <a href="https://en.wikipedia.org/wiki/Cargo_cult_programming">cargo-culting</a> is a thing, and b) micro-services are just a tool like anything else. I have fallen into this trap myself quite a few times myself. Just like you won&rsquo;t use Objective-C for Web development or embed an Oracle database inside your mobile app, <em>you don&rsquo;t have to use micro-services in every project you are working on</em>. You can, but in 90% of the cases, you won&rsquo;t need to. As with most things in life, a micro-service (or macro) architecture is something you reach out of necessity. Unless requirements force you right off the bat, focus on building your product as a single, unified core instead.</p><p><strong>Remember:</strong> A micro-service architecture shifts the complexity form the code to the infrastructure, Or, as I used to say: <em>&ldquo;Before micro-services, I chased domain problems, now I am mostly chasing Kubernetes issues, in order to get to the domain problems&rdquo;</em></p><p><a href="http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/">Give Me Back My Monolith</a> was also featured in the latest of the <a href="https://pythonbytes.fm">Python Bytes</a> podcast:</p><audio controls src="https://pythonbytes.fm/episodes/download/122/give-me-back-my-monolith.mp3"></audio><p></p><ul><li><a href="http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/">Give Me Back My Monolith</a></li><li><a href="https://pythonbytes.fm/episodes/show/122/give-me-back-my-monolith">Episode #122: Give Me Back My Monolith | Python Bytes Podcast</a></li></ul></p>
]]></content>
        </item>
        
        <item>
            <title>Using Ephemeral Docker Containers as CLI Applications</title>
            <link>https://preslav.me/2019/03/18/using-ephemeral-docker-containers-as-cli-applications/</link>
            <pubDate>Mon, 18 Mar 2019 06:30:04 +0000</pubDate>
            
            <guid>https://preslav.me/2019/03/18/using-ephemeral-docker-containers-as-cli-applications/</guid>
            <description>Docker containers have proven themselves extremely useful in allowing developers to sandbox environments and ease the deployment of services. Have a complicated service setup? No worries. Simply, describe the steps in a Dockerfile and you should be able to replicate the process on every host OS that has Docker support.
When I said services, I bet that the first thing you thought about was HTTP servers, or some sort of persistent, always running processes that send or accept requests to such services.</description>
            <content type="html"><![CDATA[

<p>Docker containers have proven themselves extremely useful in allowing developers to sandbox environments and ease the deployment of services. Have a complicated service setup? No worries. Simply, describe the steps in a <code>Dockerfile</code> and you should be able to replicate the process on every host OS that has Docker support.</p>

<p>When I said services, I bet that the first thing you thought about was HTTP servers, or some sort of persistent, always running processes that send or accept requests to such services. While the majority of Docker use cases fit exactly into this scenario, the realm of possible applications it offers, far exceeds that.</p>

<p>One such application is the use of Docker containers to sandbox the complex inner workings of a command-line (CLI) application. Most data projects involve the running of scheduled scripts which access remote services, do data processing and eventually, write the results either to disk, or to dedicated data storage. Such scripts have required dependencies, and often, the dependencies of one may collide with the ones required by another, which ends up in a big mess. This is the primary reason, why things like virtual environments in Python or Node.js&rsquo; notorious <code>node_modules</code> folder exist in the first place. Yet, we all know one or two about <code>node_modules</code>&hellip;</p>

<p><a href="https://hackernoon.com/circleci-performance-difference-between-cache-and-workspace-5567679c3601"><img src="https://proxy.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn-images-1.medium.com%2Fmax%2F1600%2F0*i5S2tUk0CQBh1Euc.&amp;f=1" alt="" /></a></p>

<p>The ideal case for such applications would be statically-bound executable files containing everything needed, and running into their own dedicated processes. One such approach is championed by languages like Go, Swift, and Kotlin&rsquo;s Native option (and of course, good old C/C++). Others, like Java (fat Jars) and Python (wheels) offer a somewhat reasonable compromise by putting the code and every dependency into a single deployable artifact. I call this a compromise, because it still requires the presence of either JDK or a Python runtime on the host OS.</p>

<p>The majority of the time however, we won&rsquo;t have the opportunity to deploy everything into a single executable. Much of the time, we also won&rsquo;t have the freedom to install different runtimes globally. In such cases, baking a CLI application together with all of its dependencies into a dedicated Docker image can be a good option. Let&rsquo;s try a simple example:</p>

<h2 id="an-example">An Example</h2>

<p>Here is a simple Python script, which will fetch the current price of Bitcoin, and convert it to a desired fiat currency of our choice (&ldquo;USD&rdquo;, &ldquo;EUR&rdquo;).</p>

<pre><code class="language-python">import argparse
import requests

def fetch(currency):
    price = requests.get(&quot;https://api.coindesk.com/v1/bpi/currentprice.json&quot;).json()[&quot;bpi&quot;][currency][&quot;rate_float&quot;]

    print(price)

parser = argparse.ArgumentParser(description=&quot;My Fancy CLI&quot;)
parser.add_argument(
    '--currency',
    help='Choose currency to convert to',
)
args = parser.parse_args()

if __name__ == &quot;__main__&quot;:
    print(args)
    if args.currency:
        fetch(args.currency)
    else:
        parser.print_help()
</code></pre>

<p>There are two things to keep a note on, in this example. First, is the use of <code>requests</code>, a popular HTTP request/response library, but not a part of the Python standard library, so it has to be installed separately. Second, is the use of command-line arguments, namely <code>--currency</code>.</p>

<p>Next, is the <code>Dockerfile</code>:</p>

<pre><code class="language-Dockerfile">FROM python:3.7
RUN pip install requests
COPY script.py .
ENTRYPOINT [&quot;python&quot;, &quot;script.py&quot;]
</code></pre>

<p>Again, very simple. In light of keeping the example simple, we will install <code>requests</code> right in the <code>Dockerfile</code> and using a <code>requirements.txt</code> file or some kind of a setup script, which are the common practice.</p>

<p>Let&rsquo;s build the image, assuming that both files are in our current directory:</p>

<pre><code class="language-bash">docker build -t my-command .
</code></pre>

<p>Great, now we can grab our newly baked image and run it:</p>

<pre><code class="language-bash">docker run --rm -it my-command --currency USD
</code></pre>

<p>The <code>--rm</code> option will remove the container immediately after the command has been executed. If you have ever ran <code>docker ps -a</code>, you would know that inactive containers do not get deleted immediately, but are left for a possible later restart. Assuming that we would like to run our command multiple times per day, this will result in lots of wasted resources.</p>

<p>The other interesting option is <code>-i</code>. This one, combined with the fact that we chose <code>ENTRYPOINT</code> instead of <code>CMD</code> for our starting point in the <code>Dockerfile</code> would allow us to pass the <code>--currency</code> argument at the very end. There are a few subtle differences between <code>ENTRYPOINT</code> and <code>CMD</code> but the very basic is the ability to adapt <code>ENTRYPOINT</code>, while <code>CMD</code> is more or less final.</p>

<p>You can, of course, create an alias fo your command to make the execution easier:</p>

<pre><code class="language-bash">alias my-cmd=&quot;docker run --rm -i my-command&quot;

my-cmd --currency USD
</code></pre>

<p>That&rsquo;s it! Now you can ahead and run your application as a scheduled cron task and e.g. accrue data over time:</p>

<pre><code class="language-bash">*/10 * * * * user ./my-cmd --currency USD &gt;&gt; prices.csv
</code></pre>

<h2 id="limitations">Limitations</h2>

<p>Once again, the solution is far from the ease of a drag-and-drop that Go executables allow. Also, it assumes a working Docker setup (less and less of an issue nowadays), and quite a bit of space, because of the images. It also, for the most part, requires building the image locally, or at least, pulling the ingredients from an image registry. Docker allows for an option to save an image with all of its dependencies and load it on a remote host OS. Think of it as a sort of fat-Jar. I tried it just for the sake of demonstration, but it seems very impractical, as it resulted in an enormous zip file for that tiny Python script (of course, it bakes a whole Linux bistro inside):</p>

<pre><code class="language-bash">docker save -o my-command.zip my-command
</code></pre>

<pre><code class="language-bash">rw------- 1 user user 920M Mar 17 08:47 my-command.zip
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Introducing DevNotes</title>
            <link>https://preslav.me/2019/03/09/introducing-devnotes/</link>
            <pubDate>Sat, 09 Mar 2019 23:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/03/09/introducing-devnotes/</guid>
            <description>With a few short micro-post exceptions, my blog has been relatively quiet over the past month. The reason for this is simple. I have devoted much of my writing resources of the past weeks into a new site. A wiki called DevNotes.
That is right, I have started a separate writing project, parallel to my blog. Yet, before you start thinking that this is the end of the blog, don&#39;t worry.</description>
            <content type="html"><![CDATA[<p>With a few short micro-post exceptions, my blog has been relatively quiet over the past month. The reason for this is simple. I have devoted much of my writing resources of the past weeks into a new site. A wiki called <a href="https://devnotes.space/">DevNotes</a>.</p><p>That is right, I have started a separate writing project, parallel to my blog. Yet, before you start thinking that this is the end of the blog, don't worry. <strong>This is just the beginning</strong>. In fact, a big motivator for starting the second site in the first place was being able to collect more thoughts and ideas for further blog posts.</p><p>I will explain my reasons and thoughts in the following paragraphs, but without further ado, I wanted to introduce <a href="https://devnotes.space/">DevNotes</a> to you. 🎉</p><h2 id="so-why-yet-another-site">So, why yet another site?</h2><p>The reason is simple. I needed a format for collecting knowledge, which would allow me to gradually build things up, without having to wrap and release everything as a post every time. This is the main benefit that a wiki offers. A wiki evolves a topic gradually, sometimes, a single character at a time.</p><p>A wiki is a journey and not a destination. It has no beginning and no defined ending. A wiki gets constantly updated and its pages are not frozen in time. A wiki is therefore not something a reader can comprehend in a linear fashion, but rather, a collection of reference nature. One does not read a wiki, one stumbles upon a wiki when searching for information.</p><p>A blog is slightly different. A blog has a timeline, and its posts are complete snapshots of the author's thoughts on a certain topic, at a certain moment in time. Once written, blog posts themselves seldom undergo changes. If updates are necessary, a new blog post gets written, or a whole series of posts gets created, to expand on the topic. In a way, blog posts are destinations.</p><p>One problem with destinations is that it takes time to reach them. Another problem is figuring out if you have reached a destination or not. Ironically, often, the only way to know if you have reached a destination is reaching it first and reflecting upon this fact in retrospect.</p><p>Where am I going with this? I want to see this blog evolve and deliver knowledgeable content to my readership. Yet, first and foremost, I want to learn. I have said it many times, and it is worth repeating that I am my blog's primary user. If I need some information, I'd first search it on my blog, and if I can't find it, I'd make sure to write about it, so I can have a cache for the next time I need it. This is where the wiki really helps. It will allow me to work on a topic without having to put it in a dedicated blog post, until I have enough information to make the post well-rounded enough. This is especially helpful to my limited time schedule, because having the wiki, I can keep making sure that my knowledge is available online as soon as I obtain it, without having to write a dedicated blog post until I am ready.</p><p>I am expecting to see a lot of convergence between the blog and the wiki in the coming future.</p>
]]></content>
        </item>
        
        <item>
            <title>My Baby Steps with Go</title>
            <link>https://preslav.me/2019/02/20/my-baby-steps-with-go/</link>
            <pubDate>Wed, 20 Feb 2019 05:27:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/02/20/my-baby-steps-with-go/</guid>
            <description>Last week, I made my first tentative foray into Go programming. My company uses Go in a couple of projects, but although I have heard many positive things about the language, so far I have tried to stay away from it. The mere thought that Go is a 21st Century version of C and has been explicitly designed from the start to not try to be much more than that, can make everyone coming from Kotlin and Swift pull a few hairs at first.</description>
            <content type="html"><![CDATA[<p>Last week, I made my first tentative foray into Go programming. <a href="https://www.ki-labs.com/">My company</a> uses Go in a couple of projects, but although I have heard many positive things about the language, so far I have tried to stay away from it. The mere thought that Go is a 21st Century version of C and has been explicitly designed from the start to not try to be much more than that, can make everyone coming from Kotlin and Swift pull a few hairs at first. The mere mentioning of C makes me shiver when I think about the crazy stuff I wrote in early high school  (circa. <sup>2000</sup>&frasl;<sub>02</sub>). After school, I never gave C a chance anymore, but instead, moved on to languages, which at the time made my life easier.</p>

<p>In reality, programming with Go is not as harsh as I expected. Okay, it does look a lot like C, there are no classes, and pointers are everywhere, but you quickly get used to these, when you see the full picture. Unlike C, Go has a garbage collector, which means that a whole class of problems I had with memory management will simply not be present.</p>

<p>As for OOP, objects are still there, but their construction is slightly different. Go has eradicated inheritance and fosters composition instead. Go  The lack of a <code>class</code> construct has been more than sufficiently replaced by structs and <a href="https://gobyexample.com/interfaces">interfaces</a>. If all you need is a bag of properties (also referred to as &ldquo;data class&rdquo; in other languages), a <code>struct</code> should be perfectly sufficient. If you want to add functionality to your objects, Go&rsquo;s system of <a href="https://gobyexample.com/interfaces">attachable method receivers</a> makes it fairly easy to do so. In fact, after an hour of hour of work, I got pretty confident with it.</p>

<p>Pointers are also not the pain I expected them to be. In fact, they help things more transparent and explicit. Since in Go (almost) everything is passed by value (with the exception of <code>map</code> and <code>slice</code>) pointers actually help distinguish when the function you are passing the object will potentially want to mutate it or not.</p>

<p>Where Go really shines for me at the moment is the native performance and the build process. Five years ago, I would have screamed at the mere thought of this: statically compiling a binary and directly throwing it onto a remote machine where it just &hellip; works. But it does, and compared to the complexity of modern containerized systems and dependency hell, this is just a breeze of fresh air.</p>

<p>I am leaving you with the video that made me open up my eyes for Go:</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/cQ7STILAS0M" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content>
        </item>
        
        <item>
            <title>Kotlin ❤️ Data Science? (Part 1)</title>
            <link>https://preslav.me/2019/02/03/kotlin-loves-data-science/</link>
            <pubDate>Sun, 03 Feb 2019 14:29:06 +0000</pubDate>
            
            <guid>https://preslav.me/2019/02/03/kotlin-loves-data-science/</guid>
            <description>A few days ago, I was invited to give a talk at the Munich Kotlin Users Group meetup (check out my slides here) For quite some time, I have had an idea to promote Kotlin as the missing link between software engineering and Data Science. DuringKotlinConf 2018, I had the chance and the privilege to meet a couple of amazing people, whose talks only helped confirm my thoughts.
   Mathematical Modeling with Kotlin | Thomas Nield</description>
            <content type="html"><![CDATA[

<p>A few days ago, I was invited to give a talk at the <a href="https://www.meetup.com/Kotlin-User-Group-Munich/events/257927489/">Munich Kotlin Users Group</a> meetup (check out my slides <a href="https://speakerdeck.com/preslavrachev/kotlin-data-science">here</a>) For quite some time, I have had an idea to promote Kotlin as the missing link between software engineering and Data Science. During<a href="https://preslav.me/2018/11/01/kotlinconf-2018-recap/"> KotlinConf 2018</a>, I had the chance and the privilege to meet a couple of amazing people, whose talks only helped confirm my thoughts.</p>

<p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/-zTqtEcnM7A" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<a href="https://youtu.be/-zTqtEcnM7A">Mathematical Modeling with Kotlin | Thomas Nield</a></p>

<p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/yjVW6uCmVBA" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<a href="https://www.youtube.com/watch?v=yjVW6uCmVBA">Building Data Science Workflows with Kotlin | Holger Brandl</a></p>

<p>Indeed, the future seems full of opportunities for Kotlin, but not before JetBrains and the developer community remove a few of the pending roadblocks.</p>

<p>The following article is the first part of a two-part series based on my talk. After the meetup, I realized that the topic is far deeper than just going through a few slides about what Kotlin as a language can and can’t. Therefore, I decided to properly introduce the reader to the topic first. Next time, we will talk about where and how Kotlin can fit into the puzzle.</p>

<h1 id="the-problem-with-data">The Problem with Data</h1>

<p>We live in an age of unprecedented data abundance. So much, that our wishful imagination is easy to make us believe that we are on the verge of getting computers to think. Not surprisingly, when speaking about the future, the use of the term “AI” has recently become a favorite topic among company management and technology media alike.</p>

<p>Yet, in reality, we are only touching the surface. The path towards autonomous AI requires more basic human intervention than anything else. In particular, it needs a way for properly communicating data science into the software engineering field, and vice versa.</p>

<p>Aren’t We Already There?
Nope, not quite. Bringing data science into the production workflow of established companies is not as easy as one might think. More so, when talking about the JVM, which a vast majority of enterprise software has been built upon.</p>

<p>See, there is a mismatch between software engineering and data science practices:</p>

<p>Software engineering works best when building well-defined systems. Requirements are set at the beginning and ideally, evolve over time, but rarely change entirely. There are traceable boundaries between components, with deterministic inputs and outputs, to help testability and ease extension. Like other forms of engineering, building a piece of software starts with a rough skeleton, which gets iterated over time and again. The goal of every step is to make the software either more feature complete or gradually morph it into a new direction, but keep it compatible with the original requirements.</p>

<p>Data science, on the other hand, deals with supporting or refuting hypotheses. Like other fields of science, it starts with a relatively generic question and goes through a process of data exploration and validation, until either the question can be answered fully, or it needs to be formulated again, due to an insufficiency of the data/selected approach. The exploration phase often involves trying out different approaches and seeing a large portion of them fail. This is why it is so important for the data science field to use tools and technologies that allow for easy exploration and visualization of the underlying data.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/0*_At3wUK_Zqgz_goL.png" alt="" />
<a href="https://www.xkcd.com/1838/">Machine Learning | xkcd</a></p>

<p>Another important difference between software engineering and data science is the interpretation of the outputs of systems at hand. Although, the understanding of distributed systems has almost become a science of its own, interpreting the outcome of a non-deterministic machine learning model is a whole different game. It is not easy to unit-test complex ML models, mainly because of the level of randomness they are built upon. Removing this randomness factor can help test the model in isolation, but might also provide the wrong assumptions when feeding the model with real-world data. Just like with the exploration phase above, it is a matter of having the right tools at hand and a fairly deep level of human interpretation.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/0*ihz1vmQr7OcBTVx4.png" alt="" />
<a href="https://xkcd.com/605/">Extrapolating | xkcd</a></p>

<h1 id="ai-ml-and-the-role-of-data-science-in-all-of-this">AI, ML, and the Role of Data Science in All of This</h1>

<p>So, we are back to our favorite term: Artificial Intelligence, also known as AI. AI has had a long history of ups and downs, most notably its birth and early progress during the 1950s and 1960s, followed by the so-called AI winter covering most of the late 1980s, 1990s, and the beginning of the 21st Century. The recent advancement of hardware technology has given researchers the opportunity to dig out the old papers, beat them off the dust, and re-imagine the utopian bright future, in which humans and machines become alike.</p>

<p>The fields of AI and Data Science have been complementing one another for a long time. Yet, while AI still seems rather ephemeral and difficult to grasp (a bit like Virtual Reality), Data Science resembles Augmented Reality, in that it employs technology, but leaves the ultimate decision and interpretation to humans.</p>

<p>Machine Learning (or ML, for short) is just one of the techniques that both rely on, in order to make machines reason about large amounts of data, but by far not the only one.</p>

<p>If you are looking for a more cynical view of the difference between the three you can rather use this one:</p>

<ul>
<li>AI is what brings the VC Money in.</li>
<li>ML (a.k.a sophisticated brute-force) is what gets the job done. ML models are very limited to a given domain.</li>
<li>DS is the craft of finding which ML model works for a particular case, and which doesn’t.
<br /></li>
</ul>

<p>Until next time, when I will talk more about whether Kotlin can help fill the gap between Software Engineering and Data Science, as well as what steps are still needed to help us get there.</p>

<h1 id="further-resources">Further Resources</h1>

<p>The slides to my talk
<script async class="speakerdeck-embed" data-id="99478ac60b134f5393f45d382b1d1bc6" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script></p>

<ul>
<li><a href="http://approximatelycorrect.com/2017/03/28/the-ai-misinformation-epidemic/">The AI Misinformation Epidemic</a></li>
<li><a href="https://blogs.nvidia.com/blog/2016/07/29/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/">What’s the Difference Between Artificial Intelligence, Machine Learning, and Deep Learning?</a></li>
<li><a href="https://towardsdatascience.com/data-science-has-become-too-vague-538899bab57">Data Science Has Become Too Vague</a></li>
<li><a href="https://towardsdatascience.com/deep-misconceptions-about-deep-learning-f26c41faceec">Deep Misconceptions About Deep Learning</a></li>
<li><a href="https://stats.stackexchange.com/questions/423/what-is-your-favorite-data-analysis-cartoon/9254">What is your favorite “data analysis” cartoon?</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Use Dotenv Files When Developing Your Python Apps</title>
            <link>https://preslav.me/2019/01/09/dotenv-files-python/</link>
            <pubDate>Wed, 09 Jan 2019 06:28:16 +0000</pubDate>
            
            <guid>https://preslav.me/2019/01/09/dotenv-files-python/</guid>
            <description>Hard-coding configuration is bad. This is one of the things that newbie programmers learn quickly after they realize that have committed sensitive information to a public GitHub repository. And it happens so easily. Often, you are in the spur of the moment, wanting to test something locally, when you figure out that you need some API key in order for your app to work. Adding the key to the code takes a second, and is just as easy to forget when committing.</description>
            <content type="html"><![CDATA[

<p>Hard-coding configuration is bad. This is one of the things that newbie programmers learn quickly after they realize that have committed sensitive information to a public GitHub repository. And it happens so easily. Often, you are in the spur of the moment, wanting to test something locally, when you figure out that you need some API key in order for your app to work. Adding the key to the code takes a second, and is just as easy to forget when committing. The <a href="https://12factor.net/">Twelve-Factor-App</a> methodology calls this a <em>violation</em>, and has whole <a href="https://12factor.net/config">section</a> on why should be externalized and read from the environment at runtime.</p>

<p>I used to avoid using environment variables, because they made it hard to set up a local environment for testing. I’d either pass all the assignments at the start, or use a cumbersome startup script to export them to the current shell.</p>

<p>Luckily, it is easy to improve the quality of your code, and ease testing in different environments at the same time. It has become somewhat of a standard practice to use <code>.env</code> (a.k.a dotenv) files for configuring sensitive data while testing across environments. A <em>dotenv</em> file contains nothing more than text, where  it has one environment variable assignment per line:</p>

<pre><code class="language-bash">ABC_KEY=1234xyz
DEF_KEY=2349875
DEBUG=True
</code></pre>

<p><strong>NOTE</strong>: <em>Dotenv</em> files <strong>must be ignored</strong> from version control for exactly the same reason mentioned at the beginning of this post: exposing sensitive information as part of the project is bad. These files are only used to quickly set up or change an environment when needed.</p>

<h2 id="using-a-dotenv-file-in-our-app">Using a dotenv file in our app</h2>

<p>How do we get our Python app to read a <code>.env</code> file? <a href="https://pypi.org/project/python-dotenv/">python-dotenv</a> is a great Python package that does exactly that. It will search for a <code>.env</code> as part of the project, and if it finds one, will expose the variables in it to the app. All you need to do, is <code>pip install python-dotenv</code> and add the following couple of lines at the start of your project:</p>

<pre><code class="language-python">from dotenv import load_dotenv
load_dotenv()
</code></pre>

<p>The starting point may vary, depending on whether your project is a command line script, a Flask, or a Django project. For instance, in a Django project, the above two lines need to be added at the top of the <code>settings.py</code> file.</p>

<p>Having set <code>python-loadenv</code> up, the rest is easy. Create a <code>.env</code> file at the root of your app with all the environment variables needed to configure it, and make sure that you invoke them properly from your code (e.g. use something like <code>os.getenv('MY_API_KEY')</code>). Don’t forget to exclude the <code>.env</code> file from being checked into your source code repository!</p>

<h2 id="links">Links</h2>

<ul>
<li><a href="https://pypi.org/project/python-dotenv/">python-dotenv · PyPI</a></li>
<li><a href="http://12factor.net/">http://12factor.net/</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>What I learned in 2018</title>
            <link>https://preslav.me/2018/12/31/what-i-learned-in-2018/</link>
            <pubDate>Mon, 31 Dec 2018 16:51:09 +0000</pubDate>
            
            <guid>https://preslav.me/2018/12/31/what-i-learned-in-2018/</guid>
            <description>It&amp;rsquo;s that time of the year again. The time when you make yourself a cup of coffee, and go through the events of the past years, searching for a sign that it has been worth it. And judging by the numbers alone, it seems like a very eventful year:
In 2018, I:
 Got engaged Changed my job Started new new side projects Attended 4 conferences and countless meetups Had my own chance to present in front of an audience (twice) Visited 5 countries and met many new people Read 15 books Wrote nearly 30 blog posts Ran 626 km, and finished 4 half-marathons Made between 5,500 and 6,000 push-ups  Wow, quite a year, heh?</description>
            <content type="html"><![CDATA[<p>It&rsquo;s that time of the year again. The time when you make yourself a cup of coffee, and go through the events of the past years, searching for a sign that it has been worth it. And judging by the numbers alone, it seems like a very eventful year:</p>

<p>In 2018, I:</p>

<ul>
<li>Got engaged</li>
<li>Changed my job</li>
<li>Started new new side projects</li>
<li>Attended 4 conferences and countless meetups</li>
<li>Had my own chance to present in front of an audience (twice)</li>
<li>Visited 5 countries and met many new people</li>
<li>Read 15 books</li>
<li>Wrote nearly 30 blog posts</li>
<li>Ran 626 km, and finished 4 half-marathons</li>
<li>Made between 5,500 and 6,000 push-ups</li>
</ul>

<p>Wow, quite a year, heh?In reality, these numbers would mean nothing, if it weren&rsquo;t for the things I learned in between. I am one of the people who believe that goals are not destinations, but guiding posts. To me it&rsquo;s the journey that matters. For instance, the fact that I finished 15 books this year wouldn&rsquo;t matter, if I cannot remember even a single quote to keep in my mind for the rest of my life. Same with running. It&rsquo;s not the number of half marathons I ran throughout this year, but about the transformation my body and mind underwent every time - anxiety, exhaustion, acceptance, relief, exhilaration.</p>

<p>So let&rsquo;s see what I learned this year:</p>

<p><strong>I learned to embrace the unknown</strong>, get out of my comfort zone, and jump into unknown waters. I was reluctant to leave the safety of my old job, but in retrospect, it seems like I have really missed a gulp of fresh air.</p>

<p><strong>I learned that patience and persistence matter</strong>. When you look at the numbers above, every single one of them alone, would seem insurmountable, if you push yourself to achieve it once. But I did everything stepwise, one tiny bit at a time, day after day. Doing things this way is harder, because it requires a lot of motivation, but it certainly has a more long-lasting effect at the end.</p>

<p><strong>learned that people are different</strong>, and what worked for me, may not work for others. In fact, it will <strong>most probably not work for others</strong>. You cannot take people by the hand and show them the right way, because you don&rsquo;t know the right way for others. What you can and definitely should do, is encourage them to find it for themselves.</p>

<p>As a direct consequence of the above, <strong>I learned to listen more</strong>. Normally, I am the type of person who won&rsquo;t start a conversation, but once I feel comfortable enough, I won&rsquo;t stop talking. Sometimes too much. Talking is good, but being a good listener is a way more appreciated.</p>

<p><strong>I learned that being having an introverted personality is unlike what society tells us, but a hidden gem in disguise</strong>. Previously, I thought that it is some kind of a disadvantage that I need to cure myself from. So, I thought that becoming a sports person and an active community persona, would help me &ldquo;get cured&rdquo;. In fact, I had to try everything to come to the realization that this is not something people need to cure themselves from, but a unique gift that they should embrace. The ability to observe the surrounding environment with the focus of an introvert, or be able to go deep in the flow when solving a problem or mastering a skill, is something you shouldn&rsquo;t be ashamed of, but actively go after. If I could do something for the community in 2019, it would be to meet more and more introverted people, and share my discoveries with them.</p>

<p>Last but not least, <strong>I realized how much I really, really love writing</strong>.</p>

<p>When I look back, it seems like 2018 was a great year indeed. Looking forward to an amazing 2019! My best wishes for a wonderful new year!</p>
]]></content>
        </item>
        
        <item>
            <title>Connecting to a MongoDB Instance Using KMongo</title>
            <link>https://preslav.me/2018/12/28/mongodb-kmongo-connection-string/</link>
            <pubDate>Fri, 28 Dec 2018 16:45:41 +0000</pubDate>
            
            <guid>https://preslav.me/2018/12/28/mongodb-kmongo-connection-string/</guid>
            <description>Often, the seemingly simple things can make you spend hours chasing around your tail. Like trying to connect to a MongoDB instance using KMongo.
Basically, if you have checked out the KMongo quick start, setting up a client and fetching some data should be extremely easy:
val client = KMongo.createClient() //get com.mongodb.MongoClient new instance val database = client.getDatabase(&amp;quot;test&amp;quot;) //normal java driver usage val col = database.getCollection&amp;lt;Jedi&amp;gt;() //KMongo extension method  The quick start tutorial assumes that your DB resides on mongodb://localhost:27017, but in reality, your MongoDB connection string looks more like this:</description>
            <content type="html"><![CDATA[

<p>Often, the seemingly simple things can make you spend hours chasing around your tail. Like trying to connect to a MongoDB instance using <a href="https://litote.org/kmongo/quick-start/">KMongo</a>.</p>

<p>Basically, if you have checked out the KMongo <a href="https://litote.org/kmongo/quick-start/">quick start</a>, setting up a client and fetching some data should be extremely easy:</p>

<pre><code class="language-kotlin">val client = KMongo.createClient() //get com.mongodb.MongoClient new instance
val database = client.getDatabase(&quot;test&quot;) //normal java driver usage
val col = database.getCollection&lt;Jedi&gt;() //KMongo extension method
</code></pre>

<p>The quick start tutorial assumes that your DB resides on <code>mongodb://localhost:27017</code>, but in reality, your MongoDB connection string looks more like this:</p>

<pre><code class="language-text">mongodb://&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;HOST&gt;:&lt;PORT&gt;/&lt;DATABASE&gt;
</code></pre>

<p>and in proper production environments, it is unknown until runtime. Let&rsquo;s assume that it was passed to the running application as an environment variable, e.g. <code>MONGODB</code>. Simply passing this string to <code>KMongo.createClient()</code>won&rsquo;t do it. The problem is that KMongo assumes that this string is simply the <code>&lt;HOST&gt;</code> part and creates a <code>ServerAddress</code>out of it. This results in an error when connecting.</p>

<p>The solution is to use a class called <code>MongoClientURI</code>instead. <code>MongoClientURI</code> parses the string argument and splits it into its corresponding parts.</p>

<p>So, the solution to my problem:</p>

<pre><code class="language-kotlin">val uri = MongoClientURI(System.getenv(&quot;MONGODB&quot;))
val collection = KMongo.createClient(uri = uri)
        .getDatabase(uri.database)
        .getCollection&lt;Jedi&gt;()
</code></pre>

<hr />

<h1 id="related">Related</h1>

<ul>
<li><a href="https://www.mongodb.com/blog/post/getting-started-with-mongodb-and-java-part-i">https://www.mongodb.com/blog/post/getting-started-with-mongodb-and-java-part-i</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>How Much of &#34;The Kotlin Way&#34; Is the Right Way?</title>
            <link>https://preslav.me/2018/12/28/the-kotlin-way/</link>
            <pubDate>Fri, 28 Dec 2018 07:10:00 +0000</pubDate>
            
            <guid>https://preslav.me/2018/12/28/the-kotlin-way/</guid>
            <description>NOTE: This post was originally intended to provoke a discussion, and despite its length, the original goal is still the same. Please, share your feedback on Twitter, Reddit, or Dev.to.
My experience with the JVM dates back from around 2010. Java in those days was a bit different from todays&amp;rsquo; standpoint. Java 6 was the current standard at the time, but most projects I got to work on, were stuck between Java 4 and 5.</description>
            <content type="html"><![CDATA[<p><em>NOTE: This post was originally intended to provoke a discussion, and despite its length, the original goal is still the same. Please, share your feedback on <a href="https://twitter.com/intent/tweet?text=%40preslavrachev%20%5BADD%20YOUR%20COMMENT%20HERE%5D&amp;url=https://preslav.me/p/72a4a26e-c120-428f-af5d-98f09f88e2db/&amp;related=preslavrachev">Twitter</a>, <a href="https://www.reddit.com/r/Kotlin/comments/aa9anw/q_how_much_of_the_kotlin_way_is_the_right_way/">Reddit</a>, or <a href="https://dev.to/preslavrachev/q-how-much-of-the-kotlin-way-is-the-right-way-3129">Dev.to</a>.</em></p>

<hr />

<p>My experience with the JVM dates back from around 2010. Java in those days was a bit different from todays&rsquo; standpoint. Java 6 was the current standard at the time, but most projects I got to work on, were stuck between Java 4 and 5. Those were tough beasts. More verbose and tedious to write code in.</p>

<p>At that time, we began searching for a way to release the burden of writing code, but keep relying on the vast adoption of the JVM. Groovy and Scala were the two alternatives offering more language expressiveness with less boilerplate and ceremony. And, while Groovy somehow never picked up the self-esteem to be seen as something more of a scripting language for build orchestration and runtime in-app plumbing, Scala looked like the bold and sexy future of the JVM.</p>

<p>That is, until the language and its community ideologically drifted apart from Java. Although most of the existing Java libraries at the time were compatible and accessible from the Scala runtime, those were seen as archaic, tedious to work with, and simply not built <em>&ldquo;the Scala way&rdquo;</em>. This slogan was used to justify the building of a whole new ecosystem of tools, libraries, and frameworks, written from the ground up with Scala in mind. It is safe to say that nowadays for every Java library out there, one could find two or three Scala equivalents written <em>&ldquo;the Scala way&rdquo;</em>. I am not much of a Scala expert, but IMHO, this has led to a total separation between the two communities, each re-inventing the wheel its own way.</p>

<p>Kotlin was supposed to help solve all of that. Having joined the game late enough, JetBrains put a bet on Kotlin&rsquo;s inter-operability with standard Java code. To achieve this, a language has to be perceived as a companion, and not as a true paradigm shift. For the three years I have worked with and followed Kotlin&rsquo;s development, there have been only a few minor occasions when the inter-operability did not work on 100%, and those were more or less edge cases. It seemed that had finally reached the golden mean, where multiple language paradigms can co-exist and their communities cooperate in order to achieve a common goal.</p>

<p>Yet, this is not quite what is happening. I have seen the birth of a Kotlin-first community of developers, preaching things <em>&ldquo;the Kotlin way&rdquo;</em>. Soon enough, tools, libraries, and frameworks started appearing, having perfectly working equivalents in Java, but written in <em>&ldquo;idiomatic Kotlin&rdquo;</em>. I started wondering where I had seen this before 🤔.</p>

<p>Don&rsquo;t get me wrong, I am 100% for challenging the Status Quo, but by stepping on what already works well, and not merely throwing it off-board, because it was not built <em>&ldquo;the XYZ way&rdquo;</em>.</p>

<p>And what do you think?</p>
]]></content>
        </item>
        
        <item>
            <title>Dependency Injection in Python: The Java Guy&#39;s Perspective</title>
            <link>https://preslav.me/2018/12/20/dependency-injection-in-python/</link>
            <pubDate>Thu, 20 Dec 2018 13:34:36 +0000</pubDate>
            
            <guid>https://preslav.me/2018/12/20/dependency-injection-in-python/</guid>
            <description>Dependency Injection (DI) in Python? Seriously? 🤔
At this point, I am expecting people to yell at me for thinking like a Java guy, but just bear with me for a moment, will you? Spoiler: I am going to mention Spring only once in this post, I promise.
NOTE: If you are already familiar with Dependency Injection and want to see it in action, you might want to jump right to the example at the end.</description>
            <content type="html"><![CDATA[

<p>Dependency Injection (DI) in Python? Seriously? 🤔</p>

<p>At this point, I am expecting people to yell at me for thinking like a Java guy, but just bear with me for a moment, will you? <em>Spoiler:</em> I am going to mention Spring only once in this post, I promise.</p>

<p><strong><em>NOTE:</em></strong> If you are already familiar with Dependency Injection and want to see it in action, you might want to jump right to <a href="#a-more-complex-example">the example</a> at the end. Otherwise, keep reading. As always, feel free to send me a <a href="https://twitter.com/intent/tweet?text=%40preslavrachev%20%5BADD%20YOUR%20COMMENT%20HERE%5D&amp;url=https://preslav.me/p/3c4daf3d-607c-49e4-8aa9-c87a61be1697/&amp;related=preslavrachev">✏️comment on Twitter</a>. Your feedback is more than appreciated.</p>

<p>&hellip;</p>

<h1 id="let-s-get-things-straight">Let&rsquo;s Get Things Straight</h1>

<p>While I am definitely approaching Python software development from my close-to-a-decade  experience building Java software, I am not trying to preach to you a certain style of programming. Take this simply as a different perspective on things. The Python Universe is so immense that it will be a crime to pretend that DI is necessary for every Python project. While certain types of Python projects will definitely benefit from a bit more structure, for many others, DI might become the worst nightmare. I will try to write down my reasons, and leave the final decision to the reader.</p>

<h1 id="a-quick-detour-on-dependency-injection">A Quick Detour on Dependency Injection</h1>

<p>I will save you the lecture here. I am sure that many of you already know what DI is all about. Perhaps, some of you have already looked at, if not even read Martin Fowler&rsquo;s <a href="https://martinfowler.com/articles/injection.html">Dependency Injection essay</a>. Even if you haven&rsquo;t, don&rsquo;t panic. I will share you a secret, and that is, <strong>you already know DI, and have used it many times,</strong> even if you haven&rsquo;t used a particular name for it.</p>

<p>There is one golden prerequisite for Dependency Injection and that is, Separation of Concerns. Put simply, group logic in separable units, and let these units work together, without any of them knowing much about the implementation details of the other. OOP calls such units <em>classes</em>, and FP, <em>functions</em>. The point is, <em>units isolate common logic</em>. Let&rsquo;s add to this the requirement that no unit explicitly instantiates the units it works with (dependencies). Instead, dependencies are passed upon the unit (injected), usually, during its instantiation.</p>

<p>So, DI is a fancy term for instantiating classes in a top-level module, and passing them as initializer arguments to one another:</p>

<pre><code class="language-python">class Api:
    def fetch_remote_data(self):
        print('Api called')
        return 42


class BusinessLogic:
    def __init__(self, api: Api):
        self.api = api

    def do_stuff(self):
        api_result = self.api.fetch_remote_data()
        print(f'the api returned a result: {api_result}')
        # do something with the data and return a result

# ---

if __name__ == '__main__':
    api = Api()
    logic = BusinessLogic(api=api)

    # ...
    print(logic.do_stuff())
</code></pre>

<p>There are of course, more Pythonic ways of implementing Dependency Injection. I realize that the one I provided above is very Java-like. I have tried to collect a list of Python-related resources you might want to consult. You will find it at the end of this post.</p>

<h1 id="where-explicit-dependency-injection-might-help">Where Explicit Dependency Injection Might Help</h1>

<p>I already tried to make it clear that DI is not a silver bullet, and due to Python&rsquo;s versatility of use, it might not fit to every project. In some, it might even hamper the development of the project.</p>

<p>Python was created to give its developers the freedom to just do things, without sweating much about structure or ceremony, when those are not needed. This is why the Python ecosystem is perfect for scratching out ideas and prototyping, single-purpose CLI tools, or scripts with limited scope and lifetime.</p>

<p>Yet, for many of these projects, there comes a time, when they grow, or are bound to grow from the onset, and with this growth comes a different set of challenges. Where I see DI fit best, are projects with established requirements, serving a large number of stakeholders. The challenge here is to scale and constantly improve the system, without compromising its stability.</p>

<p><strong>Advantages</strong></p>

<p>Adding DI to your project will potentially</p>

<ul>
<li>increase its testability and reusability, because by design, it allows for easily replacing one component with another (great for mocking, or replacing one concrete implementation with another)</li>
<li>increase the readability. When applying DI your top-level model becomes sort of an orchestrator, instantiating your units and passing dependencies to them. Although this might add a bit of boilerplate, it helps ensure that all the LEGO-block wiring-up happens in one place, and this place will always be the starting point of your later investigations.</li>
<li>adds a certain level of common understanding between programmers of different backgrounds. While I am sure that many of you would come up with some more elegant and more Pythonic ways for solving the dependency issue, some of them might be too obscure for non-Python gurus (hi there 👋🏼) and lead to misunderstanding, lost communication, and potentially, compromising the resilience of the end product.</li>
</ul>

<p><strong>Disadvantages</strong></p>

<p>Well, the boilerplate and ceremony might be quite of an issue for some Python purists.</p>

<h1 id="a-more-complex-example">A More Complex Example</h1>

<p>I have already mentioned it a few times that doing all the instantiation and passing dependencies around by hand can be a bit tedious. It can also be complicated, because of the order of instantiation. The core dependencies must be instantiated first, the units that depend on them afterwards, and so on, until the top-level units, whose role is usually to coordinate the flow of data among their dependencies.</p>

<p>There are many Python libraries, which already facilitate this process. Among those, I looked at <a href="https://github.com/ets-labs/python-dependency-injector">python-dependency-injector</a>, <a href="https://github.com/suned/serum">serum</a>, and <a href="https://github.com/alecthomas/injector">injector</a>. I found <a href="https://github.com/alecthomas/injector">injector</a> to be closest to what I have come to know and use on Java - <a href="https://spring.io/">Spring</a> and <a href="https://github.com/google/guice">Guice</a>. It is not the least verbose, but it gets the job done. Let&rsquo;s see how it works:</p>

<pre><code class="language-bash">pip install injector
</code></pre>

<p>Let&rsquo;s take the two classes, I have created above:</p>

<pre><code class="language-python">class Api:
    def fetch_remote_data(self):
        print('Api called')
        return 42


class BusinessLogic:
    def __init__(self, api: Api):
        self.api = api

    def do_stuff(self):
        api_result = self.api.fetch_remote_data()
        print(f'the api returned a result: {api_result}')
        # do something with the data and return a result
</code></pre>

<p>The only modification I made, was adding an explicit <a href="https://www.python.org/dev/peps/pep-0484/">type hint</a> to the <code>Api</code> dependency. This will be used by the library to determine the right object to pass at instantiation.</p>

<p>Injector, similar to Guice and Spring, adds the concept of a dependency <code>Module</code>. This is a class that inherits from <code>injector.Module</code> and has a bunch of methods, each corresponding to the initialization of one dependency or the other:</p>

<pre><code class="language-python">class AppModule(Module):

    @singleton
    @provider
    def provide_business_logic(self, api: Api) -&gt; BusinessLogic:
        return BusinessLogic(api=api)

    @singleton
    @provider
    def provide_api(self) -&gt; Api:
        # there is no complex logic in our case,
        # but you can use this method to hide the complexity of initial 
        configuration
        # e.g. when instantiating a particular DB connector.
        return Api()
</code></pre>

<p>Each of these methods is decorated with <code>@provider</code> (required) and <code>@singleton</code> (optional, only if you want to ensure that the object instance will always remain the same). Pay attention to the use of type hinting here too. One the one hand, it makes the dependency module code more readable, on the other, it is used by the injector library to determine the right objects to return.</p>

<p>Let&rsquo;s see how to use our classes. We need to create an Injector and pass it an instance of our AppModule.</p>

<pre><code class="language-python">if __name__ == '__main__':
    injector = Injector(AppModule())

    logic = injector.get(BusinessLogic)
    logic.do_stuff()
</code></pre>

<p>From now on, when you want to obtain an instance which is inside the dependency graph, from outside the graph, you would have to use the injector. Before you start grunting about the rising amount of boilerplate, let me point out that the actual places where you would need to do that, are either your app&rsquo;s main starting points, or API/Web endpoints in the context of a Web application. Actually, if you are building a Flask app, the creator of injector has got you covered. There is an extension for Flask, called <a href="https://github.com/alecthomas/flask_injector">flask-injector,</a> which hides the boilerplate of having to use the injector object directly.</p>

<p>Back to our injector instance. The real benefit of having dependency modules, is when you have several of them, for running your app in different contexts. The simplest example is testing. Let&rsquo;s create a version of our Api class for testing purposes:</p>

<pre><code class="language-python">class TestApi(Api):
    def fetch_remote_data(self):
        print('Demo Api called')
        return 24
</code></pre>

<p>Assuming that there might be more classes we&rsquo;d like to mock, we create a separate dependency module for them:</p>

<pre><code class="language-python">class TestAppModule(Module):

    @singleton
    @provider
    def provide_api(self) -&gt; Api:
        return TestApi()
</code></pre>

<p>The real magic happens when creating the injector. You can have as many injectors as you have, and each injector instance can be supplied with as many dependency module configurations as you wish:</p>

<pre><code class="language-python">if __name__ == '__main__':
    real_injector = Injector(AppModule())
    test_injector = Injector([AppModule(), TestAppModule()])

    real_logic = real_injector.get(BusinessLogic)
    real_logic.do_stuff()

    test_logic = test_injector.get(BusinessLogic)
    test_logic.do_stuff()
</code></pre>

<pre><code>Api called
the api returned a result: 42
Demo Api called
the api returned a result: 24
</code></pre>

<h1 id="the-end">The End</h1>

<p>I will stop here. I hope, if not really having managed to convince you, to have given you a slightly different perspective on things. Until next time!</p>

<hr />

<h1 id="related-resources">Related Resources</h1>

<ul>
<li><a href="https://martinfowler.com/articles/injection.html">Inversion of Control Containers and the Dependency Injection pattern</a></li>
<li><a href="https://medium.com/@suneandreasdybrodebel/pythonic-dependency-injection-a-practical-guide-83a1b1299280">Pythonic Dependency Injection: A Practical Guide - Sune Andreas Dybro Debel - Medium</a></li>
<li><a href="https://python-3-patterns-idioms-test.readthedocs.io/en/latest/index.html">Python 3 Patterns, Recipes and Idioms - Python 3 Patterns, Recipes and Idioms</a></li>
<li><a href="http://python-dependency-injector.ets-labs.org/introduction/di_in_python.html">Dependency injection and inversion of control in Python - Dependency Injector 3.14.2 documentation</a></li>
<li><a href="https://github.com/alecthomas/injector">alecthomas/injector</a></li>
<li><a href="https://github.com/suned/serum">suned/serum</a></li>
<li><a href="https://github.com/ets-labs/python-dependency-injector">ets-labs/python-dependency-injector</a></li>
<li><a href="https://github.com/RobertoPrevato/rodi">RobertoPrevato/rodi</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Designing Well-Structured REST APIs with Flask-RestPlus: Part 1</title>
            <link>https://preslav.me/2018/12/02/designing-well-structured-rest-apis-with-flask-restplus-part-1/</link>
            <pubDate>Sun, 02 Dec 2018 15:46:47 +0000</pubDate>
            
            <guid>https://preslav.me/2018/12/02/designing-well-structured-rest-apis-with-flask-restplus-part-1/</guid>
            <description>This is the first part of a two-part series. In this post, I will introduce Flask-RestPlus and demonstrate how to start organising APIs around its simple REST-based conventions. Next time, I will address the topic of request/response marshalling (serialisation) and validation.
A seasoned Spring developer, I felt a bit uneasy when designing and future-proofing a Flask-based API for the first time. I have recently started using Python way beyond my original intention to just play with data, and found Flask to be a super-easy micro-service alternative to Spring Boot or Ktor.</description>
            <content type="html"><![CDATA[

<p>This is the first part of a two-part series. In this post, I will introduce <a href="https://flask-restplus.readthedocs.io/en/stable/">Flask-RestPlus</a> and demonstrate how to start organising APIs around its simple REST-based conventions. Next time, I will address the topic of request/response marshalling (serialisation) and validation.</p>

<hr />

<p>A seasoned Spring developer, I felt a bit uneasy when designing and future-proofing a <a href="http://flask.pocoo.org/">Flask</a>-based API for the first time. I have recently started using Python way beyond my original intention to just play with data, and found Flask to be a super-easy micro-service alternative to <a href="https://spring.io/projects/spring-boot">Spring Boot</a> or <a href="https://ktor.io/">Ktor</a>. The one thing I was really concerned about, was making sure that the API  request/response format was standardised (think, providing a Swagger schema), well-documented, and validated. While working with Java, much of this would come straight from the compiler itself, due to the static-type nature of the language. When you combine this with a couple of great libraries like <a href="https://github.com/FasterXML/jackson">Jackson</a> and <a href="http://springfox.github.io/springfox/">SpringFox</a>, the API communication gets documented and validated with minimal intrusion to the actual code. In Python, this would require tedious <code>if-else</code> checks all over the place &hellip; or so I thought.</p>

<h2 id="flask-restplus-to-the-rescue">Flask-RestPlus to the Rescue</h2>

<p>Unlike <a href="https://www.djangoproject.com/">Django</a>, Flask does not come with batteries included, but there is a whole ecosystem of open-source libraries and extensions contributed by the community. One of these is called <a href="https://flask-restplus.readthedocs.io/en/stable/">Flask-RestPlus</a> and it is the absolute dream-come-true for every Flask API designer. Flask-RestPlus is a <a href="http://flask.pocoo.org/docs/1.0/extensiondev/">Flask extension</a> library, and as the name suggests, it helps ease the building of structured RESTful APIs with minimal setup, and encourages best practices. Flask RestPlus follows certain conventions, but does not insist on them, the way Django does.  In a way, Flask-RestPlus tries to help organise a growing Flask project, but without it losing its minimal overhead, which is the greatest charm of Flask.</p>

<p>The goal of this series is to start with a simple Flask app, and try to address the following points with a bit of Flask-RestPlus at a time:</p>

<ol>
<li>Structure and auto-document an API <strong>(Part 1)</strong></li>
<li>Ensure request/response payload validation <strong>(Part 2)</strong></li>
</ol>

<h3 id="demo-app">Demo App</h3>

<p>Let&rsquo;s start with a simple Flask-based API for a conference management application:</p>

<pre><code class="language-python">from flask import Flask

app = Flask(__name__)


@app.route(&quot;/conferences/&quot;)
def get_all__conferences():
    &quot;&quot;&quot;
    returns a list of conferences
    &quot;&quot;&quot;


@app.route(&quot;/conferences/&quot;, methods=['POST'])
def add_conference():
    &quot;&quot;&quot;
    Adds a new conference to the list
    &quot;&quot;&quot;


@app.route(&quot;/conferences/&lt;int:id&gt;&quot;)
def get_conference(id):
    &quot;&quot;&quot;
    Displays a conference's details
    &quot;&quot;&quot;

@app.route(&quot;/conferences/&lt;int:id&gt;&quot;)
def edit_conference(id):
    &quot;&quot;&quot;
    Edits a selected conference
    &quot;&quot;&quot;
</code></pre>

<p>Installing Flask-RestPlus is easy</p>

<pre><code class="language-bash">pip install Flask-RestPlus
</code></pre>

<p>Let&rsquo;s simply introduce an Api object for now, try to wrap our app instance with it, replace the routing decorators, and see what happens:</p>

<pre><code class="language-python">from flask import Flask
from flask_restplus import Api

app = Flask(__name__)
api = Api(app=app)


@api.route(&quot;/conferences/&quot;)
def get_all__conferences():
    pass


@api.route(&quot;/conferences/&quot;, methods=['POST'])
def add_conference():
    pass


@api.route(&quot;/conferences/&lt;int:id&gt;&quot;)
def get_conference(id):
    &quot;&quot;&quot;
    Displays a conference's details
    &quot;&quot;&quot;

@api.route(&quot;/conferences/&lt;int:id&gt;&quot;)
def edit_conference(id):
    &quot;&quot;&quot;
    Edits a selected conference
    &quot;&quot;&quot;
</code></pre>

<p>As soon as the app starts, we will get the following error:</p>

<pre><code>AttributeError: 'function' object has no attribute 'as_view'
</code></pre>

<p>This is because if you want to use RestPlus for some of your Flask functions, you have to enclose them in a scoping class. Not only that, but inside the enclosing class, you should name your methods, corresponding to the HTTP methods that REST is based on: GET, POST, PUT, and DELETE:</p>

<pre><code class="language-python">@api.route(&quot;/conferences/&quot;)
class ConferenceList(Resource):
    def get(self):
        &quot;&quot;&quot;
        returns a list of conferences
        &quot;&quot;&quot;
</code></pre>

<p>Before anyone starts objecting, let me explain why this is helpful. Flask-RestPlus uses the Flask concept of &ldquo;Pluggable Views&rdquo; to introduce <code>Resource</code> (as in, REST resource).</p>

<p>Let&rsquo;s be honest. While most Flask applications start simple, many of them outgrow the initial idea, and cramming several handler functions in the main module scope quickly becomes a mess. This is why <a href="http://exploreflask.com/en/latest/blueprints.html">Flask Blueprints</a> exist to help split common functionality into multiple modules.</p>

<p>Flask-RestPlus makes great use of Blueprints too, as I will demonstrate later, but Resources go one level of granularity further. A Resource class can have multiple methods, but each one should be named after one of the accepted HTTP verbs. What if you need more than one <code>GET</code> or <code>POST</code> method for your API? Well, create multiple Resource classes and put each method in the corresponding resource class. It might look a little overwhelming at first, coming from the cut-the-boilerplate nature of Flask, but with a bit of playing around, it won&rsquo;t be a brainer at all, and it will pay off tremendously in the long run.</p>

<p>Let&rsquo;s see how our tiny app will look after the transformations:</p>

<pre><code class="language-python">from flask import Flask
from flask_restplus import Api, Resource

app = Flask(__name__)
api = Api(app=app)


@api.route(&quot;/conferences/&quot;)
class ConferenceList(Resource):
    def get(self):
        &quot;&quot;&quot;
        returns a list of conferences
        &quot;&quot;&quot;

    def post(self):
        &quot;&quot;&quot;
        Adds a new conference to the list
        &quot;&quot;&quot;


@api.route(&quot;/conferences/&lt;int:id&gt;&quot;)
class Conference(Resource):
    def get(self, id):
        &quot;&quot;&quot;
        Displays a conference's details
        &quot;&quot;&quot;

    def put(self, id):
        &quot;&quot;&quot;
        Edits a selected conference
        &quot;&quot;&quot; 
</code></pre>

<p>With this tiny bit of overhead (if you even consider this any overhead at all), you get so much in return. Start the app and point to <a href="http://localhost:5000">http://localhost:5000</a>. You will see that the index page has turned into a Swagger UI, which shows the already defined API endpoints, neatly organised into categories (namespaces):</p>

<p><img src="/images/2018/december/image.png" alt="" /></p>

<p>This is great for documenting, playing with, and sharing you API schema around. Yet, this is by far not the only thing that Flask-RestPlus does for you. It goes beyond simply documenting the API, in ensuring that the API is compliant with the schema. Put simply, Flask-RestPlus makes sure that if certain request parameters are marked as mandatory, or if request/response models are supposed to have a certain structure, those are checked and validated at runtime. In my opinion, this is real advantage of Flask-RestPlus, sitting on top of a Flask application. The current example is too simple to demonstrate the real power of request/response marshalling and validation, but both will be throughly described in Part 2.</p>

<h3 id="namespaces">Namespaces</h3>

<p>Namespaces are optional, and add a bit of additional organisational touch to the API, mainly, from a documentation point of view. A namespace allows you to group related Resources under a common root, and is simple to create:</p>

<pre><code class="language-python">ns_conf = api.namespace('conferences', description='Conference operations')
</code></pre>

<p>To bring certain Resources under a given namespace, all you need to do, is to replace <code>@api</code> with <code>@ns_conf</code>. Notice also that the name of the namespace replaces the name of the resource, so endpoints can simply to refer to <code>/</code>, instead of copying the name of the resource time and again:</p>

<pre><code class="language-python">from flask import Flask
from flask_restplus import Api, Resource

app = Flask(__name__)
api = Api(app=app)
ns_conf = api.namespace('conferences', description='Conference operations')


@ns_conf.route(&quot;/&quot;)
class ConferenceList(Resource):
    def get(self):
        &quot;&quot;&quot;
        returns a list of conferences
        &quot;&quot;&quot;

    def post(self):
        &quot;&quot;&quot;
        Adds a new conference to the list
        &quot;&quot;&quot;


@ns_conf.route(&quot;/&lt;int:id&gt;&quot;)
class Conference(Resource):
    def get(self, id):
        &quot;&quot;&quot;
        Displays a conference's details
        &quot;&quot;&quot;

    def put(self, id):
        &quot;&quot;&quot;
        Edits a selected conference
        &quot;&quot;&quot;
</code></pre>

<p>One will notice afterwards that the Swagger UI display has changed too, to reflect the namespacing:</p>

<p><img src="/images/2018/december/image-1.png" alt="" /></p>

<h3 id="blueprints">Blueprints</h3>

<p><a href="http://flask.pocoo.org/docs/blueprints/#blueprints">Flask Blueprints</a> are a popular way of designing modular applications. The same applies to Flask-RestPlus. The production version of our application will certainly outgrow the four endpoints we started with. There might be other resources, or at the very least, you might want to move to move your API away from the root of your app. Both cases are a perfect candidate for a Blueprint.  Let&rsquo;s move all of our API endpoints under <code>/api/v1</code>, without touching the routes of even one of them. This example is coming straight from the Flask-RestPlus <a href="https://flask-restplus.readthedocs.io/en/stable/scaling.html#use-with-blueprints">documentation</a>, and is illustrative enough to help close this chapter of the journey:</p>

<p>Create a Blueprint the usual way, and instead of wrapping our app instance with the RestPlus API,  we will wrap the Blueprint instead. This way, independent of our app, we are free to move our API part into a different module: (e.g. <code>blueprint/api.py</code>).</p>

<pre><code class="language-python">from flask import Blueprint
from flask_restplus import Api

blueprint = Blueprint('api', __name__)
api = Api(blueprint)

# Bring in the rest of our API code here
</code></pre>

<p>This leaves only a tiny bit of bridging code to introduce the Blueprint to the main app, and set the URL prefix. The next time you start your app, the API endpoints will be accessible only under the specified URL prefix (<code>/api/v1</code>):</p>

<pre><code class="language-python">from flask import Flask
from apis import blueprint as api

app = Flask(__name__)
app.register_blueprint(api, url_prefix='/api/1')
</code></pre>

<p>Last but not least, it is always a good idea to move the Swagger UI documentation away from the root. As in everything else in RestPlus, this part is extremely ease, too. You can override the default location by passing an additional parameter to the initialiser:</p>

<pre><code class="language-python">api = Api(app=app, doc='/docs')
</code></pre>

<hr />

<p>This sums up the first part of my series. I hope that it was informative, and will help you structure your Flask-based REST APIs better in the future. Till next time!</p>

<hr />

<h2 id="further-reading">Further Reading</h2>

<ul>
<li><a href="https://medium.freecodecamp.org/structuring-a-flask-restplus-web-service-for-production-builds-c2ec676de563">How to structure a Flask-RESTPlus web service for production builds</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>[Quote]: The Dying Art of Disagreement</title>
            <link>https://preslav.me/2018/10/30/quote-the-dying-art-of-disagreement/</link>
            <pubDate>Tue, 30 Oct 2018 10:56:54 +0200</pubDate>
            
            <guid>https://preslav.me/2018/10/30/quote-the-dying-art-of-disagreement/</guid>
            <description>Here is a quote from:
@media (max-width: 640px) { .embed-image { min-width: 100%; } }   Opinion | The Dying Art of Disagreement  Today’s clashes may hoarsen our voices, but they rarely sharpen our thinking, much less change our minds. https://www.nytimes.com |  Created with NoEmbed     Intelligent disagreement is the lifeblood of any thriving society. Yet we in the United States are raising a younger generation who have never been taught either the how or the why of disagreement, and who seem to think that free speech is a one-way right: Namely, their right to disinvite, shout down or abuse anyone they dislike, lest they run the risk of listening to that person — or even allowing someone else to listen.</description>
            <content type="html"><![CDATA[<p>Here is a quote from:</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://static01.nyt.com/images/2017/09/24/opinion/24stephensWEB/24stephensWEB-facebookJumbo.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.nytimes.com/2017/09/24/opinion/dying-art-of-disagreement.html">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Opinion | The Dying Art of Disagreement</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Today’s clashes may hoarsen our voices, but they rarely sharpen our thinking, much less change our minds.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.nytimes.com/2017/09/24/opinion/dying-art-of-disagreement.html">https://www.nytimes.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<blockquote>
<p>Intelligent disagreement is the lifeblood of any thriving society. Yet we in the United States are raising a younger generation who have never been taught either the how or the why of disagreement, and who seem to think that free speech is a one-way right: Namely, their right to disinvite, shout down or abuse anyone they dislike, lest they run the risk of listening to that person — or even allowing someone else to listen. The results are evident in the parlous state of our universities, and the frayed edges of our democracies.</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>I Made a Mastodon Account and so Far I like It</title>
            <link>https://preslav.me/2018/08/19/i-made-a-mastodon-account-and-i-like-it/</link>
            <pubDate>Sun, 19 Aug 2018 17:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2018/08/19/i-made-a-mastodon-account-and-i-like-it/</guid>
            <description>So, you might have heard about Mastodon. A micro-blogging alternative to Twitter, boasting itself for being 100% open-source, and for its decentralised nature.
  Unlike traditional social networks like Twitter and Facebook, Mastodon is not driven by a single company profiting by selling your identity to others, but by a network of instance maintainers and supporters who put their own money on the line. Ensuring that Mastodon is going to live in the long term sounds easy&amp;hellip;on paper.</description>
            <content type="html"><![CDATA[<p>So, you might have heard about <a href="https://joinmastodon.org/">Mastodon</a>. A micro-blogging alternative to Twitter, boasting itself for being 100% open-source, and for its decentralised nature.</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/IPSbNdBmWKE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>Unlike traditional social networks like Twitter and Facebook, Mastodon is not driven by a single company profiting by selling your identity to others, but by a network of instance maintainers and supporters who put their own money on the line. Ensuring that Mastodon is going to live in the long term sounds easy&hellip;on paper. Many of the instance maintainers gladly accept donations through <a href="https://www.patreon.com/ashfurrow">Patreon</a> or other means, and of course, adding your own instance to the network is relatively easy. Whether this is actually going to work in the long run, is a different question. There has been a list of alleged P2P Facebook/Twitter killers, which for one reason or another, have failed to the critical mass needed for mass adoption. I am willing to bet on a hopeful &ldquo;YES&rdquo;.</p>

<p>Being an early adopter of all things digital, and annoyed by the direction that Twitter is taking, I signed up for an account yesterday: <a href="https://mastodon.technology/@preslavrachev">@preslavrachev@mastodon.technology</a>. I gladly encourage everyone to join and follow me. In case you ask yourselves what <a href="https://mastodon.technology/about">@mastodon.technology</a> has to do with my username, this is the name of the instance where I registered my account.</p>

<p>Instance names are somewhat like email domains. Being on a particular instance ensures that one will get the entire flow of communication inside the given instance. Just like email however, cross-instance communication is an essential part of what makes Mastodon work. In fact, a large percentage of the people I follow now are not on the same instance as I am but communicate flawlessly with each other.</p>

<p>Just like with email, the real advantage of having multiple identities on Mastodon comes when one wants to claim allegiance to a certain organisation, group, or topic of interest. Say, your company decided to run a private Mastodon instance. Having an identity there would allow you to follow locally shared chatter, but also prove to the rest of the Mastodon Universe that you belong to the given organisation. As of yet, I haven&rsquo;t yet figured out how multi-identity management really works, so I might have to leave this part for a later post.</p>

<p>The last 24 hours of being on Mastodon feel very much like the early days of Twitter. When I joined Twitter in 2008, it was still a very turbulent time for both the service and the team. There have been way too many occasions when the fail whale appeared on my screen, something which I have not really witnessed during the past couple of years.</p>

<p><img src="/images/2019/05/fail-whale.jpg" alt="" /></p>

<p>With the frequent downtimes and shakes inside the team, something else slowly started going away - the community spirit of the early days. Don&rsquo;t get me wrong, I still use Twitter on a daily basis, though somewhat automatically. The community is still there, it is just that the bond and the friendly chatter of the early days is gone. It got replaced by incessant advertising (which I fervently mute on every occasion) and a stream of posts clearly optimised to target eyeballs and clicks. And of course, the clear statement to third-party app developers. I still remember the early days, when budding app or Web developers would use the developer-friendly Twitter API and boast with the client they developed. In no small terms, it was the developers who helped Twitter reach mainstream fame, and it is just sad that things had to reach their current state. Looks like my thoughts are being shared by the community as well:</p>

<figure>
<iframe src="https://mastodon.social/@bastianallgeier/100577435213222907/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="400"></iframe><script src="https://mastodon.social/embed.js" async="async"></script>
</figure>

<p>Back to Mastodon, during my first 24 hours, I spent an hour browsing among the many available alternative clients for both iOS and macOS. I spent another couple of hours waiting for the instance to go back up after a maintenance downtime that took longer than expected. Everyone else in my place would have backed off and left, but this just raised my level of excitement. It showed me that there is some actual work needed, and that the community is working hard to put things where they should be. I can but clap in respect to the efforts that the maintainers of my instance put yesterday, in order to ensure its stability in the upcoming days and weeks. During the hours when the instance was online, I managed to set up a few friendships and engaged in some interesting discussions. It seems like a bunch fo the early spirit is back. People reply more often, and others join in to the chat. I have the feeling that conversations flow more easily.</p>

<p>In many respects, being on Mastodon feels like the Wild West. There are many open questions I have, like how to manage multiple accounts, what would happen with my identity, if an instance dies. I am not yet sure if I am going to leave Twitter for Mastodon (not in the foreseeable future, at least), but it sure feels exciting to try a refreshing look at what Twitter might have evolved into, had it not been forced to turn into an ordinary business.</p>
]]></content>
        </item>
        
        <item>
            <title>Data Science on Your iPad</title>
            <link>https://preslav.me/2018/08/12/data-science-on-your-ipad/</link>
            <pubDate>Sun, 12 Aug 2018 05:29:00 +0000</pubDate>
            
            <guid>https://preslav.me/2018/08/12/data-science-on-your-ipad/</guid>
            <description>This article is a follow-up transcription to a talk I recently gave at a local Munich machine learning meetup. Unlike my previous talk, this time I wanted to convey the idea of using an iPad for actively running data science experiments, as opposed to passively consuming information. I illustrated my point with a few example iOS applications I personally use on a daily basis, which I hope would be good starting points to get the audience interested in the idea.</description>
            <content type="html"><![CDATA[

<p>This article is a follow-up transcription to a talk I recently gave at a local <a href="https://www.meetup.com/Hacking-Machine-Learning">Munich machine learning meetup</a>. Unlike <a href="https://preslav.me/2018/05/25/my-first-machine-learning-talk/">my previous talk</a>, this time I wanted to convey the idea of using an iPad for actively running data science experiments, as opposed to passively consuming information. I illustrated my point with a few example iOS applications I personally use on a daily basis, which I hope would be good starting points to get the audience interested in the idea. Being an iOS developer, who has once built a 3rd-party App Store search engine, I know first-hand how difficult it is to find anything inside the App Store, more so, when carefully specifying what one is looking for. Therefore, I believe that if nothing else, even having this one collection of links should be a valuable starting point for further exploration.</p>

<p>Before I get to the apps, let me start with some background:</p>

<h2 id="why-a-tablet">Why a Tablet?</h2>

<p>Although it might no longer get the media&rsquo;s attention as the tech sector&rsquo;s latest sexy gadget, the tablet has replaced the laptop/desktop in a number of activities, where one previously needed a &ldquo;real machine&rdquo;. What is more, the tablet is slowly getting out of people&rsquo;s notion as being handy coffee table device for content consumption. It is rather becoming the preferred content creation choice of many, particularly, creative professions, such as writers, musicians, and visual artists. This has caught the eye of companies like Apple, who have decided to double-down on the iPad&rsquo;s Pro model, targeted primarily at professionals.</p>

<p>If there is one thing that could describe our generation best, this would be our constant state of movement. We spend so much time commuting, or in some form of passive travel. We might as well try to start reclaiming some of this time and use it for creative and productive activities. This is where a tablet fits in for me.</p>

<p>Even at the bulkiest of sizes, an iPad is more convenient to carry around than a laptop. It is &ldquo;always on&rdquo;, can be used while sitting, lying or standing, with or without a keyboard, and requires less interactions than a laptop. More than anything else, I find the level of multitasking exactly right for this type of medium. Indeed, one can do way less things at the same time on an iPad than one can do using a laptop. I tend to consider this a feature rather than a shortcoming: less multitasking =&gt; less distraction, i.e. more immersion.</p>

<p>Although my daily work involves sitting behind a laptop and crafting complex systems, it is rarely behind the laptop where these ideas originate. I feel most creative when discussing things with people or when I drift away somewhere outside, my iPad in my hand.</p>

<p>Now back to the main topic&hellip;</p>

<h2 id="coding-on-an-ipad">Coding on an iPad?</h2>

<p>It is certainly doable, and getting used to it takes way less time than one might expect. As an example, take developer Richard Morgan, who <a href="https://www.imore.com/starsceptre-ios-game-was-entirely-coded-ipad">developed an iOS game on his iPad</a>, entirely during his commute around London. Everything is possible when you have the right mindset and the right tools.</p>

<p>As for the tools, there are quite a few good ones, hidden inside the App Store. In fact, code editors for iOS have existed even before the release of the original iPad. Among them, many in-app IDEs of sorts. Yet, it wasn&rsquo;t until last year, when I started seriously taking look at the possibility writing code and running it entirely on an iPad. In 2017, Apple <a href="https://www.macstories.net/linked/apples-app-store-guidelines-now-allow-executable-code-in-educational-apps-and-developer-tools/">permitted</a> the sharing and downloading of executable code on iOS devices, for teaching, learning and personal development purposes. A validation that writing code on iOS is here to stay.</p>

<p>The apps below are in no particular order, besides the fact that I will be specifically looking at Pythonista later on. All apps are paid, which is something I firmly stand behind and support, yet this post is no product or service endorsement of any kind. I am just a happy customer:</p>

<table>
<thead>
<tr>
<th>App Name</th>
<th>Languages</th>
</tr>
</thead>

<tbody>
<tr>
<td><a href="http://omz-software.com/pythonista/">Pythonista 3</a></td>
<td>Python 2 / 3</td>
</tr>

<tr>
<td><a href="https://codea.io/">Codea</a></td>
<td>Lua</td>
</tr>

<tr>
<td><a href="http://continuous.codes/">Continuous</a></td>
<td>C# / F# .NET</td>
</tr>

<tr>
<td><a href="https://itunes.apple.com/gb/app/irstudio/id1173749340">iRstudio</a></td>
<td> R</td>
</tr>

<tr>
<td><a href="https://itunes.apple.com/gb/app/analyser/id1083042861?mt=8">Analyser</a></td>
<td>Python</td>
</tr>

<tr>
<td><a href="https://itunes.apple.com/us/app/swift-playgrounds/id908519492">Playgrounds</a></td>
<td>Swift</td>
</tr>
</tbody>
</table>

<h2 id="pythonista">Pythonista</h2>

<p><a href="http://omz-software.com/pythonista/">Pythonista</a> is one the few apps, just like <a href="https://ia.net/writer">iA Writer</a> (which I am using right now to write this post), which IMHO, deserves to come on an iPad pre-installed. To those having tried the Swift Playgrounds app on an iPad, it is just mere peanuts in comparison with what Pythonista offers:</p>

<ul>
<li>Fully featured support for both Python 2 and Python 3</li>
<li>Excellent documentation, keyboard extensions, and code completion</li>
<li>Has an integrated debugger, a property inspector, and its own REPL-like console</li>
<li>Provides extensions for writing GUIs and communication with other apps on your device</li>
</ul>

<p><img src="/images/2018/august/pythonista-1.jpg" alt="" /></p>

<p><img src="/images/2018/august/pythonista-2.jpg" alt="" /></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/UYIZlqQPusw" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>

<p>Pythonista comes pre-packed with a ton of libraries we love and use every day: NumPy, Matplotlib, Requests, BeatufulSoup, etc. Yet, lacks some of our favourites, due to Apple&rsquo;s restrictions: Pandas, SciPy, Scikit-Learn, and unfortunately, TensorFlow. There are other apps like
<a href="https://itunes.apple.com/gb/app/analyser/id1083042861?mt=8">Analyser</a> and the now defunct Computable, which feature many of those as part of the app bundle, which lets me remain optimistic that we will see many of those included in future releases of Pythonista too.</p>

<p>Pythonista is great for quickly scrapping ideas, and doing exploratory data analysis. In fact, I am running most of my early-stage exploratory analysis on cryptocurrency pricing directly in the app. It is absolutely indispensable when learning new concepts, be those Python, or math / science-related. Last but not least, the integrated GUI and extension capabilities allow for creating entire iOS applications using Python. Think about it. An iOS app, built using Python, using only an iPad. It can&rsquo;t get better than this.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/a7QcX4Ke3Hc" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>

<h2 id="what-about-jupyter">What about Jupyter?</h2>

<p>Indeed, what about <a href="https://jupyter.org/">Jupyter</a>? Unless you have been living in a cave, and self-proclaimed yourself a data scientist, you should know that Jupyter  Notebook, and similar tools which mix code and narrative have taken the scientific world by storm. Moreover, Jupyter Notebook is entirely Web-based. Therefore, it shouldn&rsquo;t be a big deal to run your private Jupyter instance, or use of the many readily available instances from <a href="https://notebooks.azure.com/">Microsoft</a>, <a href="https://www.kaggle.com/kernels">Kaggle</a>, <a href="https://colab.research.google.com/">Google</a>, and many other providers. My answer to this is <strong>yes and no</strong>. Although Jupyter Notebook is Web-based and technically opens up in mobile Safari, the actual usability of the Web version on mobile is less than ideal. Browsing through and reading code somehow works. It is the editing of code, where things get really painful. Many of the beloved Jupyter shortcuts are not supported, due to the lack of corresponding keys on the iPad&rsquo;s keyboard. When trying to type inside a cell, the browser tries to compensate by zooming in in and out in a horrible fashion. A very, very unpleasant thing.</p>

<p>So far, so good, but there must be an app that brings the best of Jupyter and the native iOS experience together, right? Indeed, but a bit later on that. First, a word about Computable.</p>

<p><a href="http://computableapp.com/index_old.html">Computable</a> was an app that promised to be the best of Pythonista, with  even more DS libraries under the hood, and its own native Jupyter support. The ultimate bliss.</p>

<p><img src="http://www.computableapp.com/img/keyboard@2x.png" alt="" /></p>

<h6 id="computable-in-action-photo-source-http-www-computableapp-com-index-old-html">Computable in Action. <a href="http://www.computableapp.com/index_old.html">Photo Source</a></h6>

<p>Sadly, the app is no longer available. It was pulled from the App Store in 2015 for various reasons, but the developer was kind enough to <a href="https://github.com/ktraunmueller/Computable">put the original code up on GitHub</a>, and make it open-source. In fact, as far as I know, I have been the first one to <a href="https://github.com/preslavrachev/Computable">fork</a> the repository, and I am keen on trying to at least trying to revive it. I am looking for other contributors as well, so anyone willing to help is more than welcome.</p>

<p>Now, back to my dilemma. Indeed, there is a great app I discovered last year, which brings the best of both worlds. It is called
<a href="https://juno.sh/">Juno</a> and it is a slick, brand new, native iOS client for working with Jupyter Notebook and JupyterLab instances.</p>

<p><img src="https://navoshta.com/images/posts/juno/screenshot_h_01@2x.png" alt="" /></p>

<h6 id="photo-source-https-navoshta-com"><a href="https://navoshta.com">Photo Source</a></h6>

<p>Juno will easily connect to a self-hosted Jupyter server, or to a cloud-provided Jupyter VM (e.g. Azure, CoCalc, and many more coming soon). It also supports <a href="https://mybinder.org/">Binder</a>, for a series of pre-made tutorial notebooks, which is ideal for people to get on board without yet having an actual Jupyter instance running.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/6QNFi4EIz6U" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>

<p>Indeed, the lack of working truly offline might be a show-stopper for some, but I am more than sure that the developers are working hard to address this in future versions. Understanding the difficulties of having all Python libraries locally under the hood, I can only wish for an easy way to browse through, and perhaps, locally caching pre-rendered Jupyter notebooks for later reference. This would be great, and one won&rsquo;t have to render those to PDF or something more obscure.</p>

<h2 id="a-few-more-apps">A few more apps</h2>

<p>Before closings have decided to reiterate on my original statement that  the App Store is full of hidden gems which unfortunately, often did not really get the credit they deserve. This is the reason why I decided to share a few complementary apps that professionals from all disciplines will surely be interested in trying out. As before, those are not in any particular order, and I am not endorsing any of them, just sharing my personal opinion.</p>

<table>
<thead>
<tr>
<th>Purpose</th>
<th>Apps</th>
</tr>
</thead>

<tbody>
<tr>
<td>Taking Notes and Documenting</td>
<td><a href="http://happenapps.com/#quiver">Quiver</a>, <a href="https://ia.net/writer">iAWriter</a>, <a href="http://www.bear-writer.com/">Bear</a>, <a href="https://fsnot.es/">FSNotes</a></td>
</tr>

<tr>
<td>Source Control</td>
<td><a href="https://workingcopyapp.com/">Working Copy</a></td>
</tr>

<tr>
<td>SSH and Terminal Emulation</td>
<td><a href="https://www.termius.com/">Termius</a>, <a href="https://panic.com/prompt/">Prompt</a></td>
</tr>
</tbody>
</table>

<hr />

<p>Last but not least, here are <a href="https://speakerdeck.com/preslavrachev/data-science-on-your-ipad">my slides</a> from the talk. Until next time!</p>
]]></content>
        </item>
        
        <item>
            <title>Live-reloading of Python Modules in the Python REPL / IPython / Jupyter Console</title>
            <link>https://preslav.me/2018/04/22/live-reloading-of-python-modules/</link>
            <pubDate>Sun, 22 Apr 2018 04:14:00 +0000</pubDate>
            
            <guid>https://preslav.me/2018/04/22/live-reloading-of-python-modules/</guid>
            <description>Often, I would work on a Python module and add changes to it live, which I would then want to test immediately. Piece of cake! Add the changes and execute the script again. Well, that’s certainly a way, but as modules get bigger, they tend to import other modules, or do some preliminary setup work.
With time, I have developed this practice of opening up a Python REPL (though I recommend IPython or the Jupyter Console for that), importing my in-progress module and singling out separate functions I would like to test.</description>
            <content type="html"><![CDATA[

<p>Often, I would work on a Python module and add changes to it live, which I would then want to test immediately. Piece of cake! Add the changes and execute the script again. Well, that’s certainly a way, but as modules get bigger, they tend to import other modules, or do some preliminary setup work.</p>

<p>With time, I have developed this practice of opening up a Python REPL (though I recommend IPython or the Jupyter Console for that), importing my in-progress module and singling out separate functions I would like to test. The problem is, when I do changes to the Python code (like, add a new function), they are not immediately usable, because neither the Python REPL, nor IPython / Jupyter would auto-reload them.</p>

<h2 id="give-me-the-code">Give me the code</h2>

<p>Yes, we are coming to that</p>

<h3 id="general-way">General Way</h3>

<p>Python 3 supports inline reloading of modules using a function called, well clever enough, <code>reload</code>. It used to be a built-in function in Python 2, but this is no longer the case. If you are using Python 3.2+, you should import it extra:</p>

<p>For Python 3.2 and 3.3:</p>

<pre><code class="language-python">import importlib
importlib.reload(some_module)
</code></pre>

<p>For Python 3.4+:</p>

<pre><code class="language-python">import imp
imp.reload(some_module)
</code></pre>

<h3 id="ipython-jupyter-magic">IPython/Jupyter Magic</h3>

<p>Jupyter comes with a set of extensions only applicable to the Jupyter/iPython sessions, called <a href="https://ipython.org/ipython-doc/3/interactive/magics.html">magics</a>. One of these “magics” is the ability to load custom extensions, <a href="http://ipython.readthedocs.io/en/stable/config/extensions/index.html">one of which</a> allows auto-reloading of modules. To enable this, you should add the following two commands, before any imports:</p>

<pre><code class="language-python">%load_ext autoreload
%autoreload 2
# you can check out the the documentation for the rest of the autoreaload modes
# by apending a question mark to %autoreload, like this:
# %autoreload?
</code></pre>

<p>This way, as soon as you hit <code>Save</code> in your code editor, you should be able to re-run a Jupyter cell or an iPython line again, and if it is calling your  module, it should automatically call the latest version.</p>

<h2 id="links">Links</h2>

<ul>
<li><p><a href="https://support.enthought.com/hc/en-us/articles/204469240-Jupyter-IPython-After-editing-a-module-changes-are-not-effective-without-kernel-restart">Jupyter / IPython: After editing a module, changes are not effective without kernel restart – Enthought Knowledge Base</a></p></li>

<li><p><a href="https://stackoverflow.com/questions/5364050/reloading-submodules-in-ipython#5399339">python - Reloading submodules in IPython - Stack Overflow</a></p></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>How to Use Twitter More Efficiently with These Hidden Search Features</title>
            <link>https://preslav.me/2018/04/02/how-to-use-twitter-more-efficiently-with-these-hidden-search-features/</link>
            <pubDate>Mon, 02 Apr 2018 04:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2018/04/02/how-to-use-twitter-more-efficiently-with-these-hidden-search-features/</guid>
            <description>Twitter can be a mess sometimes. If you follow tons of people, it’s easy to get lost in the torrent of constant updates. This was one of the reasons why Twitter decided to move away from the purely chronological timeline a couple of years ago. In a move that almost ditched the diehard Twitter fans in favor of the mainstream, predominantly passive content consumers, the company started pushing more and more in favour of algorithmically adjusted timelines, much like Facebook does it.</description>
            <content type="html"><![CDATA[

<p>Twitter can be a mess sometimes. If you follow tons of people, it’s easy to get lost in the torrent of constant updates. This was one of the reasons why Twitter decided to move away from the purely chronological timeline a couple of years ago. In a move that almost ditched the diehard Twitter fans in favor of the mainstream, predominantly passive content consumers, the company started pushing more and more in favour of algorithmically adjusted timelines, much like Facebook does it.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Starting today you can choose to try our new feature, so you&#39;ll never miss important Tweets from people you follow: <a href="https://t.co/fS1axkDiUh">https://t.co/fS1axkDiUh</a></p>&mdash; Twitter (@Twitter) <a href="https://twitter.com/Twitter/status/697420917253668868?ref_src=twsrc%5Etfw">February 10, 2016</a></blockquote>


<p>A couple of years later, some might argue that this was a good move, others, that it kills the natural springing momentum which is what made Twitter what it is today. I personally tend to stay away from the algorithmic timeline, which is why I am mostly relying on TweetBot — perhaps, one of the last bastions of the real, unsavored Twitter experience.</p>

<p>To keep on top of the stream, I have devised a series of heuristics that help me filter the massive Twitter stream down to what matters to me. Down to where real, actual human discussions are happening. Because Twitter is about active engagement and not just scrolling around, right? Let me share my few tips with you.</p>

<p><strong><em>NOTE</em></strong><em>: Many of the search parameters have remained largely undocumented, so I cannot really guarantee that they will be around forever.</em></p>

<h1 id="the-basics">The Basics</h1>

<p>Since the beginning of time, there has been a <a href="https://twitter.com/search-advanced">page</a> on the Twitter website that allowed you to perform some of what they called “advanced search” operations. If you type a few queries and see how they get executed in the search box, you can deduce the syntax for a couple of basics that I am sure, most of you have learned by now:</p>

<h2 id="exact-phrase-matching"><strong>Exact phrase matching</strong></h2>

<pre><code>&quot;this query will be treated like a whole phrase&quot;
</code></pre>

<h2 id="boolean-operators"><strong>Boolean operators</strong></h2>

<pre><code>word1 word2 OR word3 -word4 -word5
</code></pre>

<p><code>Word1</code> and <code>word2</code> will be treated as “must be present”, whereas <code>word3</code> is optional, and <code>word4</code> and <code>word5</code> will not be present in any of the search results.</p>

<p>As with any syntax that allows boolean expressions, you can also put words in parentheses, if you think this will help make the syntax easier to understand. In my experience, parentheses actually made the syntax more complex. At the end, it is up to you. All you have to remember is that if you don’t explicitly put an OR or a minus before a word, the relation between words is always AND, all of them must appear in the end result.</p>

<h1 id="social-engagement-thresholds">Social Engagement Thresholds</h1>

<p>Moving to the less documented stuff. How many of you did you know that you can apply minimum thresholds of favorites, retweets, and even replies as part of your search?</p>

<pre><code>my search query min_retweets:5 min:faves:5 min_replies:5
</code></pre>

<p>How cool is that? I discovered this myself a couple of years ago, while hacking around TweetDeck. It was the first Twitter app that allowed something like that, so I did not hesitate to look under the hood. Turns out, it was pretty simple. All you need to do, is apply any of the following as part of your search query, and results will get filtered to only those that that match desired level of engagement. Of course, you will have to play around adjusting the desired numbers. Depending on the popularity of the rest of your search, the result might return too little or too much. You have to also keep in mind that the different actions were designed with different intentions in mind, and this will reflect in your search results. While the number of faves and retweets might be an indication that the particular tweet is viral (ideal for news and sudden events), the number of replies indicates narrative or content provoking a discussion.</p>

<p>Two tiny things before I move on:</p>

<ol>
<li><p>As with the rest of the syntax, you can apply boolean logic operators here too. So the following query:</p>

<pre><code>my search query min_retweets:5 OR min:faves:5
</code></pre>

<p>will return results that match either of the engagement thresholds, or both.</p></li>

<li><p>The results are limited back in time to the most recent 10 days.</p></li>
</ol>

<h2 id="search-in-lists">Search in Lists</h2>

<p>Another relatively unknown keyword is the <code>list</code> one. It allows you to filter your search results only to tweets written by members of a particular list. Keeping people in thematically curated lists instead of, or as a supplement to following, is a whole other topic, which I’ll elaborate on in another post. Generally, if you organize people around topics, it will be way easier for you follow streams where things roughly revolve around the same topic, instead of trying to stay up-to-date with your timeline.</p>

<p>Back to the syntax, this is how you can restrict you search query to a given list:</p>

<pre><code>list:username/list_name my search query
</code></pre>

<p>Needless to say, Boolean logic, as well as all the previous syntax rules apply here too.</p>

<h2 id="content-type-filters-and-excludes">Content Type Filters and Excludes</h2>

<p>The <code>filter</code> keyword allows you to specify whether:</p>

<ol>
<li>tweet results include a certain feature:</li>
<li><code>filter:links</code> - links to Web sites</li>
<li><code>filter:news</code> - tweets from or containing links to identified news sources</li>
<li><code>filter:mentions</code> - tweets containing <code>@mentions</code> inside the tweet content</li>
<li><code>filter:replies</code> - tweets that are explicit replies. Keep in mind that this has no effect on the tweet containing <code>mentions</code>. Those should be explicitly filtered with the above mentioned <code>filter:mentions</code></li>
<li><code>filter:media</code> - Tweets that include any kind of media. These might be native videos, images, audios or links to the same, coming from external Web sites.</li>
<li><code>filter:images</code> - Tweets that contain any kind of images. Those might include ones uploaded via Twitter, as well as ones coming from external Web sites. For photos, explicitly loaded via the Twitter app or the API, use <code>filter:twimg</code></li>
<li><code>filter:videos</code> - Tweets that include either attached videos, or links to externally hosted ones (e.g. form YouTube, Vimeo, etc). If you want to see videos, explicitly loaded via the Twitter app or the API, use <code>filter:native_video</code></li>
<li><code>filter:quote</code> - returns only quoted tweets.</li>
<li><code>filter:verified</code> lists only tweets written by verified accounts, while <code>filter:safe</code> will return ones that do not contain obscene words, imagery, or come from accounts known to produce such content.</li>
</ol>

<p>Adding a <code>-</code> to any of those filters will essentially negate the meaning, and can be used for filtering out posts without media, links, etc.</p>

<h1 id="examples">Examples</h1>

<h2 id="example-1-interesting-discussions-from-the-apple-developer-community">Example #1: Interesting discussions from the Apple developer community</h2>

<pre><code>list:preslavrachev/ios-macos-developers exclude:retweets exclude:replies min_retweets:10 swift OR apple OR iOS OR objC
</code></pre>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  

  <div class="embed-image"
    style="flex: 1 1 0%; background: rgba(0, 0, 0, 0) linear-gradient(#eaeaea 0%, #73747b 100%) repeat scroll 0% 0%; min-height: 120px;">
  </div>

  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://twitter.com/search?src=typd&amp;amp;q=list%3Apreslavrachev%2Fios-macos-developers%20exclude%3Aretweets%20exclude%3Areplies%20min_retweets%3A10%20filter%3Alinks%20swift%20OR%20apple%20OR%20iOS%20OR%20objC">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Anzeigen, was jetzt gerade passiert.</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Durchsuche Twitter, um die neuesten Nachrichten und globale Events schneller zu finden. Finde beliebte Leute, Hashtags und Fotos für jedes Thema, das Du Dir vorstellen kannst.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://twitter.com/search?src=typd&amp;amp;q=list%3Apreslavrachev%2Fios-macos-developers%20exclude%3Aretweets%20exclude%3Areplies%20min_retweets%3A10%20filter%3Alinks%20swift%20OR%20apple%20OR%20iOS%20OR%20objC">https://twitter.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<h2 id="example-2-top-bitcoin-news-from-verified-german-sources">Example #2: Top Bitcoin news from verified German sources</h2>

<p>If you want to see what the mainstream press (e.g. in Germany) writes about Bitcoin, write something like this:</p>

<pre><code>bitcoin filter:news filter:verified -filter:quotes -filter:hashtags lang:de
</code></pre>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  

  <div class="embed-image"
    style="flex: 1 1 0%; background: rgba(0, 0, 0, 0) linear-gradient(#eaeaea 0%, #73747b 100%) repeat scroll 0% 0%; min-height: 120px;">
  </div>

  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://twitter.com/search?src=typd&amp;amp;q=bitcoin%20filter%3Anews%20-filter%3Aquotes%20filter%3Averified%20-filter%3Ahashtags%20lang%3Ade">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Anzeigen, was jetzt gerade passiert.</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Durchsuche Twitter, um die neuesten Nachrichten und globale Events schneller zu finden. Finde beliebte Leute, Hashtags und Fotos für jedes Thema, das Du Dir vorstellen kannst.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://twitter.com/search?src=typd&amp;amp;q=bitcoin%20filter%3Anews%20-filter%3Aquotes%20filter%3Averified%20-filter%3Ahashtags%20lang%3Ade">https://twitter.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<h1 id="links">Links</h1>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://www.labnol.org/files/twitter.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.labnol.org/internet/twitter-search-tricks/13693/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        The Best Twitter Search Tricks - Digital Inspiration</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Search Twitter like a pro with this list of useful but lesser known Twitter search operators.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.labnol.org/internet/twitter-search-tricks/13693/">https://www.labnol.org | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Pandas: Finding a Row Where One of Its Values Is at a Minimum/Maximum</title>
            <link>https://preslav.me/2018/02/16/pandas-finding-a-row-where-one-of-its-values-is-at-a-minimum-maximum/</link>
            <pubDate>Fri, 16 Feb 2018 06:58:00 +0000</pubDate>
            
            <guid>https://preslav.me/2018/02/16/pandas-finding-a-row-where-one-of-its-values-is-at-a-minimum-maximum/</guid>
            <description>Often, we will want to get to get a specific row, which marks the minimum or maximum of one of its columns. Let&amp;rsquo;s suppose we have the SF Salaries dataset from Kaggle. We want to find the employee name, with the largest total pay benefits. The experience with writing NumPy/Pandas filter conditions will quickly let us produce the following version:
sal[sal[&#39;TotalPayBenefits&#39;] == sal[&#39;TotalPayBenefits&#39;].max()][&#39;EmployeeName&#39;]  which is absolutely valid, but is it the only option?</description>
            <content type="html"><![CDATA[<p>Often, we will want to get to get a specific row, which marks the minimum or maximum of one of its columns. Let&rsquo;s suppose we have the <a href="https://www.kaggle.com/kaggle/sf-salaries">SF Salaries dataset from Kaggle</a>. We want to find the employee name, with the largest total pay benefits. The experience with writing NumPy/Pandas filter conditions will quickly let us produce the following version:</p>

<pre><code class="language-python">sal[sal['TotalPayBenefits'] == sal['TotalPayBenefits'].max()]['EmployeeName']
</code></pre>

<p>which is absolutely valid, but is it the only option? I could imagine that that in a large dataset, there would be quite a lot of comparison involved, plus the creation of a whole new data series (the filter condition). Is there perhaps a more performant one? How about trying out <a href="http://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.DataFrame.idxmax.html">idmax()</a> (or, for those coming from NumPy, <a href="http://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.DataFrame.argmax.html">argmax()</a>, both do the same). By given a column, the function will return the index of the data frame, where it is at its highest.</p>

<pre><code class="language-python">sal.loc[sal['TotalPayBenefits'].idxmax()]['EmployeeName']

sal.loc[sal['TotalPayBenefits'].argmax()]['EmployeeName']
</code></pre>

<p>I did a quick performance check, and indeed, idmax/argmax turn out twice as fast:</p>

<pre><code class="language-bash"># the original filter condition
815 µs ± 11.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

# idmax()
402 µs ± 7.61 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

# argmax
404 µs ± 8.81 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>[QUOTE]: Plastic Synapses Offer Hardware Alternative to Neural Networks</title>
            <link>https://preslav.me/2018/01/06/quote-plastic-synapses/</link>
            <pubDate>Sat, 06 Jan 2018 13:34:36 +0000</pubDate>
            
            <guid>https://preslav.me/2018/01/06/quote-plastic-synapses/</guid>
            <description>via Plastic synapses offer hardware alternative to neural networks | ArsTechnica
 A synapse—the connection between two neurons—consumes at most 100 femtoJoules per event. Once you realize that the entire human body is about the equivalent of an 120W light bulb, you can see that the efficiency of the brain is just astounding. [&amp;hellip;] This result has implications. If this research does turn out to be the way forward, neural networks will not operate faster than our own brains.</description>
            <content type="html"><![CDATA[<p>via <a href="https://arstechnica.com/science/2017/03/plastic-synapses-offer-hardware-alternative-to-neural-networks/">Plastic synapses offer hardware alternative to neural networks | ArsTechnica</a></p>

<blockquote>
<p>A synapse—the connection between two neurons—consumes at most 100 femtoJoules per event. Once you realize that the entire human body is about the equivalent of an 120W light bulb, you can see that the efficiency of the brain is just astounding. [&hellip;]
This result has implications. If this research does turn out to be the way forward, neural networks will not operate faster than our own brains. And it will take a lot of development before artificial neural networks are as interconnected as the neurons of our own brains. If neural networks are going to show an advantage, it has to come from other directions.</p>
</blockquote>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://cdn.arstechnica.net/wp-content/uploads/2017/03/synapse-760x380.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://arstechnica.com/science/2017/03/plastic-synapses-offer-hardware-alternative-to-neural-networks/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Plastic synapses offer hardware alternative to neural networks</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Plastic man will have plastic brain, probably does feel pain.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://arstechnica.com/science/2017/03/plastic-synapses-offer-hardware-alternative-to-neural-networks/">https://arstechnica.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Debugging Network Calls in React Native Using the Chrome Debugger</title>
            <link>https://preslav.me/2017/03/26/debugging-network-calls-in-react-native-using-the-chrome-debugger/</link>
            <pubDate>Sun, 26 Mar 2017 05:25:00 +0000</pubDate>
            
            <guid>https://preslav.me/2017/03/26/debugging-network-calls-in-react-native-using-the-chrome-debugger/</guid>
            <description>TL;DR! Just give me the code In your index.js file (or your platform-specific index file for that matter), simply add the following line to the top, directly after the import statements:
XMLHttpRequest = GLOBAL.originalXMLHttpRequest ? GLOBAL.originalXMLHttpRequest : GLOBAL.XMLHttpRequest;  You will also need a Chrome plugin that overrides CORS. I use CORS Toggle. You may also decide to skip the plugin and start Chrome with CORS disabled:
chrome --disable-web-security  then, as usually, start remote debugging from your app, and open: http://localhost:8081/debugger-ui on your computer.</description>
            <content type="html"><![CDATA[

<h2 id="tl-dr-just-give-me-the-code">TL;DR! Just give me the code</h2>

<p>In your <code>index.js</code> file (or your platform-specific index file for that matter), simply add the following line to the top, directly after the <code>import</code> statements:</p>

<pre><code class="language-javascript">XMLHttpRequest = GLOBAL.originalXMLHttpRequest ? 
  GLOBAL.originalXMLHttpRequest : GLOBAL.XMLHttpRequest;
</code></pre>

<p>You will also need a Chrome plugin that overrides <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">CORS</a>. I use <a href="https://chrome.google.com/webstore/detail/cors-toggle/omcncfnpmcabckcddookmnajignpffnh?hl=en">CORS Toggle</a>. You may also decide to skip the plugin and start Chrome with CORS disabled:</p>

<pre><code class="language-bash">chrome --disable-web-security
</code></pre>

<p>then, as usually, start remote debugging from your app, and open: <code>http://localhost:8081/debugger-ui</code> on your computer.</p>

<p>That&rsquo;s it. Please, make sure to never rely completely on the network infrastructure of the Chrome debugger. Many networking problems may be specific to your device/simulator, and will not be caught by the debugger.</p>

<h2 id="ok-now-the-longer-explanation">OK, now the longer explanation</h2>

<p>One of the big advantages of React Native is the ease of debugging your code. When running an app in development mode, one can debug it remotely, using the well familiar Chrome DevTools. Logging to the console and setting breakpoints in the code work just as if the app were running in a normal browser&rsquo;s window.</p>

<p>It is, therefore, strange to many RN starters, why one of the core functionalities of the Chrome Inspector, namely the network call interception, is not available. Instead, if a network error occurs, all the JavaScript code gets access to, is an Error object that simply says &ldquo;Network Error&rdquo;.</p>

<p>To fully explain why this is so is out of the scope of this post. There is a great Medium article that explains in detail how the &ldquo;magic&rdquo; behind the RN remote debugging works. I totally recommend you read, regardless of your experience with React and RN.</p>

<p>Long story short, when debugging RN remotely, the JavaScript code actually gets executed in the browser, and not on the device. This allows you to interrupt the flow with breakpoints, or log the console output in the Chrome DevTools window. While the JS code gets executed in the browser, the native calls happen on the device itself. The browser and the device running the app keep a WebSocket connection open and synchronize the code execution on every step.</p>

<p>All the native calls run on the device itself, and executing a network call makes no difference. As such, it is not an easy task to make network traces appear in the Inspector window. At least, not without overriding the default platform APIs (for each of the supported platforms) and communicate every state change with the browser. I am sure that the core dev team is working on a solution, and will deliver it in a future release.</p>

<p>Until then, you can test network calls by replacing the default implementation of <code>XMLHttpRequest</code> and use the one provided by the browser. As you saw in the beginning, it turns out that this is surprisingly simple. Once you do it, override the browser&rsquo;s default CORS rules, and reload the app, you should start seeing network requests in the Chrome Inspector. As I already pointed out, though, the Chrome Inspector can be helpful inasmuch as the requests and responses are concerned. It won&rsquo;t help you prevent issues with the native network infrastructure of your emulator/device. To inspect those, you will rather have to use a proxy, such as <a href="https://www.charlesproxy.com/">Charles</a>, or jump into tracing the native log files.</p>
]]></content>
        </item>
        
        <item>
            <title>[Quote]: 3 Ways to Better Understand Your Emotions</title>
            <link>https://preslav.me/2017/02/28/quote-three-ways-to-better-understand-your-emotions/</link>
            <pubDate>Tue, 28 Feb 2017 11:01:46 +0200</pubDate>
            
            <guid>https://preslav.me/2017/02/28/quote-three-ways-to-better-understand-your-emotions/</guid>
            <description>Here is a quote from:
@media (max-width: 640px) { .embed-image { min-width: 100%; } }   3 Ways to Better Understand Your Emotions  Naming them is an important first step. https://hbr.org |  Created with NoEmbed     Anger and stress are two of the emotions we see most in the workplace — or at least those are the terms we use for them most frequently. Yet they are often masks for deeper feelings that we could and should describe in more nuanced and precise ways, so that we develop greater levels of emotional agility, a critical capability that enables us to interact more successfully with ourselves and the world</description>
            <content type="html"><![CDATA[<p>Here is a quote from:</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://hbr.org/resources/images/hbr_opengraph_940x490.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://hbr.org/2016/11/3-ways-to-better-understand-your-emotions">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        3 Ways to Better Understand Your Emotions</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Naming them is an important first step.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://hbr.org/2016/11/3-ways-to-better-understand-your-emotions">https://hbr.org | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<blockquote>
<p>Anger and stress are two of the emotions we see most in the workplace — or at least those are the terms we use for them most frequently. Yet they are often masks for deeper feelings that we could and should describe in more nuanced and precise ways, so that we develop greater levels of emotional agility, a critical capability that enables us to interact more successfully with ourselves and the world</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Securing your ElasticSearch instances</title>
            <link>https://preslav.me/2017/02/03/securing-your-elasticsearch-instances/</link>
            <pubDate>Fri, 03 Feb 2017 05:29:00 +0000</pubDate>
            
            <guid>https://preslav.me/2017/02/03/securing-your-elasticsearch-instances/</guid>
            <description>Securing your ElasticSearch instances and keeping all the fun Often, we choose convenience over security. Many modern tools such as MongoDB and ElasticSearch, have grown in popularity, partly because of their easy-to-set-up-and-tinker-with nature. Just spin off an instance, point your browser to the right URL and you&amp;rsquo;re ready to start sending queries.
Unfortunately, one thing comes for another, and as we have recently seen, ElasticSearch left in the open can be a vulnerable target, same as MongoDB was in its heyday.</description>
            <content type="html"><![CDATA[

<h3 id="securing-your-elasticsearch-instances-and-keeping-all-the-fun">Securing your ElasticSearch instances and keeping all the fun</h3>

<p>Often, we choose convenience over security. Many modern tools such as MongoDB and ElasticSearch, have grown in popularity, partly because of their easy-to-set-up-and-tinker-with nature. Just spin off an instance, point your browser to the right URL and you&rsquo;re ready to start sending queries.</p>

<p>Unfortunately, one thing comes for another, and as <a href="http://www.zdnet.com/article/elasticsearch-ransomware-attacks-now-number-in-the-thousands/">we have recently seen</a>, ElasticSearch left in the open can be a vulnerable target, same as MongoDB was in its heyday. In light of the <a href="http://www.zdnet.com/article/elasticsearch-ransomware-attacks-now-number-in-the-thousands/">recent attacks</a> on many open ElasticSearch instances across the world, I decided to share a quick tip on how to set remote ES instances, and keep them secure, by not compromising on its easy-to-play-with nature.</p>

<h2 id="part-one-restricting-the-access-to-your-elasticsearch-instance">Part One: Restricting the access to your ElasticSearch instance</h2>

<p>Let&rsquo;s start. The easiest way to setup an ElasticSearch instance is <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html">spinning up a container</a> off the default Docker image:</p>

<pre><code class="language-bash">docker pull docker.elastic.co/elasticsearch/elasticsearch:&lt;VERSION&gt;

docker run -p 9200:9200 -e &quot;http.host=0.0.0.0&quot; -e &quot;transport.host=127.0.0.1&quot; elasticsearch:&lt;VERSION&gt;
</code></pre>

<p>Running the above line, will create a portion mapping from 9200 within the container, to port 9200 on the host machine. One problem here, is that by doing so, it also exposes it to the outside world. This could easily be seen by running <code>iptables</code> against your host:</p>

<pre><code class="language-bash">iptables -t nat -L -n

# Outputs
...
target     prot opt source               destination
DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:9200 to:XXX.XXX.XXX.XXX:9200
...

</code></pre>

<p>Indeed, Docker takes the heavy-lifting of configuring your <code>iptables</code> firewall, but often, this may result in a configuration which is too permissive. What one should do instead, is provide a specific IP to the port mapping configuration. Thankfully, Docker supports this, so all we have to do is modify the above command, using the <code>IP:host_port:container_port</code> mapping:</p>

<pre><code class="language-bash">docker run -p 127.0.0.1:9200:9200 -e &quot;http.host=0.0.0.0&quot; -e &quot;transport.host=127.0.0.1&quot; elasticsearch:&lt;VERSION&gt;
</code></pre>

<p>Perfect! Putting the <code>127.0.0.1</code> will guarantee that the container will be available inside the host machine, but not accessible outside. A quick proof of this is looking at iptables again:</p>

<pre><code class="language-bash">target     prot opt source               destination
DNAT       tcp  --  0.0.0.0/0            127.0.0.1            tcp dpt:9200 to:XX.XXX.XXX.XXX:9200
</code></pre>

<p>if you point your browser to port 9200 you should not be able to see anything, but executing `curl 127.0.0.1:9200 from inside the host machine should work.</p>

<h2 id="part-two-accessing-your-elasticsearch-instance-in-a-secure-manner">Part Two: Accessing your ElasticSearch instance in a secure manner</h2>

<p>What we did was all fine, but how do access our ElasticSearch instance now, without losing the flexibility of quickly testing stuff on ES? Easy, using *NIX&rsquo;s Swiss Army Knife - <code>SSH</code>. SSH is a tool most programmers use on a daily basis, but fewer of them are aware that SSH allows for local and remote port forwarding. What this means is that SSH can create an encrypted tunnel between your machine and your server, such that you can accesses services running remotely, as if they were running on loclahost (local forwarding). There is also remote forwarding, which alternatively, allows you to securely access locally running services from your remote server.</p>

<p>While we are going to use local port forwarding in our case, both are analogous to each other:</p>

<pre><code class="language-bash">ssh -L/-R &lt;PORT_ON_THE_LOCAL/REMOTE_MACHINE&gt;:&lt;HOST_TO_MAP_TO&gt;:&lt;PORT_ON_THE_REMOTE/LOCAL_MACHINE&gt; &lt;USERNAME&gt;@&lt;REMOTE_IP&gt;
</code></pre>

<p>In our particular case, this looks like this:</p>

<pre><code class="language-bash">ssh -L 9200:127.0.0.1:9200  user@XX.XXX.XXX.XXX
</code></pre>

<p>This basically says: map my local port <code>9200</code> to a call to <code>127.0.0.1:9200</code> on the <code>XX.XXX.XXX.XXX</code> server. When you point your browser to <code>http://localhost:9200</code>, you should now see the familiar ElasticSearch output, even though, as before <code>XX.XXX.XXX.XXX:9200</code> returns nothing. You can let the above command run in the background and run as a daemon.</p>

<h2 id="conclusion">Conclusion</h2>

<p>These two steps are all you need, in order to keep enjoying the freedom of playing with ElasticSearch or MongoDB, but doing it in a fully secure manner. This recipe can be applied to just about any service. And you really don&rsquo;t need Docker even. The fact that I mentioned it in part one, is because it makes setting up easy, and also saves you from having to tinker with <code>iptables</code> yourselves.</p>

<p><strong>NOTE:</strong> Please, keep in mind that while running a SSH tunnel is just about perfect for testing and development purposes, it may not be an optimal solution for production. The reason for this is the latency caused by en/decrypting the data and shuffling it through the tunnel. It may become a bottleneck with many incoming requests running in parallel. I am yet to stress-test this setup and will share my observations in a further post. I will also share some more ideas on how to access an ElasticSearch instance securely, but also in a productive manner.</p>
]]></content>
        </item>
        
        <item>
            <title>Kotlin Basics: apply() and copy()</title>
            <link>https://preslav.me/2016/06/26/kotlin-basics-apply-and-copy/</link>
            <pubDate>Sun, 26 Jun 2016 12:56:00 +0000</pubDate>
            
            <guid>https://preslav.me/2016/06/26/kotlin-basics-apply-and-copy/</guid>
            <description>Without any doubt, Java is a verbose language. This verbosity of the language makes it easy to understand Java code by new programmers. It is though one of the reasons, why many Java programmers find writing Java code tedious. Kotlin brings a touch of succinctness in places, where even programmers new to Java, may find code unnecessarily over-bloated.
How many times have you had to do the same thing over and over again:</description>
            <content type="html"><![CDATA[

<p>Without any doubt, Java is a verbose language. This verbosity of the language makes it easy to understand Java code by new programmers. It is though one of the reasons, why many Java programmers find writing Java code tedious. Kotlin brings a touch of succinctness in places, where even programmers new to Java, may find code unnecessarily over-bloated.</p>

<p>How many times have you had to do the same thing over and over again:</p>

<pre><code class="language-java">private A updateA(A objA, B objB) {
    objA.setC(objB.getC());
    objA.setD(objB.getD());
    return objA;
}
</code></pre>

<p>Having an object, you want to modify some of its properties and simply return the same object. In Java, you can&rsquo;t do this in a single chained fashion. In Kotlin, you can squeeze the above method to the following single line of code:</p>

<pre><code class="language-java">fun updateA(objA: A, objB: B): A = objA.apply { c = objB.c; d = objB.d }
</code></pre>

<h3 id="apply">apply()</h3>

<p>By definition, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/apply.html"><code>apply</code></a> accepts a function, and sets its scope to that of the object on which apply has been invoked. This means that no explicit reference to the object is needed. <code>Apply()</code> can do much more than simply setting properties of course. It is a transformation function, capable of evaluating complex logic before returning. At the end, the function simply returns the same object (with the added changes), so one can keep using it on the same line of code.</p>

<p><strong>Note:</strong> Please, note as well the direct use of properties instead of explicitly calling getters and setters. This is not a bad practice, since Kotlin implicitly invokes provided getters and setters of a property, when working with the property (similar to C#).</p>

<h3 id="copy">copy()</h3>

<p>Please, remember that using apply on an object is NOT a thread-safe operation, and mutates the state of the object. If you want to retain the original object and return an immutable copy of it, you can use the function <a href="https://kotlinlang.org/docs/reference/data-classes.html#copying"><code>copy()</code></a>, provided in all instances of data classes.</p>

<p>Assuming that your class contains only data (usually a good practice to separate logic from data), you can turn it into a <a href="https://kotlinlang.org/docs/reference/data-classes.html">data class</a>:</p>

<pre><code class="language-java">data class User(val name: String, val age: Int)
</code></pre>

<p>Data classes have a few advantages, and one of them is definitely the <a href="https://kotlinlang.org/docs/reference/data-classes.html#copying"><code>copy()</code></a> function, provided to each and every instance. It not only provides a copy of the original object, leaving its state intact, but also allows setting new values to some of its properties at copy-time:</p>

<pre><code class="language-java">val user1 = User(&quot;John Smith&quot;, 24)
val user2 = user1.copy(age = 31)
</code></pre>

<p>Kotlin supports <a href="http://blog.preslav.me/2016/05/29/kotlin-tips-named-parameters-default-arguments/">named parameters</a>, known from other languages, such as Python and Scala. In this case, they make life much easier, as all you need to do, is specify the name of the particular property (or properties) you want to modify by copying.</p>

<p>At the end you can combine the power and succinctness of both <code>apply()</code> and <code>copy()</code> by calling apply after copying:</p>

<pre><code class="language-java">val user2 = user1.copy(age = 31).apply { // execute some logic here }
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>What’s with the 50/72 rule?</title>
            <link>https://preslav.me/2015/02/21/what-s-with-the-50-72-rule/</link>
            <pubDate>Sat, 21 Feb 2015 06:59:00 +0000</pubDate>
            
            <guid>https://preslav.me/2015/02/21/what-s-with-the-50-72-rule/</guid>
            <description>It is part of common sense to assume that the worthiest commit messages lie far from any extremes. Years ago, I often fell in the trap of hastily sending a commit after commit, annoyed by the fact that I have to add a summary to it (let alone a description). I&amp;rsquo;ve seen many projects whose commit summaries consist primarily of one-word verbs like [FIX], [CLEAN], [TEST], etc.
They don&amp;rsquo;t tell much do they?</description>
            <content type="html"><![CDATA[<p>It is part of common sense to assume that the worthiest commit messages lie far from any extremes. Years ago, I often fell in the trap of hastily sending a commit after commit, annoyed by the fact that I have to add a summary to it (let alone a description). I&rsquo;ve seen many projects whose commit summaries consist primarily of one-word verbs like [FIX], [CLEAN], [TEST], etc.</p>

<p>They don&rsquo;t tell much do they? Six months down the road, you&rsquo;d be scratching your head, trying to remember what you were thinking exactly six months before, when you wrote that commit.</p>

<p>On the other hand are the &ldquo;novels&rdquo;. Some programmers go into much detail of what they&rsquo;ve done, both in the summary, and in the description. This makes it difficult to read, and understand later on, what they did exactly.</p>

<p>Being verbose is by no means a bad thing. In fact, programmers are encouraged to put lengthy details about their commits, but only in the description. The summary is what helps you and other programmers to skim through thousands of commits, so it must be both concise and insightful.</p>

<p>In a <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">2008 blog post</a>, <a href="https://twitter.com/tpope">tpope</a>, described a system for creating commit messages, which I started calling simply, the <em>&ldquo;50 / 72&rdquo;</em> rule. The rules of the game are simple:</p>

<ol>
<li>The first line of your commit message must be maximum 50 characters long. No more, and (ideally), no less.</li>
<li>Leave a blank line</li>
<li>Start writing your description. The description can be as verbose as it suits you. Each line in your description should though wrap at the 72nd mark.</li>
</ol>

<p>Git is smart enough to distinguish the first line of your commit message as your summary. In fact, if you try <em>git shortlog</em>, instead of <em>git log</em>, you will see a long list of commit messages, consisting of the id of the commit, and the summary only. The reason for wrapping your description lines at the 72nd mark is that <em>git log</em> adds a padding of 4 blank spaces when displaying the commit message. To center the message perfectly, and make it read well on an 80-column terminal, you&rsquo;d want to leave space for 4 more blank spaces at right side. That&rsquo;s where 72 comes from.</p>

<p>What about the 50? An analysis of the average length of commit messages in the linux kernel suggests that the ideal size of a git commit summary is around 50 characters in length:</p>

<p><img src="/images/2015/february/0_Hm0dO0UnjFBprfV-.png" alt="" />Most commit messages average around 50 characters in length</p>

<p>Most code editors display the current line and column number that the cursor is at. Many support automatic wrap-line settings. If you are using GitHub&rsquo;s desktop app (as I used to), it will also show you warnings when you are over the limit.</p>

<p>Writing a great commit summary is like writing a great tweet, only shorter. Id suggest to try and write your thoughts at first, to see how long it gets. Then you&rsquo;s paraphrase it, and put the extra content (the details) in the summary. Try to use the 50-column mark as a guideline for your thoughts. Try to reach as close as possible to it, without going over. Remember, short commit messages do not help, too long don&rsquo;t either.</p>

<p>How does your team compare to the linux kernel contributors? You can check yourselves, using the code below:</p>

<p>You can use the data and plot it on a real histogram, using <a href="http://stackoverflow.com/a/5328669/1107412">matplotlib</a>. Many thanks to <a href="http://stackoverflow.com/users/209050/mgalgs">mgalgs</a> for posting the <a href="http://stackoverflow.com/a/11993051/1107412">code</a>, and the <a href="http://stackoverflow.com/a/11993051/1107412">histogram</a> originally on <a href="http://stackoverflow.com/a/11993051/1107412">StackOverflow</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Gulp vs Grunt. Why one? Why the Other?</title>
            <link>https://preslav.me/2015/01/06/gulp-vs-grunt-why-one-why-the-other/</link>
            <pubDate>Tue, 06 Jan 2015 06:29:00 +0000</pubDate>
            
            <guid>https://preslav.me/2015/01/06/gulp-vs-grunt-why-one-why-the-other/</guid>
            <description>So you&amp;rsquo;ve been trying to wrap your heads around and decide between Grunt and Gulp? Yeah, me too, been there, done that. In my case, the decision wasn&amp;rsquo;t really hard. I&amp;rsquo;ve never had strong feelings for Grunt, and for a long time, I used a custom made ANT script. I used to copy it over to every new project, and it helped me with basic tasks — moving, copying, cleaning, linting, minifying, etc.</description>
            <content type="html"><![CDATA[

<p>So you&rsquo;ve been trying to wrap your heads around and decide between Grunt and Gulp? Yeah, me too, been there, done that. In my case, the decision wasn&rsquo;t really hard. I&rsquo;ve never had strong feelings for Grunt, and for a long time, I used a custom made ANT script. I used to copy it over to every new project, and it helped me with basic tasks — moving, copying, cleaning, linting, minifying, etc. At one point, I switched over to Grunt, but my workflow essentially mimicked the one I had already created using ANT.</p>

<p>So, when Gulp came out, I was right at the point of willing to dive deep into JS-based task runners. Plus, it quickly became the darling of a large portion of the JS community, and many projects, like Ionic, adopted it right away. So, my choice was easy.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Getting started with Gulp <a href="http://t.co/qKo0rOXGT4">http://t.co/qKo0rOXGT4</a> &quot;Gulp is a streaming build system&quot;. Think Grunt, but faster and less config.</p>&mdash; Sindre Sorhus (@sindresorhus) <a href="https://twitter.com/sindresorhus/status/420272334281662464?ref_src=twsrc%5Etfw">January 6, 2014</a></blockquote>


<p>Yet, writing Grunt off for all the wrong reasons does not feel right. It is still a great tool, with a bustling community around it, so it makes a lot of sense to make a proper comparison between Grunt and Gulp.</p>

<h1 id="the-differences">The Differences</h1>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/Grunt?src=hash&amp;ref_src=twsrc%5Etfw">#Grunt</a> vs <a href="https://twitter.com/hashtag/Gulp?src=hash&amp;ref_src=twsrc%5Etfw">#Gulp</a>: <a href="http://t.co/eaaolHHIl6">http://t.co/eaaolHHIl6</a> (piping is beautiful!) This is so reminds me of <a href="https://twitter.com/hashtag/Maven?src=hash&amp;ref_src=twsrc%5Etfw">#Maven</a> vs <a href="https://twitter.com/hashtag/Gradle?src=hash&amp;ref_src=twsrc%5Etfw">#Gradle</a>. Always voted for code over config</p>&mdash; evgeny_goldin (@evgeny_goldin) <a href="https://twitter.com/evgeny_goldin/status/521003643802513409?ref_src=twsrc%5Etfw">October 11, 2014</a></blockquote>


<p>There are two main differences between Grunt and Gulp:</p>

<ol>
<li>Grunt focuses on configuration, while Gulp focuses on code</li>
<li>Grunt was built around a set of <a href="http://bocoup.com/weblog/introducing-grunt/">built-in, and commonly used tasks</a>, while Gulp came around with the idea of enforcing nothing, but how community-developed micro-tasks should connect to each other</li>
</ol>

<p>That is not to say that Grunt does not support community extensions. Of course, Grunt has supported creating custom plugins since the beginning, and I am sure that one can find a plugin for just about anything one needs. It was just the nature of the built-in tasks that made me stick around a little longer with my ANT script. In retrospect, I have to admit that I was wrong that for being sceptical about it becoming as popular as it is today. In early 2015, Grunt still holds a larger community than Gulp, despite the latter catching up fast.</p>

<p>Every task in Grunt is an array of different plugin configurations, that simply get executed one after another, in a strictly independent, and sequential fashion:</p>

<pre><code class="language-javascript">grunt.initConfig({
    clean: {
    src: ['build/app.js', 'build/vendor.js']
    },
    
    copy: {
    files: [{
        src: 'build/app.js',
        dest: 'build/dist/app.js'
    }]
    }
    
    concat: {
    'build/app.js': ['build/vendors.js', 'build/app.js']
    }
    
    // ... other task configurations ...
    
});

grunt.registerTask('build', ['clean', 'bower', 'browserify', 'concat', 'copy']);
</code></pre>

<p>In this case, &lsquo;clean&rsquo; and &lsquo;concat&rsquo; must be configured before the &lsquo;build&rsquo; task is registered. Each task configuration is independent from all the rest. When dealing with IO, such as files, each task accesses the file separately — opening the file, applying the changes, and closing the file. Therefore, almost every task requires a source and destination to be specified. This not only doubles the effort for the developer, but it also makes Grunt relatively slower thanGulp.</p>

<p>Gulp on the other hand is all about streams and building complex pipelines with ease. It uses node.js&rsquo; streams, and executes faster, since it does not open/close files, or create intermediary copies all the time. This is a sample task declaration, taken straight from Ionic&rsquo;s gulpfile.js</p>

<pre><code class="language-javascript">//import the necessary gulp plugins
var gulp = require('gulp');
var sass = require('gulp-sass');
var minifyCss = require('gulp-minify-css');
var rename = require('gulp-rename');

//declare the task
gulp.task('sass', function(done) {
    gulp.src('./scss/ionic.app.scss')
    .pipe(sass())
    .pipe(gulp.dest('./www/css/'))
    .pipe(minifyCss({
        keepSpecialComments: 0
    }))
    .pipe(rename({ extname: '.min.css' }))
    .pipe(gulp.dest('./www/css/'))
    .on('end', done);
});
</code></pre>

<p>One thing that is immediately noticed here, is the lack of any up-front configuration, especially, specifying a source and destination. It is clear how one processor plugs into another. Just like LEGO bricks, plugins fit right into each other. The magic happens because of the object format that plugins exchange, the so called <a href="https://github.com/wearefractal/vinyl">Vinyl</a>. Vinyl is just an abstraction that describes a virtual file object — one that could refer to an existing file on the FS, a stream, or simply dead-ends with a null.</p>

<p>The use of streams is also a part of how gulp plugins are developed. In unison with the UNIX philosophy, gulp plugins must <a href="https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md"><strong>try to do one thing well</strong></a>. In simple words, if your plugin tries to do way too many things, better split it into several smaller plugins, and try to use as many readily developed plugins as you can. Let the complexity reside within the task orchestration, not the plugin body.</p>

<p>Both Grunt and Gulp have their own specifics when developing extensions. Both will make you sacrifice a bit of the beauty of your code, for the sake of plugging it into each build system. Truth is though that Gulp plugins feel one idea less coupled than their Grunt counterparts. This is because every Gulp plugin is first and foremost a legit node.js streaming module. With a bit of fitting, it can be re-used in other pieces of streaming node.js code.</p>

<p><img src="https://preslav.me/content/images/2019/02/image.png" alt="" /><a href="https://twitter.com/maxogden/status/421375617733386242">@maxodgen | Twitter</a></p>

<p>One word of advice though is to try not to fit every piece of your code into a Gulp plugin. As this <a href="http://blog.overzealous.com/post/74121048393/why-you-shouldnt-create-a-gulp-plugin-or-how-to">article points out</a>, thinking of your code as a Gulp plugin would inevitably increase configuration, which is counter to what the Gulp guidelines, and the <strong>do one thing well</strong> philosophy suggest. This is where the <strong>code over configuration</strong> principle shines. Unlike Grunt, Gulp makes it extremely easy to fit other code within a task definition, besides streaming from one plugin to another. In fact, a Gulp task may not even contain a streaming pipeline:</p>

<pre><code class="language-javascript">var http = require('http');
    
//declare the task
gulp.task('server', function(done) {
    //start an http server (I know, a totally useless example, but helps to illustrate the point)
    var requestListener = function (req, res) {
    res.writeHead(200);
    res.end('Hello, World!n');
    }
    
    var server = http.createServer(requestListener);
    server.listen(8080);
    
    done();
});
</code></pre>

<h1 id="the-verdict">The Verdict</h1>

<p>Has Gulp made Grunt obsolete. <a href="http://qr.ae/6rv0g"><em>No, for the same reason that Burger King didn&rsquo;t make McDonald&rsquo;s obsolete</em></a>. Truth is, if you&rsquo;re starting to work with JS-based build systems, there is a high chance that you&rsquo;d pick Gulp right away. The prospects for it just seem a little rosier, plus, it has been adopted by a large portion of projects. Yet, if you are still using Grunt and feel comfortable using it, there is nothing to be worried about — the community is still there, bigger than Gulp, and keeps growing. Grunt has almost a couple of years of advantage, and I am sure that large project maintainers will try to stick to it for as long as possible. Another advantage of using Grunt is if all you need is that little built-in set of simple tasks. In that case, you&rsquo;d feel right at home with it, and Gulp, despite all of its flexibility, will make you spend more time in theory than you need. As with everything else project related, you should choose based on the circumstances.</p>

<h1 id="resources">Resources</h1>

<ul>
<li><a href="http://benalman.com/news/2012/08/why-grunt/">Why grunt? Why not something else?</a></li>
<li><a href="http://markdalgleish.github.io/presentation-build-wars-gulp-vs-grunt">Build Wars: Gulp vs Grunt</a></li>
<li><a href="https://medium.com/p/3828e8126466">gulp - Eric Schoffstall - Medium</a></li>
<li><a href="http://www.100percentjs.com/just-like-grunt-gulp-browserify-now/">自家用車の新車について</a>
and others&hellip;</li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>

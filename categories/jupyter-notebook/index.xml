<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Jupyter Notebook on Random Bits of Wisdom</title>
        <link>https://preslav.me/categories/jupyter-notebook/</link>
        <description>Recent content in Jupyter Notebook on Random Bits of Wisdom</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 22 Apr 2018 04:14:00 +0000</lastBuildDate>
        <atom:link href="https://preslav.me/categories/jupyter-notebook/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Live-reloading of Python Modules in the Python REPL / IPython / Jupyter Console</title>
            <link>https://preslav.me/2018/04/22/live-reloading-of-python-modules/</link>
            <pubDate>Sun, 22 Apr 2018 04:14:00 +0000</pubDate>
            
            <guid>https://preslav.me/2018/04/22/live-reloading-of-python-modules/</guid>
            <description>Often, I would work on a Python module and add changes to it live, which I would then want to test immediately. Piece of cake! Add the changes and execute the script again. Well, that’s certainly a way, but as modules get bigger, they tend to import other modules, or do some preliminary setup work.
With time, I have developed this practice of opening up a Python REPL (though I recommend IPython or the Jupyter Console for that), importing my in-progress module and singling out separate functions I would like to test.</description>
            <content type="html"><![CDATA[

<p>Often, I would work on a Python module and add changes to it live, which I would then want to test immediately. Piece of cake! Add the changes and execute the script again. Well, that’s certainly a way, but as modules get bigger, they tend to import other modules, or do some preliminary setup work.</p>

<p>With time, I have developed this practice of opening up a Python REPL (though I recommend IPython or the Jupyter Console for that), importing my in-progress module and singling out separate functions I would like to test. The problem is, when I do changes to the Python code (like, add a new function), they are not immediately usable, because neither the Python REPL, nor IPython / Jupyter would auto-reload them.</p>

<h2 id="give-me-the-code">Give me the code</h2>

<p>Yes, we are coming to that</p>

<h3 id="general-way">General Way</h3>

<p>Python 3 supports inline reloading of modules using a function called, well clever enough, <code>reload</code>. It used to be a built-in function in Python 2, but this is no longer the case. If you are using Python 3.2+, you should import it extra:</p>

<p>For Python 3.2 and 3.3:</p>

<pre><code class="language-python">import importlib
importlib.reload(some_module)
</code></pre>

<p>For Python 3.4+:</p>

<pre><code class="language-python">import imp
imp.reload(some_module)
</code></pre>

<h3 id="ipython-jupyter-magic">IPython/Jupyter Magic</h3>

<p>Jupyter comes with a set of extensions only applicable to the Jupyter/iPython sessions, called <a href="https://ipython.org/ipython-doc/3/interactive/magics.html">magics</a>. One of these “magics” is the ability to load custom extensions, <a href="http://ipython.readthedocs.io/en/stable/config/extensions/index.html">one of which</a> allows auto-reloading of modules. To enable this, you should add the following two commands, before any imports:</p>

<pre><code class="language-python">%load_ext autoreload
%autoreload 2
# you can check out the the documentation for the rest of the autoreaload modes
# by apending a question mark to %autoreload, like this:
# %autoreload?
</code></pre>

<p>This way, as soon as you hit <code>Save</code> in your code editor, you should be able to re-run a Jupyter cell or an iPython line again, and if it is calling your  module, it should automatically call the latest version.</p>

<h2 id="links">Links</h2>

<ul>
<li><p><a href="https://support.enthought.com/hc/en-us/articles/204469240-Jupyter-IPython-After-editing-a-module-changes-are-not-effective-without-kernel-restart">Jupyter / IPython: After editing a module, changes are not effective without kernel restart – Enthought Knowledge Base</a></p></li>

<li><p><a href="https://stackoverflow.com/questions/5364050/reloading-submodules-in-ipython#5399339">python - Reloading submodules in IPython - Stack Overflow</a></p></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>

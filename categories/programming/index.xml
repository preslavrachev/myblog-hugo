<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Preslav Rachev</title>
    <link>https://preslav.me/categories/programming/</link>
    <description>Recent content in Programming on Preslav Rachev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Oct 2019 22:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://preslav.me/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go is Good Enough</title>
      <link>https://preslav.me/2019/10/18/go-is-good-enough/</link>
      <pubDate>Fri, 18 Oct 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/10/18/go-is-good-enough/</guid>
      <description>Have you heard about the Pareto Principle? Also known as the 80&amp;frasl;20 Rule, it states that for many aspects of life, 80% of the effects come from 20% of the inputs. Flip it around and the opposite is also true: reaching out for the rest of the 20% requires 80% of the initial effort. It is amazing how many manifestations of both exist in real life. One of the big wisdoms in life - it is often not the smartest, fastest, or strongest individuals that leave a dent.</description>
    </item>
    
    <item>
      <title>Simple Immutable Builders in Go, Using Value Receivers</title>
      <link>https://preslav.me/2019/10/06/simple-immutable-builders-in-go-using-value-receivers/</link>
      <pubDate>Sun, 06 Oct 2019 07:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/10/06/simple-immutable-builders-in-go-using-value-receivers/</guid>
      <description>Even in a simple language like Go, concurrently updating mutable state is like playing with fire. Take this piece of code, for example:
l := content.NewLoader() l.PageCount = 5 c := l.Load(bytes) Can you be sure that what you are loading is actually going to contain five pages? What if another goroutine having access to l, interjects and sets PageCount to 1000? Or worse, updates the state of l such that a panic is inevitable?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://preslav.me/microblog/260920191021/</link>
      <pubDate>Thu, 26 Sep 2019 11:20:00 +0000</pubDate>
      
      <guid>https://preslav.me/microblog/260920191021/</guid>
      <description>Chiefly, Go sacrifices expressiveness for uniformity.
The general principle is to favour the transparent and ready-to-hand over the remote and opaque, the concrete and literal over the abstract and magical. It‚Äôs like speaking a language without metaphors.
Learning Go won‚Äôt teach you any exciting new computer science concepts, or introduce you to a whole new paradigm of software development (for that, try Idris). But it will give you a better understanding of the breadth and variety of the design space for programming languages, at a time when mainstream languages generally seem to be converging (Kotlin is rather like Swift, is rather like Typescript, etc).</description>
    </item>
    
    <item>
      <title>Good Code is Boring</title>
      <link>https://preslav.me/2019/09/21/good-code-is-boring/</link>
      <pubDate>Sat, 21 Sep 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/09/21/good-code-is-boring/</guid>
      <description>You have seen them many times. Small snippets of code and the question &amp;ldquo;What would the the following piece of code print&amp;rdquo; beneath. You might have tried taking a guess, and perhaps, even failed.
#golang pop quiz: what will this print? https://t.co/99xR8wybpp pic.twitter.com/Q7YpJbYr8c
&amp;mdash; ‚úï‚úï‚úï‚úï‚úï (@peterbourgon) May 18, 2017  I find those kinds of questions utterly pointless. They not only teach you nothing about real-world programming, but might also lead many newcomers to long-term frustration with programming.</description>
    </item>
    
    <item>
      <title>Bought a Year-Long License for GoLand</title>
      <link>https://preslav.me/2019/08/29/goland-license/</link>
      <pubDate>Thu, 29 Aug 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/29/goland-license/</guid>
      <description>NOTE: This is not a paid product endorsement. I&amp;rsquo;m just a happy customer. I have recently bought a full license of GoLand for a year. The trial served me well for a few months, but the IDE shutting down automatically after every 30 minutes of work, became way too annoying. I know, I shouldn&amp;rsquo;t rely on an IDE for writing Go, when VS Code or Vim would have worked just fine.</description>
    </item>
    
    <item>
      <title>Reduce Struct Size by Laying out Attributes Accordingly</title>
      <link>https://preslav.me/2019/08/27/reduce-struct-size-by-laying-out-attributes-accordingly/</link>
      <pubDate>Tue, 27 Aug 2019 15:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/27/reduce-struct-size-by-laying-out-attributes-accordingly/</guid>
      <description>Many thanks to @themaour for sharing this tip on Twitter TIL that in Go, struct size depends on how underlying types were defined.
struct { a bool b int32 c string d string } The size of the struct above is is different from the one down below
struct { b int32 c string d string a bool } Why is that? Well, think of memory as consisting of segments of certain size, where, if the amount of data you fill the segment with is bigger than the current remainder of the segment, the data will get written onto the next segment.</description>
    </item>
    
    <item>
      <title>Mixtape Retrospective: Time to Split the Monolith?</title>
      <link>https://preslav.me/2019/08/03/mixtape-retrospective-time-to-split-the-monolith/</link>
      <pubDate>Sat, 03 Aug 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/03/mixtape-retrospective-time-to-split-the-monolith/</guid>
      <description>I have recently made my project Mixtape open to the world. Mixtape is a search and discovery platform for podcasts, built exclusively using Go. I decided to use Go primarily because of its compiler&amp;rsquo;s ability to deliver small, self-contained executables with close-to-metal native performance and extremely low memory footprint. It was also a way to battle-test the stack and figure out where and how it will benefit future projects in my portfolio.</description>
    </item>
    
    <item>
      <title>Adding Version Information to Go Binaries</title>
      <link>https://preslav.me/2019/07/09/adding-version-information-to-go-binaries/</link>
      <pubDate>Tue, 09 Jul 2019 04:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/07/09/adding-version-information-to-go-binaries/</guid>
      <description>One of the things that I find really neat about Go, is the single-executable delivery model. For small projects, it&amp;rsquo;s as simple as dragging and dropping the built executable right where I need it. After some time, however, I might easily forget which version of my codebase a given executable has been built upon. If I have to revert a change, how can I make sure that I build from the right commit?</description>
    </item>
    
    <item>
      <title>Implementing a Functional-Style Builder in Go</title>
      <link>https://preslav.me/2019/07/07/implementing-a-functional-style-builder-in-go/</link>
      <pubDate>Sun, 07 Jul 2019 10:17:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/07/07/implementing-a-functional-style-builder-in-go/</guid>
      <description>Go is definitely not the first language on my mind, when I hear the term ‚ÄúFunctional Programming‚Äù. Yet, functions are first-class citizens in Go, and one can achieve a lot using higher-order functions (those that can receive and/or return other functions) alone.
In this post, I want to demonstrate the use of functional constructs for implementing the well-known Builder pattern. Please, note that there are many ways to implement a Builder, and I don&amp;rsquo;t claim that mine is certainly the best.</description>
    </item>
    
    <item>
      <title>Busting the Myth Around Multithreading in Python</title>
      <link>https://preslav.me/2019/06/03/busting-the-myth-around-multithreading-in-python/</link>
      <pubDate>Mon, 03 Jun 2019 05:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/06/03/busting-the-myth-around-multithreading-in-python/</guid>
      <description>One of the things I often hear from other developers, along with the usual ‚ÄúPython is slow‚Äù, is that ‚Äúmultithreading in Python sucks‚Äù. The sad reality is that I hear those from Python developers too. While I will pretend I have not heard the former accusation (hoping you‚Äôve already heard how well Python integrates with C), I will try to bring up some light on the latter.
When I ask the same guys about why they think that multithreading in Python sucks, some of them mention the GIL (Global Interpreter Lock) as the root cause.</description>
    </item>
    
    <item>
      <title>My Reasons to Consider Go Coming from Java</title>
      <link>https://preslav.me/2019/05/07/my-reasons-to-consider-go-coming-from-java/</link>
      <pubDate>Tue, 07 May 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/05/07/my-reasons-to-consider-go-coming-from-java/</guid>
      <description>I hate listicles, and I am highly hoping that this doesn‚Äôt become one of them. Yet, I somehow felt the need to write down the reasons why I am giving Go a second (or maybe, third ü§î) chance. To the Java developers out there, searching for a new weapon of choice, I am hoping that this will give you a bit of perspective. This is not a description of Go-specific features.</description>
    </item>
    
    <item>
      <title>Developer Tool Tip: DevDocs</title>
      <link>https://preslav.me/2019/05/03/dev-tip-devdocs/</link>
      <pubDate>Fri, 03 May 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/05/03/dev-tip-devdocs/</guid>
      <description>Here is a handy developer tool tip for today: DevDocs
As developers, we spend a large portion of our time, searching for the &amp;ldquo;name of the function abc that did thing xyz&amp;rdquo;. Not surprisingly, sites like StackOverflow have become so popular. Yet, SO answers are often full of additional information, and what we need most of the time is a simple search on top of the docs themselves. Years ago, I used a tool for macOS, called Dash.</description>
    </item>
    
    <item>
      <title>Deploying a Native Go Binary on Heroku</title>
      <link>https://preslav.me/2019/04/20/deploying-native-go-binary-on-heroku/</link>
      <pubDate>Sat, 20 Apr 2019 07:30:04 +0000</pubDate>
      
      <guid>https://preslav.me/2019/04/20/deploying-native-go-binary-on-heroku/</guid>
      <description>My company, KI labs recently held its first hackathon in our Munich office. My team and I went for a very cool mobile app idea that promotes healthy walking competitions among colleagues and friends. Though the app itself deserves a proper introduction, I will talk about it in a separate post. This time I will focus on one problem I experienced while working on the app&amp;rsquo;s backend part, written in Go.</description>
    </item>
    
    <item>
      <title>Give Me Back My Monolith</title>
      <link>https://preslav.me/2019/03/23/give-me-back-my-monolith/</link>
      <pubDate>Sat, 23 Mar 2019 05:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/03/23/give-me-back-my-monolith/</guid>
      <description>Give me back my monolith    It feels like we‚Äôre starting to pass the peak of the hype cycle of microservices. It‚Äôs no longer multiple times a week we now see a blog ‚Ä¶
Source: - http://www.craigkerstiens.com   Give Me Back My Monolith by Craig Kerstiens is something I have been ranting about for quite some time. It is thus good to see other people standing on the same side of the bridge:</description>
    </item>
    
    <item>
      <title>Using Ephemeral Docker Containers as CLI Applications</title>
      <link>https://preslav.me/2019/03/18/using-ephemeral-docker-containers-as-cli-applications/</link>
      <pubDate>Mon, 18 Mar 2019 06:30:04 +0000</pubDate>
      
      <guid>https://preslav.me/2019/03/18/using-ephemeral-docker-containers-as-cli-applications/</guid>
      <description>Docker containers have proven themselves extremely useful in allowing developers to sandbox environments and ease the deployment of services. Have a complicated service setup? No worries. Simply, describe the steps in a Dockerfile and you should be able to replicate the process on every host OS that has Docker support.
When I said services, I bet that the first thing you thought about was HTTP servers, or some sort of persistent, always running processes that send or accept requests to such services.</description>
    </item>
    
    <item>
      <title>My Baby Steps with Go</title>
      <link>https://preslav.me/2019/02/20/my-baby-steps-with-go/</link>
      <pubDate>Wed, 20 Feb 2019 05:27:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/02/20/my-baby-steps-with-go/</guid>
      <description>Last week, I made my first tentative foray into Go programming. My company uses Go in a couple of projects, but although I have heard many positive things about the language, so far I have tried to stay away from it. The mere thought that Go is a 21st Century version of C and has been explicitly designed from the start to not try to be much more than that, can make everyone coming from Kotlin and Swift pull a few hairs at first.</description>
    </item>
    
    <item>
      <title>Use Dotenv Files When Developing Your Python Apps</title>
      <link>https://preslav.me/2019/01/09/dotenv-files-python/</link>
      <pubDate>Wed, 09 Jan 2019 06:28:16 +0000</pubDate>
      
      <guid>https://preslav.me/2019/01/09/dotenv-files-python/</guid>
      <description>Hard-coding configuration is bad. This is one of the things that newbie programmers learn quickly after they realize that have committed sensitive information to a public GitHub repository. And it happens so easily. Often, you are in the spur of the moment, wanting to test something locally, when you figure out that you need some API key in order for your app to work. Adding the key to the code takes a second, and is just as easy to forget when committing.</description>
    </item>
    
    <item>
      <title>Connecting to a MongoDB Instance Using KMongo</title>
      <link>https://preslav.me/2018/12/28/mongodb-kmongo-connection-string/</link>
      <pubDate>Fri, 28 Dec 2018 16:45:41 +0000</pubDate>
      
      <guid>https://preslav.me/2018/12/28/mongodb-kmongo-connection-string/</guid>
      <description>Often, the seemingly simple things can make you spend hours chasing around your tail. Like trying to connect to a MongoDB instance using KMongo.
Basically, if you have checked out the KMongo quick start, setting up a client and fetching some data should be extremely easy:
val client = KMongo.createClient() //get com.mongodb.MongoClient new instance val database = client.getDatabase(&amp;#34;test&amp;#34;) //normal java driver usage val col = database.getCollection&amp;lt;Jedi&amp;gt;() //KMongo extension method The quick start tutorial assumes that your DB resides on mongodb://localhost:27017, but in reality, your MongoDB connection string looks more like this:</description>
    </item>
    
    <item>
      <title>How Much of &#34;The Kotlin Way&#34; Is the Right Way?</title>
      <link>https://preslav.me/2018/12/28/the-kotlin-way/</link>
      <pubDate>Fri, 28 Dec 2018 07:10:00 +0000</pubDate>
      
      <guid>https://preslav.me/2018/12/28/the-kotlin-way/</guid>
      <description>NOTE: This post was originally intended to provoke a discussion, and despite its length, the original goal is still the same. Please, share your feedback on Twitter, Reddit, or Dev.to.
My experience with the JVM dates back from around 2010. Java in those days was a bit different from todays&amp;rsquo; standpoint. Java 6 was the current standard at the time, but most projects I got to work on, were stuck between Java 4 and 5.</description>
    </item>
    
    <item>
      <title>Dependency Injection in Python: The Java Guy&#39;s Perspective</title>
      <link>https://preslav.me/2018/12/20/dependency-injection-in-python/</link>
      <pubDate>Thu, 20 Dec 2018 13:34:36 +0000</pubDate>
      
      <guid>https://preslav.me/2018/12/20/dependency-injection-in-python/</guid>
      <description>Dependency Injection (DI) in Python? Seriously? ü§î
At this point, I am expecting people to yell at me for thinking like a Java guy, but just bear with me for a moment, will you? Spoiler: I am going to mention Spring only once in this post, I promise.
NOTE: If you are already familiar with Dependency Injection and want to see it in action, you might want to jump right to the example at the end.</description>
    </item>
    
    <item>
      <title>Designing Well-Structured REST APIs with Flask-RestPlus: Part 1</title>
      <link>https://preslav.me/2018/12/02/designing-well-structured-rest-apis-with-flask-restplus-part-1/</link>
      <pubDate>Sun, 02 Dec 2018 15:46:47 +0000</pubDate>
      
      <guid>https://preslav.me/2018/12/02/designing-well-structured-rest-apis-with-flask-restplus-part-1/</guid>
      <description>This is the first part of a two-part series. In this post, I will introduce Flask-RestPlus and demonstrate how to start organising APIs around its simple REST-based conventions. Next time, I will address the topic of request/response marshalling (serialisation) and validation.
A seasoned Spring developer, I felt a bit uneasy when designing and future-proofing a Flask-based API for the first time. I have recently started using Python way beyond my original intention to just play with data, and found Flask to be a super-easy micro-service alternative to Spring Boot or Ktor.</description>
    </item>
    
    <item>
      <title>Data Science on Your iPad</title>
      <link>https://preslav.me/2018/08/12/data-science-on-your-ipad/</link>
      <pubDate>Sun, 12 Aug 2018 05:29:00 +0000</pubDate>
      
      <guid>https://preslav.me/2018/08/12/data-science-on-your-ipad/</guid>
      <description>This article is a follow-up transcription to a talk I recently gave at a local Munich machine learning meetup. Unlike my previous talk, this time I wanted to convey the idea of using an iPad for actively running data science experiments, as opposed to passively consuming information. I illustrated my point with a few example iOS applications I personally use on a daily basis, which I hope would be good starting points to get the audience interested in the idea.</description>
    </item>
    
    <item>
      <title>Live-reloading of Python Modules in the Python REPL / IPython / Jupyter Console</title>
      <link>https://preslav.me/2018/04/22/live-reloading-of-python-modules/</link>
      <pubDate>Sun, 22 Apr 2018 04:14:00 +0000</pubDate>
      
      <guid>https://preslav.me/2018/04/22/live-reloading-of-python-modules/</guid>
      <description>Often, I would work on a Python module and add changes to it live, which I would then want to test immediately. Piece of cake! Add the changes and execute the script again. Well, that‚Äôs certainly a way, but as modules get bigger, they tend to import other modules, or do some preliminary setup work.
With time, I have developed this practice of opening up a Python REPL (though I recommend IPython or the Jupyter Console for that), importing my in-progress module and singling out separate functions I would like to test.</description>
    </item>
    
    <item>
      <title>Debugging Network Calls in React Native Using the Chrome Debugger</title>
      <link>https://preslav.me/2017/03/26/debugging-network-calls-in-react-native-using-the-chrome-debugger/</link>
      <pubDate>Sun, 26 Mar 2017 05:25:00 +0000</pubDate>
      
      <guid>https://preslav.me/2017/03/26/debugging-network-calls-in-react-native-using-the-chrome-debugger/</guid>
      <description>TL;DR! Just give me the code In your index.js file (or your platform-specific index file for that matter), simply add the following line to the top, directly after the import statements:
XMLHttpRequest = GLOBAL.originalXMLHttpRequest ? GLOBAL.originalXMLHttpRequest : GLOBAL.XMLHttpRequest;  You will also need a Chrome plugin that overrides CORS. I use CORS Toggle. You may also decide to skip the plugin and start Chrome with CORS disabled:
chrome --disable-web-security then, as usually, start remote debugging from your app, and open: http://localhost:8081/debugger-ui on your computer.</description>
    </item>
    
    <item>
      <title>Securing your ElasticSearch instances</title>
      <link>https://preslav.me/2017/02/03/securing-your-elasticsearch-instances/</link>
      <pubDate>Fri, 03 Feb 2017 05:29:00 +0000</pubDate>
      
      <guid>https://preslav.me/2017/02/03/securing-your-elasticsearch-instances/</guid>
      <description>Securing your ElasticSearch instances and keeping all the fun Often, we choose convenience over security. Many modern tools such as MongoDB and ElasticSearch, have grown in popularity, partly because of their easy-to-set-up-and-tinker-with nature. Just spin off an instance, point your browser to the right URL and you&amp;rsquo;re ready to start sending queries.
Unfortunately, one thing comes for another, and as we have recently seen, ElasticSearch left in the open can be a vulnerable target, same as MongoDB was in its heyday.</description>
    </item>
    
    <item>
      <title>What‚Äôs with the 50/72 rule?</title>
      <link>https://preslav.me/2015/02/21/what-s-with-the-50-72-rule/</link>
      <pubDate>Sat, 21 Feb 2015 06:59:00 +0000</pubDate>
      
      <guid>https://preslav.me/2015/02/21/what-s-with-the-50-72-rule/</guid>
      <description>It is part of common sense to assume that the worthiest commit messages lie far from any extremes. Years ago, I often fell in the trap of hastily sending a commit after commit, annoyed by the fact that I have to add a summary to it (let alone a description). I&amp;rsquo;ve seen many projects whose commit summaries consist primarily of one-word verbs like [FIX], [CLEAN], [TEST], etc.
They don&amp;rsquo;t tell much do they?</description>
    </item>
    
    <item>
      <title>Gulp vs Grunt. Why one? Why the Other?</title>
      <link>https://preslav.me/2015/01/06/gulp-vs-grunt-why-one-why-the-other/</link>
      <pubDate>Tue, 06 Jan 2015 06:29:00 +0000</pubDate>
      
      <guid>https://preslav.me/2015/01/06/gulp-vs-grunt-why-one-why-the-other/</guid>
      <description>So you&amp;rsquo;ve been trying to wrap your heads around and decide between Grunt and Gulp? Yeah, me too, been there, done that. In my case, the decision wasn&amp;rsquo;t really hard. I&amp;rsquo;ve never had strong feelings for Grunt, and for a long time, I used a custom made ANT script. I used to copy it over to every new project, and it helped me with basic tasks‚Ää‚Äî‚Äämoving, copying, cleaning, linting, minifying, etc.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Random Bits of Wisdom</title>
    <link>https://preslav.me/</link>
    <description>Recent content on Random Bits of Wisdom</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 20 Mar 2020 11:28:11 +0100</lastBuildDate>
    
	<atom:link href="https://preslav.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Stay the F*** Home, Germany!</title>
      <link>https://preslav.me/2020/03/20/stay-the-f-home-germany/</link>
      <pubDate>Fri, 20 Mar 2020 11:28:11 +0100</pubDate>
      
      <guid>https://preslav.me/2020/03/20/stay-the-f-home-germany/</guid>
      <description>Judging by how much people in Munich seem to enjoy the sunny days of spring, I am going to conclude that either:
 they all live in complete denial of the situation they already gave up they fully trust that no matter what happens, the German healthcare system would fix them in no time. it’s sunny outside, so who cares  I’ve said it before, and I will say it once again.</description>
    </item>
    
    <item>
      <title>A Step Outside the Comfort Zone</title>
      <link>https://preslav.me/2020/03/14/a-step-outside-the-comfort-zone/</link>
      <pubDate>Sat, 14 Mar 2020 17:36:59 +0100</pubDate>
      
      <guid>https://preslav.me/2020/03/14/a-step-outside-the-comfort-zone/</guid>
      <description>Yes, the current situation sucks. Big time. It&amp;rsquo;s not good for anyone. Least of all, for the ones fighting for their lives, and those, doing their best to bring things back to normal. It needs patience and coordinated effort, but we&amp;rsquo;ll make it through, sooner or later. Patience and perseverance are hard, I know, but those are what has kept humanity moving forward. They would do so, for generations to come.</description>
    </item>
    
    <item>
      <title>Elixir-Style Actors in Go</title>
      <link>https://preslav.me/2020/03/07/elixir-style-actors-in-golang/</link>
      <pubDate>Sat, 07 Mar 2020 17:04:29 +0100</pubDate>
      
      <guid>https://preslav.me/2020/03/07/elixir-style-actors-in-golang/</guid>
      <description>My foray into Elixir brought forward many more similarities between it and Go, than I originally expected. One of them is how both handle concurrency. With respect to that, creating Elixir-style stateful actors in Go is surprisingly easy. Answering the question, whether one needs them, or can make use of them, I’d leave to the user. If you approach me back saying that the same thing can be achieved using a channel or a map with sync.</description>
    </item>
    
    <item>
      <title>Use the Git History to Identify Pain Points in Any Project</title>
      <link>https://preslav.me/2020/03/01/use-the-git-history/</link>
      <pubDate>Sun, 01 Mar 2020 17:50:14 +0100</pubDate>
      
      <guid>https://preslav.me/2020/03/01/use-the-git-history/</guid>
      <description>Have you heard of Adam Tornhill&amp;rsquo;s work? If not, I highly recommend that you set some time aside and check out Your Code as a Crime Scene or Software DEsign X-Rays. In both books, the author dives into a bit of an unexplored territory - looking at the evolution of a codebase as a factor of its changes over time.
Much of the tooling we use to mitigate tech debt is preventive.</description>
    </item>
    
    <item>
      <title>iEx Is Dope!</title>
      <link>https://preslav.me/2020/02/24/iex-is-dope/</link>
      <pubDate>Mon, 24 Feb 2020 07:45:20 +0100</pubDate>
      
      <guid>https://preslav.me/2020/02/24/iex-is-dope/</guid>
      <description>iEx (Elixir&amp;rsquo;s interactive shell) is pure dope! It helped bring my development efforts back to the &amp;ldquo;let&amp;rsquo;s play and see what happens&amp;rdquo; level. Since Elixir modules are stateless and made up of pure functions, reloading a module is as easy as calling r MyModule inside iEx. During development, I&amp;rsquo;d try to keep one module called Demo, or Scratch, etc, where I&amp;rsquo;d do the quick and dirty setting up of things. This scratch module would usually have one function only, called demo or run.</description>
    </item>
    
    <item>
      <title>Elixir Month</title>
      <link>https://preslav.me/2020/02/11/elixir-month/</link>
      <pubDate>Tue, 11 Feb 2020 07:49:10 +0100</pubDate>
      
      <guid>https://preslav.me/2020/02/11/elixir-month/</guid>
      <description>Yes, the Elixir. I’ve decided to use the cold February weather, as well as the relative project calm, and see how far I can go with it.
But why Elixir and why just now? There are a few reasons. Actually, this is not my first encounter with the language or the Erlang/BEAM ecosystem. About a year ago, a colleague at work and I started doing lunch break walks, in which we discussed tech topics, beyond the scope of our current projects.</description>
    </item>
    
    <item>
      <title>[Quote] You Can Think of Any Web Server as a Function</title>
      <link>https://preslav.me/2020/02/10/quote-you-can-think-of-any-web-server-as-a-function/</link>
      <pubDate>Mon, 10 Feb 2020 19:07:54 +0100</pubDate>
      
      <guid>https://preslav.me/2020/02/10/quote-you-can-think-of-any-web-server-as-a-function/</guid>
      <description>“You can think of any web server as a function. Each time you type a URL, think of it as a function call to some remote server. That function takes your request and generates some response. A web server is a natural problem for a functional language to solve.”
 Excerpt From Programming Phoenix by Chris McCord
Buy on Amazon
@media (max-width: 640px) { .embed-image { min-width: 100%; } }   Programming Phoenix  Don’t accept the compromise between fast and beautiful: you can have it all.</description>
    </item>
    
    <item>
      <title>A Crystal in Go’s World</title>
      <link>https://preslav.me/2020/01/26/a-crystal-in-go-s-world/</link>
      <pubDate>Sun, 26 Jan 2020 08:35:04 +0000</pubDate>
      
      <guid>https://preslav.me/2020/01/26/a-crystal-in-go-s-world/</guid>
      <description>Imagine a programming language with the ergonomic syntax of Ruby, the speed of execution of C, the concurrency model of Go, and last but not least, a compiler that performs null checks at compile time. Sounds like a dream? Well, this language exists, but chances are, you haven’t heard of it so far.
Meet Crystal!
Crystal is all of the above, plus it has types, outstanding documentation, and a strong community, delivering a steady stream of new libraries (a.</description>
    </item>
    
    <item>
      <title>[Quote] Manual Work is a Bug</title>
      <link>https://preslav.me/2020/01/18/quote-manual-work-is-a-bug/</link>
      <pubDate>Sat, 18 Jan 2020 08:35:04 +0000</pubDate>
      
      <guid>https://preslav.me/2020/01/18/quote-manual-work-is-a-bug/</guid>
      <description>Here are a few lines from Manual Work is a Bug that I firmly stand by:
 The successful engineer has a quick way to create documents for new procedures and to find existing procedures. People with this mindset avoid the cognitive load of deciding whether or not a task is worth documenting, because they document everything. On finding a potential improvement, they are not slowed by the speed bump of switching from a document viewer to a document editor because they work from the editor at the start.</description>
    </item>
    
    <item>
      <title>Reflecting on My Experience With Go, One Year After</title>
      <link>https://preslav.me/2020/01/17/reflecting-on-my-experience-with-go-one-year-after/</link>
      <pubDate>Fri, 17 Jan 2020 08:35:04 +0000</pubDate>
      
      <guid>https://preslav.me/2020/01/17/reflecting-on-my-experience-with-go-one-year-after/</guid>
      <description>In my little more than a year day-to-day developer experience with Go, I have so far learned three things:
 I can change my entire view of how programming works, even after 12+ years of doing it in one form or another. People are blaming Java for all the wrong reasons People are praising Go for all the wrong reasons  Let me explain. This post is not about saying that “language A is better than language B”, or vice versa.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Preslav Rachev</title>
    <link>https://preslav.me/</link>
    <description>I am a software engineer building his own stuff. This is my home on the Internet. Enjoy your stay, and come say &#34;Hi&#34; üëãüèº</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Oct 2019 22:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://preslav.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go is Good Enough</title>
      <link>https://preslav.me/2019/10/18/go-is-good-enough/</link>
      <pubDate>Fri, 18 Oct 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/10/18/go-is-good-enough/</guid>
      <description>Have you heard about the Pareto Principle? Also known as the 80&amp;frasl;20 Rule, it states that for many aspects of life, 80% of the effects come from 20% of the inputs. Flip it around and the opposite is also true: reaching out for the rest of the 20% requires 80% of the initial effort. It is amazing how many manifestations of both exist in real life. One of the big wisdoms in life - it is often not the smartest, fastest, or strongest individuals that leave a dent.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;Have you heard about the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pareto_principle&#34;&gt;Pareto Principle&lt;/a&gt;? Also known as the &lt;sup&gt;80&lt;/sup&gt;&amp;frasl;&lt;sub&gt;20&lt;/sub&gt; Rule, it states that for many aspects of life, 80% of the effects come from 20% of the inputs. Flip it around and the opposite is also true: reaching out for the rest of the 20% requires 80% of the initial effort. It is amazing how many manifestations of both exist in real life. One of the big wisdoms in life - it is often not the smartest, fastest, or strongest individuals that leave a dent. It is the ones pragmatic enough to achieve the 80% with 20% of the effort and energy spent.&lt;/p&gt;

&lt;p&gt;The slight deviation aside, the same very much applies to the Go programming language. It is just good enough. Go won&amp;rsquo;t win the category of language design, neither is it the fastest one on the market. Nor is it the safest member of the bunch. The truth is, what Go offers on the table might seem pretty boring at first. It is a compiled, statically typed language with an extremely reduced syntax, a somewhat simplified concurrency model, and a bit of memory safety. Nothing near close to the speed of C, the beauty of Ruby or the dogmatic memory management of Rust.&lt;/p&gt;

&lt;p&gt;And this is what makes Go succeed. It does not have any of those things, but it is simple and fast enough to get you going on a new project without having to second-guess your approach every second. The lack of features helps reduce the cognitive burden on both the programmer and the compiler. The speed, file-size and memory consumption of the final applications is more optimal than those of 80% of applications built using other technologies.&lt;/p&gt;

&lt;p&gt;Will Go ever be the best in any single programming language category? Probably no. Is it good enough to sustain 80% of your programming efforts? Absolutely!&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>This Is How We Write History</title>
      <link>https://preslav.me/2019/10/12/this-is-how-we-write-history/</link>
      <pubDate>Sat, 12 Oct 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/10/12/this-is-how-we-write-history/</guid>
      <description>This morning, a humble distance runner from Kenya once again proved that the impossible is only a state of mind. A performance, more resembling a concert symphony than an endurance race. Eliud Kipchoge broke the 2-hour marathon barrier today - something that for years was deemed unthinkable for any human being:
  This is the beginning of a new era of running. I am certain that Kipchoge&amp;rsquo;s achievement will inspire others, if not to try a and beat it, to at least get out and be active.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;This morning, a humble distance runner from Kenya once again proved that the impossible is only a state of mind. A performance, more resembling a concert symphony than an endurance race. Eliud Kipchoge broke the 2-hour marathon barrier today - something that for years was deemed unthinkable for any human being:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/km3NxpOq3NU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;This is the beginning of a new era of running. I am certain that Kipchoge&amp;rsquo;s achievement will inspire others, if not to try a and beat it, to at least get out and be active.&lt;/p&gt;

&lt;p&gt;No human is limited!&lt;/p&gt;

&lt;p&gt;To the critics: Yes, it was not an official race, yes, Kipchoge did wear special cushioned shoes, and drank electrolyte gels. Yes, it was an incredibly well engineering feat. One, where everyone, from the shoe designer and the single factory worker, through the pacers, crewmen, and spectators, to Kipchoge himself, played an equally important part.&lt;/p&gt;

&lt;p&gt;And so it should be. As a species, we have been destined to move forward and achieve great things only when doing things together. There is nothing wrong with that. In fact, this victory comes right time, when we badly need the good example of a group of individuals achieving the impossible by going beyond the limitations of body, mind, and spirit.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;We have made history together, and together we can make this world a beautiful world.&amp;rdquo; -&lt;/p&gt;

&lt;p&gt;Eliud Kipchoge&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cheers!&lt;/p&gt;







&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://www.olympicchannel.com/en/stories/news/detail/eliud-kipchoge-first-sub-two-hour-marathon/&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;Eliud Kipchoge runs first ever sub-two hour marathon&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://img.olympicchannel.com/images/image/private/t_social_share_thumb/primary/hddlcbqmdekn5lbrkin5&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;Kenya&amp;#39;s marathon Olympic champion and world record holder Kipchoge clocked 1:59:40 on a historic morning in Vienna&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://www.olympicchannel.com/en/stories/news/detail/eliud-kipchoge-first-sub-two-hour-marathon/&#34;
          &gt;Olympic Channel&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;


></content:encoded>
      
      <media:content url="https://images.unsplash.com/photo-1502904550040-7534597429ae?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1280&amp;q=80" medium="image"/>
      
    </item>
    
    <item>
      <title>What&#39;s New in Mixtape</title>
      <link>https://preslav.me/2019/10/10/what-is-new-in-mixtape/</link>
      <pubDate>Thu, 10 Oct 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/10/10/what-is-new-in-mixtape/</guid>
      <description>Give me more like these&amp;hellip; Search engines are a great tool for content discovery beyond the simple text searching. Often, it is difficult to express exactly what we are looking for. This may be due to limitations of the interface, or our own struggle to explain it in enough detail. There is one thing, however, which we are fairly good at. Given two things, we can easily say which one we like more than the other.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;h2 id=&#34;give-me-more-like-these&#34;&gt;Give me more like these&amp;hellip;&lt;/h2&gt;

&lt;p&gt;Search engines are a great tool for content discovery beyond the simple text searching. Often, it is difficult to express exactly what we are looking for. This may be due to limitations of the interface, or our own struggle to explain it in enough detail. There is one thing, however, which we are fairly good at. Given two things, we can easily say which one we like more than the other.&lt;/p&gt;

&lt;p&gt;With the most recent update on &lt;a href=&#34;https://mixtape.preslav.me/&#34;&gt;Mixtape&lt;/a&gt;, I have added the ability to use Mixtape as a way to discover new podcast episodes, by simply providing the IDs of ones that might be of interest to you. Those who have worked with search engines before, probably know that this is something that this type of applications are fairly well-suited, but not often used for. In particular, ElasticSearch (the brain behind the whole search operation) has a particular type of search query, which allows for just that.&lt;/p&gt;







&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;More like this query | Elasticsearch Reference [7.4]&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://www.elastic.co/static/images/elastic-logo-200.png&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;The More Like This Query finds documents that are &amp;#34;like&amp;#34; a given
set of documents. In order to do so, MLT selects a set of representative terms
of these input documents, forms a query using these terms, executes the query
and returns the results. The user controls the input documents, how the terms
should be selected and how the query is formed.&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html&#34;
          &gt;https://www.elastic.co&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;



&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;Currently, this is still an API-only feature, but it will open up the door for applications of various sorts. One particular thing I am working on, is in the form of a chat bot application, which one will be able to send podcast episode links to (e.g. from &lt;a href=&#34;https://overcast.fm/&#34;&gt;Overcast&lt;/a&gt;, &lt;a href=&#34;https://www.pocketcasts.com/&#34;&gt;Pocket Casts&lt;/a&gt;, &lt;a href=&#34;https://www.apple.com/itunes/&#34;&gt;Apple Podcasts&lt;/a&gt;, etc) and get related podcast episodes to keep listening to.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Simple Immutable Builders in Go, Using Value Receivers</title>
      <link>https://preslav.me/2019/10/06/simple-immutable-builders-in-go-using-value-receivers/</link>
      <pubDate>Sun, 06 Oct 2019 07:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/10/06/simple-immutable-builders-in-go-using-value-receivers/</guid>
      <description>Even in a simple language like Go, concurrently updating mutable state is like playing with fire. Take this piece of code, for example:
l := content.NewLoader() l.PageCount = 5 c := l.Load(bytes) Can you be sure that what you are loading is actually going to contain five pages? What if another goroutine having access to l, interjects and sets PageCount to 1000? Or worse, updates the state of l such that a panic is inevitable?</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;Even in a simple language like Go, concurrently updating mutable state is like playing with fire. Take this piece of code, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewLoader&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PageCount&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Can you be sure that what you are loading is actually going to contain five pages? What if another goroutine having access to &lt;code&gt;l&lt;/code&gt;, interjects and sets &lt;code&gt;PageCount&lt;/code&gt; to 1000? Or worse, updates the state of &lt;code&gt;l&lt;/code&gt; such that a panic is inevitable?&lt;/p&gt;

&lt;p&gt;The simplest solution to this is to pack as much of the initial state configuration into the initialisation step. Constructors do not exist in Go, but unless we speak about a data-only struct (no logic), I would always recommend providing an initialiZer func &lt;code&gt;NewLoader(...)&lt;/code&gt; and keeping as much of the state   of the struct unexported. This will transform the previous piece of code into:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewLoader&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pageCount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem there becomes apparent when you start having more than three arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewLoader&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pageCount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTP&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;//... )
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How can we initialize &lt;code&gt;Loader&lt;/code&gt; in a safe way, providing for some defaults, and without having to pack tens of parameters into the initializing func? There are various ways to achieve this. I have already written about &lt;a href=&#34;https://preslav.me/2019/07/07/implementing-a-functional-style-builder-in-go/&#34;&gt;one way&lt;/a&gt; to approach this, another could be the functional options approach, suggested by &lt;a href=&#34;https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis&#34;&gt;Dave Cheney&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;value-receivers-as-builder-methods&#34;&gt;Value receivers as builder methods&lt;/h1&gt;

&lt;p&gt;The simplest one I have found so far, takes advantage of an innate property of the Go language. Namely, the fact that everything is passed by value. One of the first questions many go beginners ask about, is the difference between &lt;a href=&#34;https://tour.golang.org/methods/8&#34;&gt;value and pointer receivers&lt;/a&gt;. Pointer receivers are usually the preferred way to go, often, as an (premature) optimization, rather than because modifications are required. A bit underrated, value receivers have one big advantage, which is that they are safe for concurrent use. What a value receiver would get is a copy of the original value. This makes them perfect for implementing builder methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Loader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pageSize&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewLoader&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Loader&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Loader&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;pageSize&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// default
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// check the use of a value receiver here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Loader&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;WithPageSize&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ps&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Loader&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pageSize&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ps&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// The rest could be your usual pointer receivers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Loader&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fact that we use a value receiver will cause the value of &lt;code&gt;l&lt;/code&gt; to be copied, so technically, what we set &lt;code&gt;pageSize&lt;/code&gt; to is a completely different place in memory. This is why we have to return a pointer to it and and reassign &lt;code&gt;l&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewLoader&lt;/span&gt;().
			&lt;span style=&#34;color:#a6e22e&#34;&gt;withPageSize&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will cause some copying and a bit of work for the garbage collector, but in the grand scheme of things, it will be a negligible overhead. The safety that you gain is far more important.&lt;/p&gt;

&lt;p&gt;Let me know what you think.&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>What&#39;s in a Mixtape?</title>
      <link>https://preslav.me/2019/09/25/what-is-in-a-mixtape/</link>
      <pubDate>Wed, 25 Sep 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/09/25/what-is-in-a-mixtape/</guid>
      <description>Mixtape
 A homemade music compilation (usually on cassette or CD-R) that contains all your favourite tracks. Often you give such a compilation to the guy or gal of your fancy in hopes that it will help you win their heart. &amp;ndash; Urban Dictionary A budding search and discovery engine for podcasts built by yours truly.  The 20th century marked a giant leap forward in music production and distribution.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;&lt;em&gt;Mixtape&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;A homemade music compilation (usually on cassette or CD-R) that contains all your favourite tracks. Often you give such a compilation to the guy or gal of your fancy in hopes that it will help you win their heart. &amp;ndash; &lt;a href=&#34;https://www.urbandictionary.com/define.php?term=Mixtapes&#34;&gt;Urban Dictionary&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A budding &lt;a href=&#34;https://mixtape.preslav.me/&#34;&gt;search and discovery engine for podcasts&lt;/a&gt; built by yours truly.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The 20th century marked a giant leap forward in music production and distribution. It started with the vinyl record which made music available in everyone&amp;rsquo;s home. Then, at the turn of the century, the digital cassette recorder came to shake the game, by allowing everyone to create mixes of their own liking.&lt;/p&gt;

&lt;p&gt;See, vinyl records are great, but they could only play the same thing over and over again. Assuming you bought one album per record, you quickly ended up holding a pile of records from your favourite bands. We all know that artists back then were great and almost all songs in an album became hits, but what if, hypothetically, one liked only a couple of songs and skipped the rest? One still needed to buy and keep the entire record.&lt;/p&gt;

&lt;p&gt;Digital cassette recorders changed all that. Not only were cassettes smaller in size; one could record on top, multiple times over. This gave the birth of the &lt;strong&gt;mixtape&lt;/strong&gt;. Decades before the playlists of today, mixtapes let everyone create and share thematic mixes of songs from different artists, and often, from completely different genres.&lt;/p&gt;

&lt;h1 id=&#34;from-cassettes-to-podcasting&#34;&gt;From cassettes to podcasting&lt;/h1&gt;

&lt;p&gt;In a funny, but similar way, podcast distribution still works like buying vinyls from a record store. You can subscribe manually, or via any of the myriads of mobile apps out there. Yet, podcasts still get distributed primarily as RSS feeds that you either follow entirely or not at all. Just like with records, if you like the podcast host, over the years you build up a certain sense of loyalty and bonding. I have been listening to podcasts since 2004, and there are are many that I have been following for more than a decade.&lt;/p&gt;

&lt;p&gt;Unfortunately, just like music, podcasts nowadays are in the millions. While I still follow my favorites, there are many more, from which I occasionally grab an interesting episode and skip the rest. Kind of like your Twitter timeline. Of the hundreds (or thousands) of people you follow, perhaps, you only interact with a couple. The rest are somewhat matching your taste, but you probably only added them because you like one of their tweets. Now you are stuck with them forever, hoping for them to strike gold again.&lt;/p&gt;

&lt;p&gt;This is one of the reasons why I started working on &lt;a href=&#34;https://mixtape.preslav.me/&#34;&gt;Mixtape&lt;/a&gt;. From a rough first glance, &lt;a href=&#34;https://mixtape.preslav.me/&#34;&gt;Mixtape&lt;/a&gt; looks like a search engine. This is totally true - the search engine is what powers the foundation of &lt;a href=&#34;https://mixtape.preslav.me/&#34;&gt;Mixtape&lt;/a&gt;. Unlike what you would get in your podcast player, the search engine goes beyond the podcast itself, and focuses on what makes each of its episodes unique. That&amp;rsquo;s why, you would get episodes from various podcasts when searching for a given topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mixtape.preslav.me/?search=sleep%20science&#34;&gt;&lt;em&gt;Why is sleep so important&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mixtape.preslav.me/?search=space%20exploration&amp;amp;category=science&#34;&gt;&lt;em&gt;What&amp;rsquo;s the up with space exploration?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mixtape.preslav.me/?search=future%20of%20work&amp;amp;category=business&#34;&gt;&lt;em&gt;Are we ready for the future of work?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yet, the search is only the beginning. The &lt;strong&gt;mixtape&lt;/strong&gt; part in &lt;a href=&#34;https://mixtape.preslav.me/&#34;&gt;Mixtape&lt;/a&gt; comes from the fact that each search is essentialy a new podcast you can subscribe to. A whole new podcast, made up of episodes from various shows, and centred around the topic that interested you.&lt;/p&gt;

&lt;p&gt;And here comes the discovery part. By providing the full credits to the original podcast creator (incl. links, podcast covers, etc), I am hoping that having caught up on a new podcast via a mixtape feed, a listener would eventually go and subscribe for the podcast itself. The difference with subscribing up-front, is that the listener would have gained enough confidence that the podcast is really up to their liking.&lt;/p&gt;
></content:encoded>
      
      <media:content url="https://images.unsplash.com/photo-1560847581-59ee8139cb8d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1280&amp;q=80" medium="image"/>
      
    </item>
    
    <item>
      <title>Good Code is Boring</title>
      <link>https://preslav.me/2019/09/21/good-code-is-boring/</link>
      <pubDate>Sat, 21 Sep 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/09/21/good-code-is-boring/</guid>
      <description>You have seen them many times. Small snippets of code and the question &amp;ldquo;What would the the following piece of code print&amp;rdquo; beneath. You might have tried taking a guess, and perhaps, even failed.
#golang pop quiz: what will this print? https://t.co/99xR8wybpp pic.twitter.com/Q7YpJbYr8c
&amp;mdash; ‚úï‚úï‚úï‚úï‚úï (@peterbourgon) May 18, 2017  I find those kinds of questions utterly pointless. They not only teach you nothing about real-world programming, but might also lead many newcomers to long-term frustration with programming.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;You have seen them many times. Small snippets of code and the question &lt;strong&gt;&lt;em&gt;&amp;ldquo;What would the the following piece of code print&lt;/em&gt;&lt;/strong&gt;&amp;rdquo; beneath. You might have tried taking a guess, and perhaps, even failed.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/golang?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#golang&lt;/a&gt; pop quiz: what will this print? &lt;a href=&#34;https://t.co/99xR8wybpp&#34;&gt;https://t.co/99xR8wybpp&lt;/a&gt; &lt;a href=&#34;https://t.co/Q7YpJbYr8c&#34;&gt;pic.twitter.com/Q7YpJbYr8c&lt;/a&gt;&lt;/p&gt;&amp;mdash; ‚úï‚úï‚úï‚úï‚úï (@peterbourgon) &lt;a href=&#34;https://twitter.com/peterbourgon/status/865159346149314560?ref_src=twsrc%5Etfw&#34;&gt;May 18, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;I find those kinds of questions utterly pointless. They not only teach you &lt;strong&gt;nothing&lt;/strong&gt; about real-world programming, but might also lead many newcomers to long-term frustration with programming.&lt;/p&gt;

&lt;p&gt;All programming languages have baggage - obscure features that made it in the spec but were later deemed as &lt;strong&gt;hacks&lt;/strong&gt; that should be avoided. There is a certain sense of pride that junior programmers feel when they find such hacks and use them to demonstrate problem-solving skills. I am all in favor of encouraging developers to be proactive and think out of the box. Yet, I often try to point out that using questions like the above as a way of judging one&amp;rsquo;s skills is the wrong way to do it. The mere fact that an opportunity for such questions exists in the first place, should make one take a skeptical look at the language itself.&lt;/p&gt;

&lt;p&gt;Contrary to what your teacher taught you, real-world programming is all but proving yourself at solving complex riddles. Much of the well-written production code I have seen is pretty trivial and boring-looking like. This makes it easy to follow and maintain years down the road, once its original creator no longer works on it.&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Bought a Year-Long License for GoLand</title>
      <link>https://preslav.me/2019/08/29/goland-license/</link>
      <pubDate>Thu, 29 Aug 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/29/goland-license/</guid>
      <description>NOTE: This is not a paid product endorsement. I&amp;rsquo;m just a happy customer. I have recently bought a full license of GoLand for a year. The trial served me well for a few months, but the IDE shutting down automatically after every 30 minutes of work, became way too annoying. I know, I shouldn&amp;rsquo;t rely on an IDE for writing Go, when VS Code or Vim would have worked just fine.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;h5 id=&#34;note-this-is-not-a-paid-product-endorsement-i-m-just-a-happy-customer&#34;&gt;NOTE: This is not a paid product endorsement. I&amp;rsquo;m just a happy customer.&lt;/h5&gt;

&lt;p&gt;I have recently bought a full license of &lt;a href=&#34;https://www.jetbrains.com/go/&#34;&gt;GoLand&lt;/a&gt; for a year. The trial served me well for a few months, but the IDE shutting down automatically after every 30 minutes of work, became way too annoying. I know, I shouldn&amp;rsquo;t rely on an IDE for writing Go, when VS Code or Vim would have worked just fine. It&amp;rsquo;s just that the entire experience of writing, and more importantly, refactoring Go code in GoLand is so amazing.&lt;/p&gt;

&lt;p&gt;Picking up a JetBrains product when coming to Go was a natural move. As a Java developer, I have used IntelliJ Idea for years. I am used to much of the refactoring goodness, and know most of the available key shortcuts by heart, so switching literally took me a minute. This one is a big plus, and JetBrains deserves a big thanks for it. Knowing that developers often switch platforms, offering the same experience everywhere is nothing short of great. I know, I know, in reality, those &amp;ldquo;IDE&amp;rdquo;s are nothing other than platform-specific plugins that run in the same core. One gets a similar experience when installing various officially-supported plugins for say, Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Almost. The official language support plugin for Go in VS Code uses much of the available open-source tooling for Go, developed by the community. While this is great, it also presents a temporary drawback. A large portion of the tooling still relies on projects using &lt;code&gt;GOPATH&lt;/code&gt; and need to be updated in order to support Go modules. Since all of my projects have used Go modules from the start, I have experienced issues doing even basic refactoring in VS Code (e.g. renaming across the project)&lt;/p&gt;

&lt;p&gt;The transition is happening and will sooner or later be no longer a problem. Luckily, GoLand does not seem to suffer from much of this, because it uses a different mechanism of indexing and analyzing code. I think that I&amp;rsquo;ll stick to it for a year while community tooling gets to a stage, where modules are fully supported.&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Reduce Struct Size by Laying out Attributes Accordingly</title>
      <link>https://preslav.me/2019/08/27/reduce-struct-size-by-laying-out-attributes-accordingly/</link>
      <pubDate>Tue, 27 Aug 2019 15:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/27/reduce-struct-size-by-laying-out-attributes-accordingly/</guid>
      <description>Many thanks to @themaour for sharing this tip on Twitter TIL that in Go, struct size depends on how underlying types were defined.
struct { a bool b int32 c string d string } The size of the struct above is is different from the one down below
struct { b int32 c string d string a bool } Why is that? Well, think of memory as consisting of segments of certain size, where, if the amount of data you fill the segment with is bigger than the current remainder of the segment, the data will get written onto the next segment.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;h5 id=&#34;many-thanks-to-themaour-https-twitter-com-themaour-status-1165555578019692544-for-sharing-this-tip-on-twitter&#34;&gt;Many thanks to &lt;a href=&#34;https://twitter.com/themaour/status/1165555578019692544&#34;&gt;@themaour&lt;/a&gt; for sharing this tip on Twitter&lt;/h5&gt;

&lt;p&gt;TIL that in Go, struct size depends on how underlying types were defined.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; { 
	&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; 
    &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; 
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The size of the struct above is is different from the one down below&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; 
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why is that? Well, think of memory as consisting of segments of certain size, where, if the amount of data you fill the segment with is bigger than the current remainder of the segment, the data will get written onto the next segment. The remaining space (a.k.a, &lt;em&gt;padding&lt;/em&gt;) remains unused, and every instance of your struct might have some portion of unused padding when initialised.&lt;/p&gt;

&lt;p&gt;There is a &lt;a href=&#34;http://golang-sizeof.tips&#34;&gt;great online resource&lt;/a&gt; where you can see this by providing a sample struct definition. Let&amp;rsquo;s see what it shows for struct #1:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2019/08/Image 2019-08-27 18-07-29.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and struct #2:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2019/08/Image 2019-08-27 18-03-26.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Think of this the next time you get to process a slice of 1 mln instances of a given struct.&lt;/p&gt;

&lt;h1 id=&#34;resources&#34;&gt;Resources&lt;/h1&gt;

&lt;p&gt;





&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;http://golang-sizeof.tips&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;Golang sizeof tips&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://source.unsplash.com/200x200/?nature,water&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;Ask gopher about struct size!&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;http://golang-sizeof.tips&#34;
          &gt;http://golang-sizeof.tips&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;








&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;http://www.catb.org/esr/structure-packing/&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;The Lost Art of Structure Packing&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://source.unsplash.com/200x200/?nature,water&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;This page is about a technique for reducing the memory footprint of
programs in compiled languages with C-like structures - manually
repacking these declarations for reduced size. To read it, you will
require basic knowledge of the C programming language.&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;http://www.catb.org/esr/structure-packing/&#34;
          &gt;http://www.catb.org&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;

&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Mind the Frog</title>
      <link>https://preslav.me/2019/08/23/mind-the-frog/</link>
      <pubDate>Fri, 23 Aug 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/23/mind-the-frog/</guid>
      <description>If you put a frog in a frying pan, it will quickly jump out. Yet, if you put the frog in cold water and slowly heat, the frog will enjoy the warmth until it&amp;rsquo;s too late to escape.
 We have all heard that story, but how many of us can admit that we play the frog on a daily basis? Especially at work, people tend to put a lot more focus on what they are working on and rather, avoid having a say on how the rest of the organization moves forward.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt;If you put a frog in a frying pan, it will quickly jump out. Yet, if you put the frog in cold water and slowly heat, the frog will enjoy the warmth until it&amp;rsquo;s too late to escape.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have all heard that story, but how many of us can admit that we play the frog on a daily basis? Especially at work, people tend to put a lot more focus on what they are working on and rather, avoid having a say on how the rest of the organization moves forward. This is all normal, and granted, traditionally not everyone has had the leverage to pull strings at the project or organizational levels. But IT startups are different, or they want us to believe that they are different. Therefore, when I see so many people in the IT industry changing jobs all the time, it makes me want to ask for the reasons. Money or titles are the usual answers, but I often sense there&amp;rsquo;s something deeper lurking behind. An inability to admit that, just like the frog, they have enjoyed the perks of the industry, not noticing how the organization had shifted in the meantime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you&amp;rsquo;re passionate about what you&amp;rsquo;re doing, you need to keep an eye on how things are changing around you&lt;/strong&gt;. Don&amp;rsquo;t worry about leaving your comfort zone. Unless you actively speak up your mind, you&amp;rsquo;ll be forced to by the warm water becoming too hot to bear.&lt;/p&gt;

&lt;p&gt;If you still fail to change things, &lt;strong&gt;you&amp;rsquo;ll know that you&amp;rsquo;ve tried at least&lt;/strong&gt;. It&amp;rsquo;s never too late to change the train and start again. As Martin Fowler &lt;a href=&#34;http://wiki.c2.com/?ChangeYourOrganization&#34;&gt;wrote&lt;/a&gt; once:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can change your &lt;strong&gt;organization&lt;/strong&gt;, or &lt;strong&gt;change&lt;/strong&gt; your organization.&lt;/p&gt;
&lt;/blockquote&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>X509: Certificate Signed by Unknown Authority (Running a Go App Inside a Docker Container)</title>
      <link>https://preslav.me/2019/08/11/x509-certificate-signed-by-unknown-authority-running-a-go-app-inside-a-docker-container/</link>
      <pubDate>Sun, 11 Aug 2019 07:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/11/x509-certificate-signed-by-unknown-authority-running-a-go-app-inside-a-docker-container/</guid>
      <description>If you ever get the following message:
x509: certificate signed by unknown authority While running your Go app in a Docker container, there is a chance that you might not have the necessary trusted certificates installed in your Docker container. Assuming that you run your Go apps in lightweight containers, based on Scratch or Alpine, you will have to add the certificates yourselves.
On Alpine, this can be done using the default package installer:</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;If you ever get the following message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;x509: certificate signed by unknown authority&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While running your Go app in a Docker container, there is a chance that you might not have the necessary trusted certificates installed in your Docker container. Assuming that you run your Go apps in lightweight containers, based on &lt;a href=&#34;https://docs.docker.com/develop/develop-images/baseimages/#create-a-simple-parent-image-using-scratch&#34;&gt;Scratch&lt;/a&gt; or Alpine, you will have to add the certificates yourselves.&lt;/p&gt;

&lt;p&gt;On Alpine, this can be done using the default package installer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apk --no-cache add ca-certificates&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since Scratch is not based on a particular distribution you would have to download the certificates manually and add them as part of the build process:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ADD&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ca-certificates.crt /etc/ssl/certs/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;







&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://stackoverflow.com/questions/52969195/docker-container-running-golang-http-client-getting-error-certificate-signed-by&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;Docker container running golang http.Client getting error `certificate signed by unknown authority`&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;I created a docker container for talking to the google api using GoLang. I started off using a SCRATCH container and am getting the error certificate signed by unknown authority upon changing to ub...&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://stackoverflow.com/questions/52969195/docker-container-running-golang-http-client-getting-error-certificate-signed-by&#34;
          &gt;Stack Overflow&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;









&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://medium.com/@chemidy/create-the-smallest-and-secured-golang-docker-image-based-on-scratch-4752223b7324&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;Create the smallest and secured golang docker image based on scratch&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://miro.medium.com/max/1200/1*-SxwIr4XV3YS0OSLrLNVqg.png&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;When we are building a docker Image, the first idea is using the default official image.&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://medium.com/@chemidy/create-the-smallest-and-secured-golang-docker-image-based-on-scratch-4752223b7324&#34;
          &gt;Medium&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;


></content:encoded>
      
    </item>
    
    <item>
      <title>Mixtape Retrospective: Time to Split the Monolith?</title>
      <link>https://preslav.me/2019/08/03/mixtape-retrospective-time-to-split-the-monolith/</link>
      <pubDate>Sat, 03 Aug 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/03/mixtape-retrospective-time-to-split-the-monolith/</guid>
      <description>I have recently made my project Mixtape open to the world. Mixtape is a search and discovery platform for podcasts, built exclusively using Go. I decided to use Go primarily because of its compiler&amp;rsquo;s ability to deliver small, self-contained executables with close-to-metal native performance and extremely low memory footprint. It was also a way to battle-test the stack and figure out where and how it will benefit future projects in my portfolio.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;I have recently made my project &lt;a href=&#34;https://mixtape.preslav.me/&#34;&gt;Mixtape&lt;/a&gt; open to the world. &lt;a href=&#34;https://mixtape.preslav.me/&#34;&gt;Mixtape&lt;/a&gt; is a search and discovery platform for podcasts, built exclusively using Go. I decided to use Go primarily because of its compiler&amp;rsquo;s ability to deliver small, self-contained executables with close-to-metal native performance and extremely low memory footprint. It was also a way to battle-test the stack and figure out where and how it will benefit future projects in my portfolio.&lt;/p&gt;

&lt;p&gt;In the few months running to the initial release, I learned a lot and was confronted by a couple of challenges that other fellow programmers have also been raving about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Panics are lurking at every corner. A single panic can kill your entire app. The single (thought not 100% reliable) cure is to handle every error explicitly. This leads to code which is often interrupted by the same three lines:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;()
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// do something with the error, and potentially return or throw a Panic
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Codebases do not scale well. Whether due to the simplistic syntax of the language, data types, or its approach to packaging and encapsulation, there is a certain point, in which either the cost of setting up proper abstractions or that of copying the same piece of code multiple times, ultimately slows down development efforts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;build-deploy-take-a-step-back&#34;&gt;Build, deploy, take a step back&lt;/h1&gt;

&lt;p&gt;I had to build a whole app in Go, only to realize that what I initially considered shortcomings, were features in disguise, intentionally put by the design team as protection against bloat. They are a very good indicator of when the time has come to split an application into two or more smaller apps. Some call them micro-services. I tend to think of them as commands, in the UNIX sense of single-purpose apps that do one thing and one thing alone.&lt;/p&gt;

&lt;p&gt;When you start thinking this way, you realize that resilience and fault tolerance move away from the responsibilities of the single app/service/command and shift to the orchestration layer. That is not to say that you should not check for errors in your Go apps. On the contrary, check and cover what you can. However, not every error can be, or even, &lt;strong&gt;should be&lt;/strong&gt; covered by your app. Some are even out of your control. Especially, when using 3rd-party code. Admit it, services fail and will fail, and that&amp;rsquo;s their natural behavior.&lt;/p&gt;

&lt;p&gt;By having the components split from one another at the service level, you allow each one to fail separately, without these causing problems on the rest or bringing the entire system down. With infrastructure tech such as Docker and Kubernetes, restarting a faulty service, or load-balancing between a myriad of service copies has become rather easy.&lt;/p&gt;

&lt;h1 id=&#34;no-s-t-sherlock&#34;&gt;No s**t, Sherlock!&lt;/h1&gt;

&lt;p&gt;All of that should have seemed obvious, you say? After, all, Go has been pointed time and again as the programming language of the Cloud (which, TBH, is pure marketing BS, from the same people that called MongoDB &amp;ldquo;web-scale&amp;rdquo; back in the day). Why did I go for a monolith, then? Because, developing a monolith is the most natural way you can start a project, especially when working on it alone. I come from the world of Java, where, assuming you have enough CPU and RAM to sustain it, your app can practically run forever out of a single instance. You can have as many separate threads as your hardware allows for, and each of those may fail, without this necessarily bringing your entire app down. You might end up in deadlocks and resource starvation might cause the app to crash, but this won&amp;rsquo;t happen as often as people imagine.&lt;/p&gt;

&lt;p&gt;So, it was our of practicality that I started building &lt;a href=&#34;https://mixtape.preslav.me/&#34;&gt;Mixtape&lt;/a&gt; as a monolith. Now, I am at a crossroads. I have tried to stay away from messing up with infrastructure configuration for as long as I could. However, if I decide to continue with Go, I might have to eventually start splitting the app. Only time will tell.&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Adding Version Information to Go Binaries</title>
      <link>https://preslav.me/2019/07/09/adding-version-information-to-go-binaries/</link>
      <pubDate>Tue, 09 Jul 2019 04:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/07/09/adding-version-information-to-go-binaries/</guid>
      <description>One of the things that I find really neat about Go, is the single-executable delivery model. For small projects, it&amp;rsquo;s as simple as dragging and dropping the built executable right where I need it. After some time, however, I might easily forget which version of my codebase a given executable has been built upon. If I have to revert a change, how can I make sure that I build from the right commit?</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;One of the things that I find really neat about Go, is the single-executable delivery model. For small projects, it&amp;rsquo;s as simple as dragging and dropping the built executable right where I need it. After some time, however, I might easily forget which version of my codebase a given executable has been built upon. If I have to revert a change, how can I make sure that I build from the right commit?&lt;/p&gt;

&lt;p&gt;In large projects, this is where CI/CD comes to save the day. For small prototypes, however, setting up CI might be an unnecessary overkill until a much later stage in the process.&lt;/p&gt;

&lt;p&gt;Luckily, there is an easy way to &amp;ldquo;bake&amp;rdquo; the information about the current commit hash right into the built executable.&lt;/p&gt;

&lt;p&gt;Go does not have a dedicated build system, but the standard practice across the community is to use &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)&#34;&gt;make&lt;/a&gt;. Make is widely available across *nix operating systems (incl. macOS), so I would usually add a simple &lt;code&gt;Makefile&lt;/code&gt; to most of my Go projects. In this case, my makefile would look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux
GOARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;386&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; build

GIT_COMMIT &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;shell git rev-list -1 HEAD&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOOS&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; GOARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOARCH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; go build -ldflags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-X main.gitCommit=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GIT_COMMIT&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two things to note here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;GIT_COMMIT&lt;/code&gt; will store of the value of the current commit hash that our code base is at.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-ldflags &amp;quot;-X main.gitCommit=$(GIT_COMMIT)&amp;quot;&lt;/code&gt; is Go&amp;rsquo;s way of telling the linker to pass the commit hash to a variable in the code (&lt;code&gt;main.gitCommit&lt;/code&gt;). Think of this as &amp;ldquo;baking&amp;rdquo; the information right into the compiled executable.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All we need to make this happen, is use &lt;code&gt;make build&lt;/code&gt; instead of &lt;code&gt;go build ...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In our code, we can check for the presence of a flag (e.g. &lt;code&gt;-v&lt;/code&gt;) and display the hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gitCommit&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printVersion&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current build version: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;gitCommit&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;versionFlag&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Bool&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Print the current version and exit&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;versionFlag&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;printVersion&lt;/span&gt;()
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// continue with other stuff
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;Related reading:&lt;/p&gt;

&lt;p&gt;





&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_%28software%29&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;Make (software) - Wikipedia&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://source.unsplash.com/200x200/?nature,water&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;In software development, Make is a build automation tool that automatically builds executable programs and libraries from source code by reading files called Makefiles which specify how to derive the target program. Though integrated development environments and language-specific compiler features can also be used to manage a build process, Make remains widely used, especially in Unix and Unix-like operating systems.&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://en.wikipedia.org/wiki/Make_%28software%29&#34;
          &gt;https://en.wikipedia.org&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;








&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://blog.alexellis.io/inject-build-time-vars-golang/&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;Inject build-time variables with Golang&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://blog.alexellis.io/content/images/2017/08/pexels-photo-249580_crop.jpg&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;In this blog post I&amp;#39;ll show you how to inject variables into your Golang executable at build-time such as a Git Commit digest, then automate it with Docker&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://blog.alexellis.io/inject-build-time-vars-golang/&#34;
          &gt;alex ellis&amp;#39; blog&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;








&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://goreleaser.com/&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;GoReleaser&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://goreleaser.com/card.png&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;Deliver Go binaries as fast and easily as possible&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://goreleaser.com/&#34;
          &gt;https://goreleaser.com&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;

&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Implementing a Functional-Style Builder in Go</title>
      <link>https://preslav.me/2019/07/07/implementing-a-functional-style-builder-in-go/</link>
      <pubDate>Sun, 07 Jul 2019 10:17:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/07/07/implementing-a-functional-style-builder-in-go/</guid>
      <description>Go is definitely not the first language on my mind, when I hear the term ‚ÄúFunctional Programming‚Äù. Yet, functions are first-class citizens in Go, and one can achieve a lot using higher-order functions (those that can receive and/or return other functions) alone.
In this post, I want to demonstrate the use of functional constructs for implementing the well-known Builder pattern. Please, note that there are many ways to implement a Builder, and I don&amp;rsquo;t claim that mine is certainly the best.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;Go is definitely not the first language on my mind, when I hear the term ‚ÄúFunctional Programming‚Äù. Yet, functions are &lt;a href=&#34;https://golangbot.com/first-class-functions/&#34;&gt;first-class citizens&lt;/a&gt; in Go, and one can achieve a lot using higher-order functions (those that can receive and/or return other functions) alone.&lt;/p&gt;

&lt;p&gt;In this post, I want to demonstrate the use of functional constructs for implementing the well-known &lt;a href=&#34;https://en.wikipedia.org/wiki/Builder_pattern&#34;&gt;Builder&lt;/a&gt; pattern. Please, note that there are many ways to implement a Builder, and I don&amp;rsquo;t claim that mine is certainly the best. Think of it as a neat and simple exercise that would teach you some introductory functional concepts in the scope of Go.&lt;/p&gt;

&lt;p&gt;To begin with, what is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Builder_pattern&#34;&gt;Builder&lt;/a&gt;? Builders help separate the &lt;em&gt;construction&lt;/em&gt; of an object from its &lt;em&gt;representation&lt;/em&gt;. Often, when dealing with complex object configurations, we end up writing code like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewInstanceBuilder&lt;/span&gt;().
	&lt;span style=&#34;color:#a6e22e&#34;&gt;WithA&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).
	&lt;span style=&#34;color:#a6e22e&#34;&gt;WithB&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).
	&lt;span style=&#34;color:#a6e22e&#34;&gt;WithC&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;).
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Build&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;using an intermediate Builder &lt;code&gt;struct&lt;/code&gt;, or more directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewInstance&lt;/span&gt;().
	&lt;span style=&#34;color:#a6e22e&#34;&gt;WithA&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).
	&lt;span style=&#34;color:#a6e22e&#34;&gt;WithB&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).
	&lt;span style=&#34;color:#a6e22e&#34;&gt;WithC&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which is not safe, because the final instance is accessible at any point in time, and can be modified by any other goroutine running in parallel.&lt;/p&gt;

&lt;h1 id=&#34;a-functional-approach-to-building&#34;&gt;A Functional Approach to Building&lt;/h1&gt;

&lt;p&gt;Functional programming guarantees the safety of providing the instance only at the final step. At the same time, it can help minimise boilerplate. Using the functional approach, no additional structs should be necessary. Let&amp;rsquo;s see how we can achieve this. Start with our core &lt;code&gt;struct&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyStruct&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing special there. Now, pay attention to the next line of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Decorator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyStruct&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyStruct&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What do we have here? One of the revelations for every new Go programmer is that everything in Go can be a type, including functions. In our case, we specify a type called &lt;code&gt;Decorator&lt;/code&gt;, to which we pass an instance of &lt;code&gt;MyStruct&lt;/code&gt;, it performs some modifications on it, and returns the modified instance.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;strong&gt;Side note:&lt;/strong&gt; the use of a pointer makes the example simpler. It is also safe-enough, since the &lt;code&gt;MyStruct&lt;/code&gt; instance will not be accessible until the final build step. Still, if you prefer &lt;a href=&#34;https://en.wikipedia.org/wiki/Pure_function&#34;&gt;pure functions&lt;/a&gt;, the example should be equally easy to implement using value-copying.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The really ingenious thing of thinking about a function as a type, is that we can reuse the type, and what&amp;rsquo;s even more grounbreaking, add functionality to it. Check this out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Decorator&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;WithA&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Decorator&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyStruct&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyStruct&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What did we just do? We added more functionality to &lt;code&gt;Decorator&lt;/code&gt; - a higher-order function, which unwraps the decorator it has been attached to by calling it, modifies the value, and wraps it in a new &lt;code&gt;Decorator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The same way, we can add a function that sets the &lt;code&gt;b&lt;/code&gt; property of our &lt;code&gt;MyStruct&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Decorator&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;WithB&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Decorator&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyStruct&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyStruct&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By now you have probably started to guess that attaching decorators to each other will form a chain, which, when eventually executed, will unwrap itself in a reverse manner, each decorator applying its modifications to the passed &lt;code&gt;MyStruct&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;We are almost done, but how do we actually get our &lt;code&gt;MyStruct&lt;/code&gt; instance out? We need some sort of a Go-style &lt;code&gt;constructor&lt;/code&gt; function, right? Indeed, we do, but our &lt;code&gt;constructor&lt;/code&gt; is a little different when we apply the &lt;code&gt;Builder&lt;/code&gt; pattern. Instead of returning the &lt;code&gt;MyStruct&lt;/code&gt; instance, it would rather create a simple no-op &lt;code&gt;Decorator&lt;/code&gt; function, so we can attach other decorators to it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewMyStruct&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;Decorator&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyStruct&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyStruct&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// This function really does nothing 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last part of our construct is the actual &lt;code&gt;Build&lt;/code&gt; method. Its role is to create an empty &lt;code&gt;MyStruct&lt;/code&gt; instance and pass it onto the decorator that it gets attached to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Decorator&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Build&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyStruct&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyStruct&lt;/span&gt;{})
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please, recall that since the chain of &lt;code&gt;Decorator&lt;/code&gt; functions gets unwrapped in a reverse fashion, even though &lt;code&gt;Build&lt;/code&gt; is the last method to be called, it is actually the one that starts the unwrapping of the chain.&lt;/p&gt;

&lt;p&gt;Finally, let&amp;rsquo;s see how we can use our &lt;code&gt;Builder&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewMyType&lt;/span&gt;().
		&lt;span style=&#34;color:#a6e22e&#34;&gt;WithA&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;).
		&lt;span style=&#34;color:#a6e22e&#34;&gt;WithB&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;).
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Build&lt;/span&gt;()

&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;`instance`&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fully&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;configured&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ready&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see the entire example in action &lt;a href=&#34;https://play.golang.org/p/kmDh_oD-8qu&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you liked my little take on Go-style functional programming, applied to the Builder pattern. Feel free to share your feedback.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
></content:encoded>
      
      <media:content url="https://preslav.me/images/2019/07/photo-1527199768775-bdabf8b32f61.jpg" medium="image"/>
      
    </item>
    
    <item>
      <title>Sofia&#39;s Trams</title>
      <link>https://preslav.me/2019/06/23/sofia-s-trams/</link>
      <pubDate>Sun, 23 Jun 2019 21:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/06/23/sofia-s-trams/</guid>
      <description>It has been almost a decade, since I last set foot in the city center of Bulgaria‚Äôs capital, Sofia. Although I fly home regularly, Sofia‚Äôs Airport is just an intermediary stop on my ultimate route to my hometown.
This time was different. My wife and I flew for the wedding of one of our best friends, and since we had a whole day to spare, we decided to take a walk through the centre of the City of Trams.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;It has been almost a decade, since I last set foot in the city center of Bulgaria‚Äôs capital, Sofia. Although I fly home regularly, Sofia‚Äôs Airport is just an intermediary stop on my ultimate route to my hometown.&lt;/p&gt;

&lt;p&gt;This time was different. My wife and I flew for the wedding of one of our best friends, and since we had a whole day to spare, we decided to take a walk through the centre of the &lt;em&gt;City of Trams&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2019/06/Sofia Tram 1.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For those who have never been in Sofia, trams are a major form of transportation here, the first line having been established back in 1901. Although Sofia citizens enjoy a modern (and surprisingly clean) subway, trams have long been one of the things that people usually associate the city&amp;rsquo;s center with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2019/06/Sofia Tram 2.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2019/06/Sofia Tram 3.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2019/06/Sofia Tram 6.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Read more about the history of tram transportation in Sofia:&lt;/p&gt;







&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://en.wikipedia.org/wiki/Trams_in_Sofia&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;Trams in Sofia - Wikipedia&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://upload.wikimedia.org/wikipedia/commons/e/ee/Tatra_T6A5_Sofia.jpg&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;Tram Tatra T6A5 on line 22&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://en.wikipedia.org/wiki/Trams_in_Sofia&#34;
          &gt;https://en.wikipedia.org&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;


></content:encoded>
      
    </item>
    
    <item>
      <title>Introducing NoEmbed</title>
      <link>https://preslav.me/2019/06/20/introducing-noembed/</link>
      <pubDate>Thu, 20 Jun 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/06/20/introducing-noembed/</guid>
      <description>NoEmbed: Create rich URL embeds, even when sites don&amp;#39;t support oEmbed.    NoEmbed uses performant and state-of-the-art technology to extract website information and present it in a format easy to embed and share
Source: - NoEmbed   A picture is worth a thousand words. Everyone knows that. How about, a preview is worth a thousand links, however? If you have ever written a Medium article, more than certainly, you have tried adding links to videos or other Web pages.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>







&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://noembed.preslav.me&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;NoEmbed: Create rich URL embeds, even when sites don&amp;#39;t support oEmbed.&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://images.unsplash.com/uploads/141103282695035fa1380/95cdfeef?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=500&amp;amp;q=80&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;NoEmbed uses performant and state-of-the-art technology to extract website information and present it in a format easy to embed and share&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://noembed.preslav.me&#34;
          &gt;NoEmbed&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;



&lt;hr /&gt;

&lt;p&gt;A picture is worth a thousand words. Everyone knows that. How about, &lt;em&gt;a preview is worth a thousand links&lt;/em&gt;, however? If you have ever written a &lt;a href=&#34;https://medium.com/&#34;&gt;Medium&lt;/a&gt; article, more than certainly, you have tried adding links to videos or other Web pages. One of the cool features that distinguished Medium early on, were its really nice link previews. Simply, dropping a link will turn it into a block of information containing a title, an image, and an informative description:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2019/06/noembed.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In fact, if you keep looking around, you will find quite a few other apps adopting the same idea. &lt;a href=&#34;https://slack.com&#34;&gt;Slack&lt;/a&gt; and &lt;a href=&#34;https://www.notion.so/&#34;&gt;Notion&lt;/a&gt; are good examples that come to mind. Such previews are great, because unlike plain links, they deliver much more context, and therefore, help increase visitor engagement.&lt;/p&gt;

&lt;p&gt;I wanted to provide similar link previews to my personal website, but what I found right away was how poorly adopted &lt;a href=&#34;https://oembed.com/&#34;&gt;oEmbed&lt;/a&gt; is out in the world. I will discuss &lt;a href=&#34;https://oembed.com/&#34;&gt;oEmbed&lt;/a&gt; in detail in a further post, but basically, it is a Web format allowing website owners to expose structured information for every particular link in that website. A good example is YouTube. If you check out the &lt;a href=&#34;http://www.youtube.com/oembed?url=http%3A//youtube.com/watch%3Fv%3DM3r2XDceM6A&amp;amp;format=json&#34;&gt;following link&lt;/a&gt;, you will get a JSON object will all the information about the video in the URL parameter. This info is ready to be rendered as a preview in a site or an app that consumes it.&lt;/p&gt;

&lt;p&gt;The problems with oEmbed are apparent right away. In order for you to use it, the order side must have adopted it, and exposed an API endpoint for you to obtain metadata. Even if you built a proxy service that wrapped all the known oEmbed providers on the Web, you are essentially limited to the number of those providers. What about the rest of the Web?&lt;/p&gt;

&lt;p&gt;Those were the thoughts that made me start working on what I called &lt;a href=&#34;https://noembed.preslav.me/&#34;&gt;NoEmbed&lt;/a&gt;. It solves the problem with the limited number of oEmbed providers by employing smart content extraction characteristics where needed. By using an officially provided list of well-known oEmbed providers, the service proxies to them when possible. Most of the time, however, &lt;a href=&#34;https://noembed.preslav.me/&#34;&gt;NoEmbed&lt;/a&gt; grabs the content of the requested URL, extracts valuable information out of it (title, excerpt, main image, etc) and returns an oEmbed-compatible response, so it can be integrated by any other services that already use oEmbed in some form or fashion.&lt;/p&gt;

&lt;p&gt;I built &lt;a href=&#34;https://noembed.preslav.me/&#34;&gt;NoEmbed&lt;/a&gt; in my spare time writing 100% Go code. It is still crude and unfinished, but already working, and with your help and feedback, I might be able to turn it into a real service.&lt;/p&gt;

&lt;h1 id=&#34;faq&#34;&gt;FAQ&lt;/h1&gt;

&lt;h2 id=&#34;aren-t-there-other-services-doing-this-already&#34;&gt;Aren&amp;rsquo;t there other services doing this already?&lt;/h2&gt;

&lt;p&gt;Of course, there are. &lt;a href=&#34;https://embed.ly/&#34;&gt;Embed.ly&lt;/a&gt; is a great example (used by Medium). Other notable examples are &lt;a href=&#34;https://iframely.com/&#34;&gt;Iframely&lt;/a&gt;, &lt;a href=&#34;https://microlink.io/&#34;&gt;microlink.io&lt;/a&gt;, and &lt;a href=&#34;https://embed.rocks/try&#34;&gt;Embed.rocks&lt;/a&gt;. All of them are great services, of course, but I wanted to one first and foremost for myself; one that is lean and fast and also respects the privacy of its users.&lt;/p&gt;

&lt;h2 id=&#34;what-s-with-the-name&#34;&gt;What&amp;rsquo;s with the name?&lt;/h2&gt;

&lt;p&gt;This is just a temporary name. NoEmbed is actually the name of a &lt;a href=&#34;https://noembed.com/&#34;&gt;famous oEmbed proxy&lt;/a&gt;, which I wanted to use in the very begging. Yet, the small number of available oEmbed provides was a crucial factor that led me not to.&lt;/p&gt;

&lt;p&gt;That said, the name will most probably change, and I am open to hear your suggestions.&lt;/p&gt;

&lt;h2 id=&#34;what-is-the-tech-stack&#34;&gt;What is the tech stack?&lt;/h2&gt;

&lt;p&gt;Pretty boring, actually. Nothing super fancy. At the moment, we are talking about a single tailor-made Web/API service written in pure Go, sitting behind nginx (doing the load-balancing and some heavy caching).&lt;/p&gt;

&lt;h2 id=&#34;who-is-using-it&#34;&gt;Who is using it?&lt;/h2&gt;

&lt;p&gt;At the moment, the primary integrator of NoEmbed is the site you are reading at the moment. The embed that you saw at the beginning of this page, was generated with it.&lt;/p&gt;

&lt;h2 id=&#34;are-you-planning-on-turning-this-into-an-actual-product&#34;&gt;Are you planning on turning this into an actual product?&lt;/h2&gt;

&lt;p&gt;If you think you are ready to pay me for it, absolutely! If you already have a matching use case, do let me know, or sign up right away. I am planning to release a future update, which will allow consumers to use the API using secure tokens and authentication.&lt;/p&gt;
></content:encoded>
      
      <media:content url="https://images.unsplash.com/photo-1500051638674-ff996a0ec29e?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1280&amp;q=80" medium="image"/>
      
    </item>
    
    <item>
      <title>Busting the Myth Around Multithreading in Python</title>
      <link>https://preslav.me/2019/06/03/busting-the-myth-around-multithreading-in-python/</link>
      <pubDate>Mon, 03 Jun 2019 05:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/06/03/busting-the-myth-around-multithreading-in-python/</guid>
      <description>One of the things I often hear from other developers, along with the usual ‚ÄúPython is slow‚Äù, is that ‚Äúmultithreading in Python sucks‚Äù. The sad reality is that I hear those from Python developers too. While I will pretend I have not heard the former accusation (hoping you‚Äôve already heard how well Python integrates with C), I will try to bring up some light on the latter.
When I ask the same guys about why they think that multithreading in Python sucks, some of them mention the GIL (Global Interpreter Lock) as the root cause.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;One of the things I often hear from other developers, along with the usual &lt;em&gt;‚ÄúPython is slow‚Äù&lt;/em&gt;, is that &lt;em&gt;‚Äúmultithreading in Python sucks‚Äù&lt;/em&gt;. The sad reality is that I hear those from Python developers too. While I will pretend I have not heard the former accusation (hoping you‚Äôve already heard how well Python integrates with C), I will try to bring up some light on the latter.&lt;/p&gt;

&lt;p&gt;When I ask the same guys about why they think that multithreading in Python sucks, some of them mention the GIL (Global Interpreter Lock) as the root cause. &lt;em&gt;The GIL&lt;/em&gt;, they say, &lt;em&gt;prevents you from running more than one thread a time&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;Threads in python are perfect for issuing long-running I/O operations, such as database or remote API calls, file operations, etc. Where they show pretty miserable performance is heavy CPU operations (e.g. nested loops, recursion, etc)&lt;/p&gt;

&lt;p&gt;If there is one thing you should remember from this whole article, it is that &lt;strong&gt;multithreading is perfectly fine in Python&lt;/strong&gt;, as it is all other languages that make use of it. Yes, there are &lt;strong&gt;some caveats&lt;/strong&gt; that you need to keep an eye on, but you should not be afraid to use just because someone told you so. Depending on the implementation of Python you are using, there &lt;strong&gt;might be no GIL in place&lt;/strong&gt;, so you might be using your development life harder by not using threads.&lt;/p&gt;

&lt;p&gt;OK? Good. Let me start with:&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-gil-anyway&#34;&gt;What is the GIL anyway?&lt;/h1&gt;

&lt;p&gt;The Global Interpreter Lock (GIL) is a feature (yes, actually a feature) of CPython (the default Python implementation) which is highly related to how CPython manages memory. There are two popular ways for garbage collection in software applications: tracing garbage collection (also known simply as garbage collection) and reference counting. CPython uses reference counting, which is a simple and deterministic way of managing memory. Every time one acquires a reference to a variable, a reference counter gets automatically incremented. Every time a variable gets out of scope, the reference counter gets automatically decremented. When the reference counter reaches 0, the referred to memory gets disposed.&lt;/p&gt;

&lt;h1 id=&#34;gil-and-multithreading&#34;&gt;GIL and multithreading&lt;/h1&gt;

&lt;p&gt;Sounds nice and easy, and it is for the most part. Which is, until multithreading comes in place. See, if two threads access the same reference at the same time, a few things might happen. Decrement in and incrementing the reference count take some technological time. It&amp;rsquo;s not much, but it also doesn&amp;rsquo;t happen instantaneously. Imagine that one thread finishes execution and the decrement process has just begun. Another thread enters right in the middle of this and tries to obtain a reference to the same portion of memory. If the dereferencing finishes first, but the time the second thread obtains a reference, the associated memory might have been disposed of, which will result in SEGFAULT.&lt;/p&gt;

&lt;p&gt;It might also be the case that two or more threads try to increment the reference counter in parallel. This opens up a possibility for overwriting the counter with the lower value, unaware that it has already been incremented. The referenced memory will never be disposed of, which is a classical memory leak.&lt;/p&gt;

&lt;h1 id=&#34;here-comes-the-gil-again&#34;&gt;Here comes the GIL again&lt;/h1&gt;

&lt;p&gt;And this is why we have the GIL. Locking on every reference counter operation is too cumbersome, and certainly, introduce performance drawbacks. Therefore, the GIL is a single, globally-shared instance that can be obtained by one &lt;strong&gt;RUNNING&lt;/strong&gt; thread at a time, and released afterward.&lt;/p&gt;

&lt;h1 id=&#34;so-one-running-thread-at-a-time&#34;&gt;So, one RUNNING thread at a time&lt;/h1&gt;

&lt;p&gt;Keep in mind the word RUNNING. I am writing it in capitals, in order to distinguish between a thread‚Äôs RUNNING and WAITING states. When a thread issues a long-running I/O operation, such as a database call, it switches from a RUNNING to a WAITING state and drops the lock on the GIL. Since no further operations will be executed in that thread during the WAITING state, none of the scenarios mentioned above can happen, so another thread can grab the GIL and continue. When a thread gets out of the WAITING state back to RUNNING, it obtains a lock on the GIL again and performs a quick refresh on the reference counters of its claimed state.&lt;/p&gt;

&lt;p&gt;Ideally, if the code executed in thread consists of only a blocking call (DB, remote API, disk, etc), it is a perfect candidate for concurrent execution. When the code starts getting more complex, and CPU-heavy operations get computed, performance starts dropping to the rate of serial execution, or even worse (due to the GIL lock overhead). This is where &lt;strong&gt;multiprocessing&lt;/strong&gt; comes to the rescue. Though processes are limited by the number of available CPU cores, they share no memory, and consequently, there is no need for a GIL. If a heavy operation involves polling multiple I/O sources for data, before assembling a formatted result together, you‚Äôd rather do the I/O operations in separate threads, and if needed, the final transformations in separate processes.&lt;/p&gt;

&lt;h1 id=&#34;not-all-python-implementations-need-a-gil&#34;&gt;Not all Python implementations need a GIL&lt;/h1&gt;

&lt;p&gt;When we speak about the GIL, it is important to make certain that it is present in CPython, but not all Python implementations have it or need it. Since the vast majority of Python developers use CPython, the GIL is a relevant topic, but one should not forget there are other language implementations that don‚Äôt use it.&lt;/p&gt;

&lt;p&gt;Note: Unlike popular belief, &lt;a href=&#34;https://www.pypy.org/&#34;&gt;PyPy&lt;/a&gt; (the Python JIT-compiler) **&lt;a href=&#34;http://doc.pypy.org/en/latest/faq.html#does-pypy-have-a-gil-why&#34;&gt;actually** &lt;strong&gt;has a GIL&lt;/strong&gt;&lt;/a&gt;, although it uses tracing garbage collection, instead of reference counting. This has been more of a design decision to stick to the original design of the language, rather than an actual technological need, There are other implementations, however, such as &lt;a href=&#34;https://www.jython.org/jythonbook/en/1.0/Concurrency.html#no-global-interpreter-lock&#34;&gt;Jython&lt;/a&gt;, and &lt;a href=&#34;https://wiki.python.org/moin/IronPython&#34;&gt;IronPython&lt;/a&gt; which lack the GIL altogether.&lt;/p&gt;
></content:encoded>
      
      <media:content url="https://preslav.me/images/2019/06/photo-1516259680870-b878830674f9.jpg" medium="image"/>
      
    </item>
    
    <item>
      <title>Sixtus Half-Marathon (Schliersee) 2019</title>
      <link>https://preslav.me/2019/05/17/sixtus-half-marthon-schliersee-2019/</link>
      <pubDate>Fri, 17 May 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/05/17/sixtus-half-marthon-schliersee-2019/</guid>
      <description>Today, I took part in the Sixtus Half-Marathon near lake Schliersee for the third time in a row. Unlike last year, this time I started with a completely different strategy - keep it cool and let everyone else pass by me during the first third of the race. Seeing everyone else&amp;rsquo;s backs can be demotivating and requires a lot of patience and training.
   After the first 5-6K, having realized that I was really the last of the HM group, I started slowly picking up the pace.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;Today, I took part in the &lt;a href=&#34;https://www.schliersee-lauf.de/&#34;&gt;Sixtus Half-Marathon&lt;/a&gt; near lake Schliersee for the third time in a row. Unlike last year, this time I started with a completely different strategy - keep it cool and let everyone else pass by me during the first third of the race. Seeing everyone else&amp;rsquo;s backs can be demotivating and requires a lot of patience and training.&lt;/p&gt;

&lt;iframe height=&#39;405&#39; width=&#39;590&#39; frameborder=&#39;0&#39; allowtransparency=&#39;true&#39; scrolling=&#39;no&#39; src=&#39;https://www.strava.com/activities/2377361336/embed/d4e9d70791307ab432f548dc622a1186e7793c3d&#39;&gt;&lt;/iframe&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/D5XpvzbFD_E&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;After the first 5-6K, having realized that I was really the last of the HM group, I started slowly picking up the pace. In no time, I started nearing the end of the group, and one by one, the people who went ahead at the start, were now looking at my back.&lt;/p&gt;

&lt;p&gt;Although, I did not beat my PR of two years ago, I managed to beat my previous time on this course by 2 mins, and with a much better physical and mental condition at the end. i can say with a certainty that this was the first HM where I was not ready to give up everything at the 18th km, but clearly knew that I would finish the race. My strategy (start slowly, pick up later) has worked!&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/b3ceLWAPA7U&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;I want to thank my wife, and my best friends for the support, and for running along during a part of the race. You, guys are the best!!!&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>My Reasons to Consider Go Coming from Java</title>
      <link>https://preslav.me/2019/05/07/my-reasons-to-consider-go-coming-from-java/</link>
      <pubDate>Tue, 07 May 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/05/07/my-reasons-to-consider-go-coming-from-java/</guid>
      <description>I hate listicles, and I am highly hoping that this doesn‚Äôt become one of them. Yet, I somehow felt the need to write down the reasons why I am giving Go a second (or maybe, third ü§î) chance. To the Java developers out there, searching for a new weapon of choice, I am hoping that this will give you a bit of perspective. This is not a description of Go-specific features.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;I hate listicles, and I am highly hoping that this doesn‚Äôt become one of them. Yet, I somehow felt the need to write down the reasons why I am giving Go a second (or maybe, third ü§î) chance. To the Java developers out there, searching for a new weapon of choice, I am hoping that this will give you a bit of perspective. This is not a description of Go-specific features. For those, readers can find plenty of information online.&lt;/p&gt;

&lt;h1 id=&#34;go-focuses-on-less-is-more&#34;&gt;Go focuses on ‚Äúless is more&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;The first time I saw a relatively simple Go program, my internal reaction was ‚ÄúWhy all the torture?‚Äù. Somehow, things I used to solve with a Python or even a Java one-liner, look ginormously over-bloated in Go. At least, on the surface. Searching for an answer, I found this talk by Rob Pike, which helped put things in some order:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/rFejpH_tAHM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rFejpH_tAHM&#34;&gt;dotGo 2015 - Rob Pike - Simplicity is Complicated&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The thing is, unlike other languages, Go has been left out of many ‚Äúniceties‚Äù of modern programming, and this was an intentional decision. More features add a level of cognitive burden. Of course, they also add more productivity, but at the cost of a higher comprehension barrier. I remember the days before Java 8, and how excited I was to see lambdas and streams make it into the language. A lot of previously lengthy boilerplate code was about to get replaced by a more elegant and fluent approach. Suddenly, every problem I ran into, I tried to solve using those two alone. So much so, that I often ended up spending hours screwing the logic of my code, because suddenly, no other approach seemed elegant enough. And I was not alone in this - the rest of my team was doing it too. Not long after, some pieces of the code turned into crystal figures - beautiful at first sight, but very brittle and difficult to move around.&lt;/p&gt;

&lt;p&gt;Some programming languages focus on developer satisfaction when writing, but miss on the long-term maintainability of the piece of software. Others, like Go, sacrifice the expressiveness, in favor of readability and easy comprehension.  I tend to over-engineer things (I believe you too, fellow Java engineers), so for me writing Go code feels a bit like therapy. By offering less, it teaches me to focus on getting the right things done, instead of getting stuck in the design phase, trying to make things ‚Äúright‚Äù.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t trust much of what you read about Go online. It is a tough nut to crack. Be prepared for a change in how you write code, especially, if you switch from a more fluent language like Scala or Kotlin. If you are a fan of immutability as part of the language, you‚Äôre up for a change of thinking. As said before, nothing is impossible, it just takes time. Give it time and come back after a while. In my short history with Go, there have been some upsides, followed by a period of recapitulation, eventual comeback, and understanding why things are the way they are.&lt;/p&gt;

&lt;p&gt;Remember:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Verbosity is a feature. Simplicity is complicated&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;the-tooling-and-the-standard-library-are-outstanding&#34;&gt;The tooling and the standard library are outstanding&lt;/h1&gt;

&lt;p&gt;Despite being called an 80s language living in the 21st century, Go‚Äôs ecosystem has borrowed from many of the trends and best practices in software development nowadays. The setup process is nice and easy and brings in a myriad of tiny tools and utils that all fit in place right away. Formatting, package management, linting, module management (as of recent versions) are all things that one does not have to really think about. Those are really taken care of with the standard tooling.&lt;/p&gt;

&lt;p&gt;Besides that, the Go standard library is one of the most complete Stdlibs I‚Äòve worked with so far, and understandably so. Go came out relatively recently, so a lot of the standards and practices in software had a chance to make it in the library right from the beginning, rather than get added years after. As a result, the Go standard library feels like something that a developer can actually use in their daily work, rather than something that always needs to get wrapped inside a third-party library.&lt;/p&gt;

&lt;p&gt;That said, I don‚Äôt share the opinion of Go purists to use standard library only. There should be a balance, and although I am not a fan of &lt;em&gt;‚Äúnpm install‚Äù&lt;/em&gt;-ing everything, standard libraries are created to be building blocks, so don‚Äôt feel ashamed if you have to pull in some libraries to ease your work. There are some pretty &lt;a href=&#34;https://github.com/avelino/awesome-go&#34;&gt;good ones&lt;/a&gt; out there.&lt;/p&gt;

&lt;h1 id=&#34;go-apps-are-fast-and-small&#34;&gt;Go apps are fast and small&lt;/h1&gt;

&lt;p&gt;We have all heard that, but the actual outcome blew my mind away!&lt;/p&gt;

&lt;p&gt;I have spent the bulk of the past decade working with Spring, and it has gradually become my go-to solution for all things Web. Despite working with Flask on my current projects, Spring (Boot) will always remain near and dear to my heart.&lt;/p&gt;

&lt;p&gt;Yet, Spring is a beast. You might not notice it, because the hardware has gotten quite cheap these days, but a lot of otherwise useful resources get locked up when running a hefty JVM app.&lt;/p&gt;

&lt;p&gt;To see where Go stands on this, I rebuilt a not-so-smallish Spring Boot app of mine using Go. I did not even take the purist approach but was quite liberal in my choice of libraries. The results blew all of my previous expectations by a factor of ten. The Spring app took nearly half a GB right away, keeping around 5-10% of my MacBook Pro&amp;rsquo;s CPU busy at all time (spiking when requests came in). For deploying a single artifact, I had built a fat JAR, which is quite a standard procedure for developing Java apps these days. It took a couple of hundred of MBs as well. Due to the JVM warmup and Spring&amp;rsquo;s loading all dependencies, it took almost a minute until the app was ready.&lt;/p&gt;

&lt;p&gt;For comparison, the Go app ran instantaneously (let&amp;rsquo;s be fair, there was literally no component scanning and reflection involved). Even at the height of handling requests, the CPU barely reached 1% (mostly sitting around 0.1%). With all libraries and assets included, the final binary ended up being around 20MB. The RAM usage, however, I found to be a metric that changed everything. In an age where a typical messaging application might eat up to a couple of GBs, this app was sitting there minding its business, rocking a 20MB?!? footprint. 20MB? Even if following a very naive logic, this is close to fitting 20 of these apps together, for the cost of running one Spring Boot app!&lt;/p&gt;

&lt;p&gt;Before the expert readers start criticizing, yes, none of this is really a fair comparison. The fact that an app is built in Go does not guarantee a blazing fast performance if there is a lot of runtime loading and checks. Also, experts can tweak a JVM app in various ways, significantly reducing the footprint of the app. It takes time and effort, but it is certainly doable. And of course, there is always the argument about cheap hardware and premature optimization.&lt;/p&gt;

&lt;p&gt;I am not saying that this should necessarily resonate with you, but it certainly does with me. I strive to be a minimalist. Exactly because the hardware is so cheap these days, I believe that people and companies spend way more on it than they probably should. There are various articles out there speculating about the millions and hundreds of millions of dollars that big software companies pay for server costs every year. All of it to pay for servers that get powered by electricity generated from burning fossil fuels.&lt;/p&gt;

&lt;h1 id=&#34;the-community&#34;&gt;The community&lt;/h1&gt;

&lt;p&gt;The Go community is welcoming and very helpful. Part of the helpfulness factor comes from the fact that many gophers have already spent years programming in a different domain. What makes these people stick around and help each other, is the experience of the past, having taught them that complexity does not equal productivity.&lt;/p&gt;

&lt;h1 id=&#34;instead-of-conclusion&#34;&gt;Instead of conclusion&lt;/h1&gt;

&lt;p&gt;As people say in stock trading, ‚Äúalways do your own research‚Äù. I don‚Äôt want to convince you to switch and use Go full-time, because I haven‚Äôt convinced myself yet. As with everything else, programming languages are just tools, and there will always be a different tool which is better for the particular circumstances. What I hope to have managed to convince you, is to try to understand where the need for the language came from and what it tries to solve&lt;/p&gt;

&lt;p&gt;As always, happy coding!&lt;/p&gt;

&lt;p&gt;P.S. if you have an interesting project that you are considering using Go for, feel free to reach out to me. I‚Äôd love to help.&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Developer Tool Tip: DevDocs</title>
      <link>https://preslav.me/2019/05/03/dev-tip-devdocs/</link>
      <pubDate>Fri, 03 May 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/05/03/dev-tip-devdocs/</guid>
      <description>Here is a handy developer tool tip for today: DevDocs
As developers, we spend a large portion of our time, searching for the &amp;ldquo;name of the function abc that did thing xyz&amp;rdquo;. Not surprisingly, sites like StackOverflow have become so popular. Yet, SO answers are often full of additional information, and what we need most of the time is a simple search on top of the docs themselves. Years ago, I used a tool for macOS, called Dash.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;Here is a handy developer tool tip for today: &lt;a href=&#34;https://devdocs.io/&#34;&gt;DevDocs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As developers, we spend a large portion of our time, searching for the &lt;em&gt;&amp;ldquo;name of the function abc that did thing xyz&amp;rdquo;&lt;/em&gt;. Not surprisingly, sites like StackOverflow have become so popular. Yet, SO answers are often full of additional information, and what we need most of the time is a simple search on top of the docs themselves. Years ago, I used a tool for macOS, called &lt;a href=&#34;https://kapeli.com/dash&#34;&gt;Dash&lt;/a&gt;. It was a good tool at the time, but eventually, I stopped using it, because it was accessing my (still spinning) HDD way too much at the time.&lt;/p&gt;

&lt;p&gt;A couple of years ago, I discovered &lt;a href=&#34;https://devdocs.io/&#34;&gt;DevDocs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8784712/27121730-11676ba8-511b-11e7-8c01-00444ee8501a.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;image source: &lt;a href=&#34;https://electronjs.org/apps/devdocs-app&#34;&gt;electronjs.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is the same idea, but running on the Web (supports offline as well) and accessible from everywhere. It has been my primary go-to docs site for much of my non-library-specific stuff (programming language syntax, standard libraries, popular frameworks). The default selection of docsets is pretty satisfactory and there are many coming all the time. The real magic here is the search:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2019/05/2019-05-06 15-01-27.2019-05-06 15_02_36.gif&#34; style=&#34;width: 320px !important&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are quite a few options for bringing DevDocs to your daily workflow. For instance, a &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=deibit.devdocs&#34;&gt;VS Code plugin&lt;/a&gt;, an &lt;a href=&#34;https://github.com/yannickglt/alfred-devdocs&#34;&gt;Alfred workflow&lt;/a&gt;, a &lt;a href=&#34;https://github.com/egoist/devdocs-app&#34;&gt;desktop app&lt;/a&gt;, etc.&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Deploying a Native Go Binary on Heroku</title>
      <link>https://preslav.me/2019/04/20/deploying-native-go-binary-on-heroku/</link>
      <pubDate>Sat, 20 Apr 2019 07:30:04 +0000</pubDate>
      
      <guid>https://preslav.me/2019/04/20/deploying-native-go-binary-on-heroku/</guid>
      <description>My company, KI labs recently held its first hackathon in our Munich office. My team and I went for a very cool mobile app idea that promotes healthy walking competitions among colleagues and friends. Though the app itself deserves a proper introduction, I will talk about it in a separate post. This time I will focus on one problem I experienced while working on the app&amp;rsquo;s backend part, written in Go.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;My company, &lt;a href=&#34;https://www.ki-labs.com/&#34;&gt;KI labs&lt;/a&gt; recently held its first hackathon in our Munich office. My team and I  went for a very cool mobile app idea that promotes healthy walking competitions among colleagues and friends. Though the app itself deserves a proper introduction, I will talk about it in a separate post. This time I will focus on one problem I experienced while working on the app&amp;rsquo;s backend part, written in Go.&lt;/p&gt;

&lt;p&gt;The challenges with using the Go language aside, one unanticipated hurdle was actually getting the backend to run in Heroku. I know, I could have gone for a different solution, but my usual workflow is to deploy to Heroku, until the requirements push for an alternative approach. And Heroku already supports deploying Go applications. Or at least, that&amp;rsquo;s what the &lt;a href=&#34;https://www.heroku.com/go&#34;&gt;documentation&lt;/a&gt; says. And indeed, after the stress of the hackathon, I figured it out, but at the time, getting Heroku to build a Go application that uses modules seemed like it needed more time than we actually had.&lt;/p&gt;

&lt;p&gt;Due to the limited time constraints, I decided to take a shortcut and use what has traditionally been one of the Go&amp;rsquo;s strongest selling points - creating a static binary and running it natively inside a VM or a container. But Heroku can&amp;rsquo;t run native apps directly, can it? Or at least, it won&amp;rsquo;t allow you to run those directly.&lt;/p&gt;

&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;The trick is to make the installer think that it is going to use a certain &lt;a href=&#34;https://devcenter.heroku.com/articles/buildpacks&#34;&gt;Buildpack&lt;/a&gt;, but actually in your Procfile you override the control and execute a native binary directly.&lt;/p&gt;

&lt;p&gt;Heroku uses certain triggers to initiate the start of an instance. For example, the presence of a &lt;code&gt;package.json&lt;/code&gt; file (Node.js) or &lt;code&gt;pom.xml&lt;/code&gt; / &lt;code&gt;build.gradle&lt;/code&gt; (Java), &lt;code&gt;requirements.txt&lt;/code&gt; / &lt;code&gt;setup.py&lt;/code&gt; (Python), etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux go build server.go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For our needs, we might as well hijack the &lt;a href=&#34;https://github.com/heroku/heroku-buildpack-nodejs&#34;&gt;Node.js Buildpack&lt;/a&gt;. This is relatively simple. In order to trick Heroku, all we need is a &lt;code&gt;package.json&lt;/code&gt; file, which lists a few basic properties needed for the Buildpack initialization:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;appname&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {} }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the &lt;code&gt;package.json&lt;/code&gt; file in place, we need a simple &lt;code&gt;Procfile&lt;/code&gt;, which will tell Heroku what to execute once the Buildpack initialization has finiehsed. In our case, this will be the already compiled Go executable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;web: ./main $PORT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A minor disadvantage of this approach is that we need to check the compiled binary into our git repository. I would do this on a separate branch, which I would try not to merge back to master and delete as soon as no longer necessary. By default, Heroku would use the &lt;code&gt;master&lt;/code&gt; branch when buiding an application, so we need to be assertive when pushing our special deployment branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push heroku my-deployment-branch:master
&lt;span style=&#34;color:#75715e&#34;&gt;# tell Heroku to use my deployment branch as its `master`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it! If fyour application is built using a technology that Heroku might not be actively supporting, or you are in for an extra performance boost (e.g. using Swift, Rust, C, etc) this tip might help you.&lt;/p&gt;

&lt;h1 id=&#34;related-resources&#34;&gt;Related Resources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jan-ahrens.eu/2014/06/17/heroku-with-c.html&#34;&gt;Heroku with C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/heroku/heroku-buildpack-go&#34;&gt;heroku/heroku-buildpack-go: Heroku Go Buildpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/heroku/go-getting-started&#34;&gt;heroku/go-getting-started: Getting Started with Go on Heroku https://devcenter.heroku.com/articles/getting-started-with-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/go-support&#34;&gt;Heroku Go Support | Heroku Dev Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.heroku.com/go&#34;&gt;Deploy, manage, scale Go apps in the cloud | Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Give Me Back My Monolith</title>
      <link>https://preslav.me/2019/03/23/give-me-back-my-monolith/</link>
      <pubDate>Sat, 23 Mar 2019 05:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/03/23/give-me-back-my-monolith/</guid>
      <description>Give me back my monolith    It feels like we‚Äôre starting to pass the peak of the hype cycle of microservices. It‚Äôs no longer multiple times a week we now see a blog ‚Ä¶
Source: - http://www.craigkerstiens.com   Give Me Back My Monolith by Craig Kerstiens is something I have been ranting about for quite some time. It is thus good to see other people standing on the same side of the bridge:</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>





&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;Give me back my monolith&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://source.unsplash.com/200x200/?nature,water&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;It feels like we‚Äôre starting to pass the peak of the hype cycle of microservices. It‚Äôs no longer multiple times a week we now see a blog ‚Ä¶&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/&#34;
          &gt;http://www.craigkerstiens.com&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;



&lt;p&gt;&lt;p&gt;&lt;a href=&#34;http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/&#34;&gt;Give Me Back My Monolith&lt;/a&gt; by Craig Kerstiens is something I have been ranting about for quite some time. It is thus good to see &lt;a href=&#34;http://www.craigkerstiens.com&#34;&gt;other people&lt;/a&gt; standing on the same side of the bridge:&lt;/p&gt;&lt;blockquote&gt;As we ventured into micro-services onboarding time skyrocketed. Yes, we have docker and orchestration such as K8s these days to help, but the time from start to up and running a K8s cluster just to onboard a new engineer is orders of magnitude larger than we saw a few years ago. For many junior engineers this is a burden that really is unnecessary complexity.&lt;/blockquote&gt;&lt;p&gt;What most programmers forget is that a) &lt;a href=&#34;https://en.wikipedia.org/wiki/Cargo_cult_programming&#34;&gt;cargo-culting&lt;/a&gt; is a thing, and b) micro-services are just a tool like anything else. I have fallen into this trap myself quite a few times myself. Just like you won&amp;rsquo;t use Objective-C for Web development or embed an Oracle database inside your mobile app, &lt;em&gt;you don&amp;rsquo;t have to use micro-services in every project you are working on&lt;/em&gt;. You can, but in 90% of the cases, you won&amp;rsquo;t need to. As with most things in life, a micro-service (or macro) architecture is something you reach out of necessity. Unless requirements force you right off the bat, focus on building your product as a single, unified core instead.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt; A micro-service architecture shifts the complexity form the code to the infrastructure, Or, as I used to say: &lt;em&gt;&amp;ldquo;Before micro-services, I chased domain problems, now I am mostly chasing Kubernetes issues, in order to get to the domain problems&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/&#34;&gt;Give Me Back My Monolith&lt;/a&gt; was also featured in the latest of the &lt;a href=&#34;https://pythonbytes.fm&#34;&gt;Python Bytes&lt;/a&gt; podcast:&lt;/p&gt;&lt;audio controls src=&#34;https://pythonbytes.fm/episodes/download/122/give-me-back-my-monolith.mp3&#34;&gt;&lt;/audio&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/&#34;&gt;Give Me Back My Monolith&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://pythonbytes.fm/episodes/show/122/give-me-back-my-monolith&#34;&gt;Episode #122: Give Me Back My Monolith | Python Bytes Podcast&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Using Ephemeral Docker Containers as CLI Applications</title>
      <link>https://preslav.me/2019/03/18/using-ephemeral-docker-containers-as-cli-applications/</link>
      <pubDate>Mon, 18 Mar 2019 06:30:04 +0000</pubDate>
      
      <guid>https://preslav.me/2019/03/18/using-ephemeral-docker-containers-as-cli-applications/</guid>
      <description>Docker containers have proven themselves extremely useful in allowing developers to sandbox environments and ease the deployment of services. Have a complicated service setup? No worries. Simply, describe the steps in a Dockerfile and you should be able to replicate the process on every host OS that has Docker support.
When I said services, I bet that the first thing you thought about was HTTP servers, or some sort of persistent, always running processes that send or accept requests to such services.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;Docker containers have proven themselves extremely useful in allowing developers to sandbox environments and ease the deployment of services. Have a complicated service setup? No worries. Simply, describe the steps in a &lt;code&gt;Dockerfile&lt;/code&gt; and you should be able to replicate the process on every host OS that has Docker support.&lt;/p&gt;

&lt;p&gt;When I said services, I bet that the first thing you thought about was HTTP servers, or some sort of persistent, always running processes that send or accept requests to such services. While the majority of Docker use cases fit exactly into this scenario, the realm of possible applications it offers, far exceeds that.&lt;/p&gt;

&lt;p&gt;One such application is the use of Docker containers to sandbox the complex inner workings of a command-line (CLI) application. Most data projects involve the running of scheduled scripts which access remote services, do data processing and eventually, write the results either to disk, or to dedicated data storage. Such scripts have required dependencies, and often, the dependencies of one may collide with the ones required by another, which ends up in a big mess. This is the primary reason, why things like virtual environments in Python or Node.js&amp;rsquo; notorious &lt;code&gt;node_modules&lt;/code&gt; folder exist in the first place. Yet, we all know one or two about &lt;code&gt;node_modules&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/circleci-performance-difference-between-cache-and-workspace-5567679c3601&#34;&gt;&lt;img src=&#34;https://proxy.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn-images-1.medium.com%2Fmax%2F1600%2F0*i5S2tUk0CQBh1Euc.&amp;amp;f=1&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ideal case for such applications would be statically-bound executable files containing everything needed, and running into their own dedicated processes. One such approach is championed by languages like Go, Swift, and Kotlin&amp;rsquo;s Native option (and of course, good old C/C++). Others, like Java (fat Jars) and Python (wheels) offer a somewhat reasonable compromise by putting the code and every dependency into a single deployable artifact. I call this a compromise, because it still requires the presence of either JDK or a Python runtime on the host OS.&lt;/p&gt;

&lt;p&gt;The majority of the time however, we won&amp;rsquo;t have the opportunity to deploy everything into a single executable. Much of the time, we also won&amp;rsquo;t have the freedom to install different runtimes globally. In such cases, baking a CLI application together with all of its dependencies into a dedicated Docker image can be a good option. Let&amp;rsquo;s try a simple example:&lt;/p&gt;

&lt;h2 id=&#34;an-example&#34;&gt;An Example&lt;/h2&gt;

&lt;p&gt;Here is a simple Python script, which will fetch the current price of Bitcoin, and convert it to a desired fiat currency of our choice (&amp;ldquo;USD&amp;rdquo;, &amp;ldquo;EUR&amp;rdquo;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argparse
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(currency):
    price &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.coindesk.com/v1/bpi/currentprice.json&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bpi&amp;#34;&lt;/span&gt;][currency][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rate_float&amp;#34;&lt;/span&gt;]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(price)

parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ArgumentParser(description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My Fancy CLI&amp;#34;&lt;/span&gt;)
parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--currency&amp;#39;&lt;/span&gt;,
    help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Choose currency to convert to&amp;#39;&lt;/span&gt;,
)
args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_args()

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(args)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currency:
        fetch(args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currency)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;print_help()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are two things to keep a note on, in this example. First, is the use of &lt;code&gt;requests&lt;/code&gt;, a popular HTTP request/response library, but not a part of the Python standard library, so it has to be installed separately. Second, is the use of command-line arguments, namely &lt;code&gt;--currency&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, is the &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; python:3.7&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; pip install requests&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;COPY script.py .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENTRYPOINT&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; [&amp;#34;python&amp;#34;, &amp;#34;script.py&amp;#34;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, very simple. In light of keeping the example simple, we will install &lt;code&gt;requests&lt;/code&gt; right in the &lt;code&gt;Dockerfile&lt;/code&gt; and using a &lt;code&gt;requirements.txt&lt;/code&gt; file or some kind of a setup script, which are the common practice.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s build the image, assuming that both files are in our current directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker build -t my-command .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great, now we can grab our newly baked image and run it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --rm -it my-command --currency USD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;--rm&lt;/code&gt; option will remove the container immediately after the command has been executed. If you have ever ran &lt;code&gt;docker ps -a&lt;/code&gt;, you would know that inactive containers do not get deleted immediately, but are left for a possible later restart. Assuming that we would like to run our command multiple times per day, this will result in lots of wasted resources.&lt;/p&gt;

&lt;p&gt;The other interesting option is &lt;code&gt;-i&lt;/code&gt;. This one, combined with the fact that we chose &lt;code&gt;ENTRYPOINT&lt;/code&gt; instead of &lt;code&gt;CMD&lt;/code&gt; for our starting point in the &lt;code&gt;Dockerfile&lt;/code&gt; would allow us to pass the &lt;code&gt;--currency&lt;/code&gt; argument at the very end. There are a few subtle differences between &lt;code&gt;ENTRYPOINT&lt;/code&gt; and &lt;code&gt;CMD&lt;/code&gt; but the very basic is the ability to adapt &lt;code&gt;ENTRYPOINT&lt;/code&gt;, while &lt;code&gt;CMD&lt;/code&gt; is more or less final.&lt;/p&gt;

&lt;p&gt;You can, of course, create an alias fo your command to make the execution easier:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;alias my-cmd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docker run --rm -i my-command&amp;#34;&lt;/span&gt;

my-cmd --currency USD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it! Now you can ahead and run your application as a scheduled cron task and e.g. accrue data over time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;*/10 * * * * user ./my-cmd --currency USD &amp;gt;&amp;gt; prices.csv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;Once again, the solution is far from the ease of a drag-and-drop that Go executables allow. Also, it assumes a working Docker setup (less and less of an issue nowadays), and quite a bit of space, because of the images. It also, for the most part, requires building the image locally, or at least, pulling the ingredients from an image registry. Docker allows for an option to save an image with all of its dependencies and load it on a remote host OS. Think of it as a sort of fat-Jar. I tried it just for the sake of demonstration, but it seems very impractical, as it resulted in an enormous zip file for that tiny Python script (of course, it bakes a whole Linux bistro inside):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker save -o my-command.zip my-command&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rw------- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user 920M Mar &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;:47 my-command.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;></content:encoded>
      
      <media:content url="https://images.unsplash.com/photo-1494412651409-8963ce7935a7?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/>
      
    </item>
    
    <item>
      <title>Introducing DevNotes</title>
      <link>https://preslav.me/2019/03/09/introducing-devnotes/</link>
      <pubDate>Sat, 09 Mar 2019 23:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/03/09/introducing-devnotes/</guid>
      <description>With a few short micro-post exceptions, my blog has been relatively quiet over the past month. The reason for this is simple. I have devoted much of my writing resources of the past weeks into a new site. A wiki called DevNotes.
That is right, I have started a separate writing project, parallel to my blog. Yet, before you start thinking that this is the end of the blog, don&#39;t worry.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;With a few short micro-post exceptions, my blog has been relatively quiet over the past month. The reason for this is simple. I have devoted much of my writing resources of the past weeks into a new site. A wiki called &lt;a href=&#34;https://devnotes.space/&#34;&gt;DevNotes&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;That is right, I have started a separate writing project, parallel to my blog. Yet, before you start thinking that this is the end of the blog, don&#39;t worry. &lt;strong&gt;This is just the beginning&lt;/strong&gt;. In fact, a big motivator for starting the second site in the first place was being able to collect more thoughts and ideas for further blog posts.&lt;/p&gt;&lt;p&gt;I will explain my reasons and thoughts in the following paragraphs, but without further ado, I wanted to introduce &lt;a href=&#34;https://devnotes.space/&#34;&gt;DevNotes&lt;/a&gt; to you. üéâ&lt;/p&gt;&lt;h2 id=&#34;so-why-yet-another-site&#34;&gt;So, why yet another site?&lt;/h2&gt;&lt;p&gt;The reason is simple. I needed a format for collecting knowledge, which would allow me to gradually build things up, without having to wrap and release everything as a post every time. This is the main benefit that a wiki offers. A wiki evolves a topic gradually, sometimes, a single character at a time.&lt;/p&gt;&lt;p&gt;A wiki is a journey and not a destination. It has no beginning and no defined ending. A wiki gets constantly updated and its pages are not frozen in time. A wiki is therefore not something a reader can comprehend in a linear fashion, but rather, a collection of reference nature. One does not read a wiki, one stumbles upon a wiki when searching for information.&lt;/p&gt;&lt;p&gt;A blog is slightly different. A blog has a timeline, and its posts are complete snapshots of the author&#39;s thoughts on a certain topic, at a certain moment in time. Once written, blog posts themselves seldom undergo changes. If updates are necessary, a new blog post gets written, or a whole series of posts gets created, to expand on the topic. In a way, blog posts are destinations.&lt;/p&gt;&lt;p&gt;One problem with destinations is that it takes time to reach them. Another problem is figuring out if you have reached a destination or not. Ironically, often, the only way to know if you have reached a destination is reaching it first and reflecting upon this fact in retrospect.&lt;/p&gt;&lt;p&gt;Where am I going with this? I want to see this blog evolve and deliver knowledgeable content to my readership. Yet, first and foremost, I want to learn. I have said it many times, and it is worth repeating that I am my blog&#39;s primary user. If I need some information, I&#39;d first search it on my blog, and if I can&#39;t find it, I&#39;d make sure to write about it, so I can have a cache for the next time I need it. This is where the wiki really helps. It will allow me to work on a topic without having to put it in a dedicated blog post, until I have enough information to make the post well-rounded enough. This is especially helpful to my limited time schedule, because having the wiki, I can keep making sure that my knowledge is available online as soon as I obtain it, without having to write a dedicated blog post until I am ready.&lt;/p&gt;&lt;p&gt;I am expecting to see a lot of convergence between the blog and the wiki in the coming future.&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>My Baby Steps with Go</title>
      <link>https://preslav.me/2019/02/20/my-baby-steps-with-go/</link>
      <pubDate>Wed, 20 Feb 2019 05:27:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/02/20/my-baby-steps-with-go/</guid>
      <description>Last week, I made my first tentative foray into Go programming. My company uses Go in a couple of projects, but although I have heard many positive things about the language, so far I have tried to stay away from it. The mere thought that Go is a 21st Century version of C and has been explicitly designed from the start to not try to be much more than that, can make everyone coming from Kotlin and Swift pull a few hairs at first.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;Last week, I made my first tentative foray into Go programming. &lt;a href=&#34;https://www.ki-labs.com/&#34;&gt;My company&lt;/a&gt; uses Go in a couple of projects, but although I have heard many positive things about the language, so far I have tried to stay away from it. The mere thought that Go is a 21st Century version of C and has been explicitly designed from the start to not try to be much more than that, can make everyone coming from Kotlin and Swift pull a few hairs at first. The mere mentioning of C makes me shiver when I think about the crazy stuff I wrote in early high school ¬†(circa. &lt;sup&gt;2000&lt;/sup&gt;&amp;frasl;&lt;sub&gt;02&lt;/sub&gt;). After school, I never gave C a chance anymore, but instead, moved on to languages, which at the time made my life easier.&lt;/p&gt;

&lt;p&gt;In reality, programming with Go is not as harsh as I expected. Okay, it does look a lot like C, there are no classes, and pointers are everywhere, but you quickly get used to these, when you see the full picture. Unlike C, Go has a garbage collector, which means that a whole class of problems I had with memory management will simply not be present.&lt;/p&gt;

&lt;p&gt;As for OOP, objects are still there, but their construction is slightly different. Go has eradicated inheritance and fosters composition instead. Go ¬†The lack of a &lt;code&gt;class&lt;/code&gt; construct has been more than sufficiently replaced by structs and &lt;a href=&#34;https://gobyexample.com/interfaces&#34;&gt;interfaces&lt;/a&gt;. If all you need is a bag of properties (also referred to as &amp;ldquo;data class&amp;rdquo; in other languages), a &lt;code&gt;struct&lt;/code&gt; should be perfectly sufficient. If you want to add functionality to your objects, Go&amp;rsquo;s system of &lt;a href=&#34;https://gobyexample.com/interfaces&#34;&gt;attachable method receivers&lt;/a&gt; makes it fairly easy to do so. In fact, after an hour of hour of work, I got pretty confident with it.&lt;/p&gt;

&lt;p&gt;Pointers are also not the pain I expected them to be. In fact, they help things more transparent and explicit. Since in Go (almost) everything is passed by value (with the exception of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;slice&lt;/code&gt;) pointers actually help distinguish when the function you are passing the object will potentially want to mutate it or not.&lt;/p&gt;

&lt;p&gt;Where Go really shines for me at the moment is the native performance and the build process. Five years ago, I would have screamed at the mere thought of this: statically compiling a binary and directly throwing it onto a remote machine where it just &amp;hellip; works. But it does, and compared to the complexity of modern containerized systems and dependency hell, this is just a breeze of fresh air.&lt;/p&gt;

&lt;p&gt;I am leaving you with the video that made me open up my eyes for Go:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/cQ7STILAS0M&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

></content:encoded>
      
    </item>
    
    <item>
      <title>Kotlin ‚ù§Ô∏è Data Science? (Part 1)</title>
      <link>https://preslav.me/2019/02/03/kotlin-loves-data-science/</link>
      <pubDate>Sun, 03 Feb 2019 14:29:06 +0000</pubDate>
      
      <guid>https://preslav.me/2019/02/03/kotlin-loves-data-science/</guid>
      <description>A few days ago, I was invited to give a talk at the Munich Kotlin Users Group meetup (check out my slides here) For quite some time, I have had an idea to promote Kotlin as the missing link between software engineering and Data Science. DuringKotlinConf 2018, I had the chance and the privilege to meet a couple of amazing people, whose talks only helped confirm my thoughts.
   Mathematical Modeling with Kotlin | Thomas Nield</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;A few days ago, I was invited to give a talk at the &lt;a href=&#34;https://www.meetup.com/Kotlin-User-Group-Munich/events/257927489/&#34;&gt;Munich Kotlin Users Group&lt;/a&gt; meetup (check out my slides &lt;a href=&#34;https://speakerdeck.com/preslavrachev/kotlin-data-science&#34;&gt;here&lt;/a&gt;) For quite some time, I have had an idea to promote Kotlin as the missing link between software engineering and Data Science. During&lt;a href=&#34;https://preslav.me/2018/11/01/kotlinconf-2018-recap/&#34;&gt; KotlinConf 2018&lt;/a&gt;, I had the chance and the privilege to meet a couple of amazing people, whose talks only helped confirm my thoughts.&lt;/p&gt;

&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/-zTqtEcnM7A&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;a href=&#34;https://youtu.be/-zTqtEcnM7A&#34;&gt;Mathematical Modeling with Kotlin | Thomas Nield&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/yjVW6uCmVBA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;a href=&#34;https://www.youtube.com/watch?v=yjVW6uCmVBA&#34;&gt;Building Data Science Workflows with Kotlin | Holger Brandl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Indeed, the future seems full of opportunities for Kotlin, but not before JetBrains and the developer community remove a few of the pending roadblocks.&lt;/p&gt;

&lt;p&gt;The following article is the first part of a two-part series based on my talk. After the meetup, I realized that the topic is far deeper than just going through a few slides about what Kotlin as a language can and can‚Äôt. Therefore, I decided to properly introduce the reader to the topic first. Next time, we will talk about where and how Kotlin can fit into the puzzle.&lt;/p&gt;

&lt;h1 id=&#34;the-problem-with-data&#34;&gt;The Problem with Data&lt;/h1&gt;

&lt;p&gt;We live in an age of unprecedented data abundance. So much, that our wishful imagination is easy to make us believe that we are on the verge of getting computers to think. Not surprisingly, when speaking about the future, the use of the term ‚ÄúAI‚Äù has recently become a favorite topic among company management and technology media alike.&lt;/p&gt;

&lt;p&gt;Yet, in reality, we are only touching the surface. The path towards autonomous AI requires more basic human intervention than anything else. In particular, it needs a way for properly communicating data science into the software engineering field, and vice versa.&lt;/p&gt;

&lt;p&gt;Aren‚Äôt We Already There?
Nope, not quite. Bringing data science into the production workflow of established companies is not as easy as one might think. More so, when talking about the JVM, which a vast majority of enterprise software has been built upon.&lt;/p&gt;

&lt;p&gt;See, there is a mismatch between software engineering and data science practices:&lt;/p&gt;

&lt;p&gt;Software engineering works best when building well-defined systems. Requirements are set at the beginning and ideally, evolve over time, but rarely change entirely. There are traceable boundaries between components, with deterministic inputs and outputs, to help testability and ease extension. Like other forms of engineering, building a piece of software starts with a rough skeleton, which gets iterated over time and again. The goal of every step is to make the software either more feature complete or gradually morph it into a new direction, but keep it compatible with the original requirements.&lt;/p&gt;

&lt;p&gt;Data science, on the other hand, deals with supporting or refuting hypotheses. Like other fields of science, it starts with a relatively generic question and goes through a process of data exploration and validation, until either the question can be answered fully, or it needs to be formulated again, due to an insufficiency of the data/selected approach. The exploration phase often involves trying out different approaches and seeing a large portion of them fail. This is why it is so important for the data science field to use tools and technologies that allow for easy exploration and visualization of the underlying data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*_At3wUK_Zqgz_goL.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://www.xkcd.com/1838/&#34;&gt;Machine Learning | xkcd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another important difference between software engineering and data science is the interpretation of the outputs of systems at hand. Although, the understanding of distributed systems has almost become a science of its own, interpreting the outcome of a non-deterministic machine learning model is a whole different game. It is not easy to unit-test complex ML models, mainly because of the level of randomness they are built upon. Removing this randomness factor can help test the model in isolation, but might also provide the wrong assumptions when feeding the model with real-world data. Just like with the exploration phase above, it is a matter of having the right tools at hand and a fairly deep level of human interpretation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/0*ihz1vmQr7OcBTVx4.png&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://xkcd.com/605/&#34;&gt;Extrapolating | xkcd&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;ai-ml-and-the-role-of-data-science-in-all-of-this&#34;&gt;AI, ML, and the Role of Data Science in All of This&lt;/h1&gt;

&lt;p&gt;So, we are back to our favorite term: Artificial Intelligence, also known as AI. AI has had a long history of ups and downs, most notably its birth and early progress during the 1950s and 1960s, followed by the so-called AI winter covering most of the late 1980s, 1990s, and the beginning of the 21st Century. The recent advancement of hardware technology has given researchers the opportunity to dig out the old papers, beat them off the dust, and re-imagine the utopian bright future, in which humans and machines become alike.&lt;/p&gt;

&lt;p&gt;The fields of AI and Data Science have been complementing one another for a long time. Yet, while AI still seems rather ephemeral and difficult to grasp (a bit like Virtual Reality), Data Science resembles Augmented Reality, in that it employs technology, but leaves the ultimate decision and interpretation to humans.&lt;/p&gt;

&lt;p&gt;Machine Learning (or ML, for short) is just one of the techniques that both rely on, in order to make machines reason about large amounts of data, but by far not the only one.&lt;/p&gt;

&lt;p&gt;If you are looking for a more cynical view of the difference between the three you can rather use this one:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AI is what brings the VC Money in.&lt;/li&gt;
&lt;li&gt;ML (a.k.a sophisticated brute-force) is what gets the job done. ML models are very limited to a given domain.&lt;/li&gt;
&lt;li&gt;DS is the craft of finding which ML model works for a particular case, and which doesn‚Äôt.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until next time, when I will talk more about whether Kotlin can help fill the gap between Software Engineering and Data Science, as well as what steps are still needed to help us get there.&lt;/p&gt;

&lt;h1 id=&#34;further-resources&#34;&gt;Further Resources&lt;/h1&gt;

&lt;p&gt;The slides to my talk
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;99478ac60b134f5393f45d382b1d1bc6&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://approximatelycorrect.com/2017/03/28/the-ai-misinformation-epidemic/&#34;&gt;The AI Misinformation Epidemic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.nvidia.com/blog/2016/07/29/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/&#34;&gt;What‚Äôs the Difference Between Artificial Intelligence, Machine Learning, and Deep Learning?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/data-science-has-become-too-vague-538899bab57&#34;&gt;Data Science Has Become Too Vague&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/deep-misconceptions-about-deep-learning-f26c41faceec&#34;&gt;Deep Misconceptions About Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stats.stackexchange.com/questions/423/what-is-your-favorite-data-analysis-cartoon/9254&#34;&gt;What is your favorite ‚Äúdata analysis‚Äù cartoon?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Use Dotenv Files When Developing Your Python Apps</title>
      <link>https://preslav.me/2019/01/09/dotenv-files-python/</link>
      <pubDate>Wed, 09 Jan 2019 06:28:16 +0000</pubDate>
      
      <guid>https://preslav.me/2019/01/09/dotenv-files-python/</guid>
      <description>Hard-coding configuration is bad. This is one of the things that newbie programmers learn quickly after they realize that have committed sensitive information to a public GitHub repository. And it happens so easily. Often, you are in the spur of the moment, wanting to test something locally, when you figure out that you need some API key in order for your app to work. Adding the key to the code takes a second, and is just as easy to forget when committing.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;Hard-coding configuration is bad. This is one of the things that newbie programmers learn quickly after they realize that have committed sensitive information to a public GitHub repository. And it happens so easily. Often, you are in the spur of the moment, wanting to test something locally, when you figure out that you need some API key in order for your app to work. Adding the key to the code takes a second, and is just as easy to forget when committing. The &lt;a href=&#34;https://12factor.net/&#34;&gt;Twelve-Factor-App&lt;/a&gt; methodology calls this a &lt;em&gt;violation&lt;/em&gt;, and has whole &lt;a href=&#34;https://12factor.net/config&#34;&gt;section&lt;/a&gt; on why should be externalized and read from the environment at runtime.&lt;/p&gt;

&lt;p&gt;I used to avoid using environment variables, because they made it hard to set up a local environment for testing. I‚Äôd either pass all the assignments at the start, or use a cumbersome startup script to export them to the current shell.&lt;/p&gt;

&lt;p&gt;Luckily, it is easy to improve the quality of your code, and ease testing in different environments at the same time. It has become somewhat of a standard practice to use &lt;code&gt;.env&lt;/code&gt; (a.k.a dotenv) files for configuring sensitive data while testing across environments. A &lt;em&gt;dotenv&lt;/em&gt; file contains nothing more than text, where  it has one environment variable assignment per line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ABC_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1234xyz
DEF_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2349875&lt;/span&gt;
DEBUG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;em&gt;Dotenv&lt;/em&gt; files &lt;strong&gt;must be ignored&lt;/strong&gt; from version control for exactly the same reason mentioned at the beginning of this post: exposing sensitive information as part of the project is bad. These files are only used to quickly set up or change an environment when needed.&lt;/p&gt;

&lt;h2 id=&#34;using-a-dotenv-file-in-our-app&#34;&gt;Using a dotenv file in our app&lt;/h2&gt;

&lt;p&gt;How do we get our Python app to read a &lt;code&gt;.env&lt;/code&gt; file? &lt;a href=&#34;https://pypi.org/project/python-dotenv/&#34;&gt;python-dotenv&lt;/a&gt; is a great Python package that does exactly that. It will search for a &lt;code&gt;.env&lt;/code&gt; as part of the project, and if it finds one, will expose the variables in it to the app. All you need to do, is &lt;code&gt;pip install python-dotenv&lt;/code&gt; and add the following couple of lines at the start of your project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dotenv &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; load_dotenv
load_dotenv()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The starting point may vary, depending on whether your project is a command line script, a Flask, or a Django project. For instance, in a Django project, the above two lines need to be added at the top of the &lt;code&gt;settings.py&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Having set &lt;code&gt;python-loadenv&lt;/code&gt; up, the rest is easy. Create a &lt;code&gt;.env&lt;/code&gt; file at the root of your app with all the environment variables needed to configure it, and make sure that you invoke them properly from your code (e.g. use something like &lt;code&gt;os.getenv(&#39;MY_API_KEY&#39;)&lt;/code&gt;). Don‚Äôt forget to exclude the &lt;code&gt;.env&lt;/code&gt; file from being checked into your source code repository!&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.org/project/python-dotenv/&#34;&gt;python-dotenv ¬∑ PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://12factor.net/&#34;&gt;http://12factor.net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>What I learned in 2018</title>
      <link>https://preslav.me/2018/12/31/what-i-learned-in-2018/</link>
      <pubDate>Mon, 31 Dec 2018 16:51:09 +0000</pubDate>
      
      <guid>https://preslav.me/2018/12/31/what-i-learned-in-2018/</guid>
      <description>It&amp;rsquo;s that time of the year again. The time when you make yourself a cup of coffee, and go through the events of the past years, searching for a sign that it has been worth it. And judging by the numbers alone, it seems like a very eventful year:
In 2018, I:
 Got engaged Changed my job Started new new side projects Attended 4 conferences and countless meetups Had my own chance to present in front of an audience (twice) Visited 5 countries and met many new people Read 15 books Wrote nearly 30 blog posts Ran 626 km, and finished 4 half-marathons Made between 5,500 and 6,000 push-ups  Wow, quite a year, heh?</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;It&amp;rsquo;s that time of the year again. The time when you make yourself a cup of coffee, and go through the events of the past years, searching for a sign that it has been worth it. And judging by the numbers alone, it seems like a very eventful year:&lt;/p&gt;

&lt;p&gt;In 2018, I:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Got engaged&lt;/li&gt;
&lt;li&gt;Changed my job&lt;/li&gt;
&lt;li&gt;Started new new side projects&lt;/li&gt;
&lt;li&gt;Attended 4 conferences and countless meetups&lt;/li&gt;
&lt;li&gt;Had my own chance to present in front of an audience (twice)&lt;/li&gt;
&lt;li&gt;Visited 5 countries and met many new people&lt;/li&gt;
&lt;li&gt;Read 15 books&lt;/li&gt;
&lt;li&gt;Wrote nearly 30 blog posts&lt;/li&gt;
&lt;li&gt;Ran 626 km, and finished 4 half-marathons&lt;/li&gt;
&lt;li&gt;Made between 5,500 and 6,000 push-ups&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wow, quite a year, heh?In reality, these numbers would mean nothing, if it weren&amp;rsquo;t for the things I learned in between. I am one of the people who believe that goals are not destinations, but guiding posts. To me it&amp;rsquo;s the journey that matters. For instance, the fact that I finished 15 books this year wouldn&amp;rsquo;t matter, if I cannot remember even a single quote to keep in my mind for the rest of my life. Same with running. It&amp;rsquo;s not the number of half marathons I ran throughout this year, but about the transformation my body and mind underwent every time - anxiety, exhaustion, acceptance, relief, exhilaration.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s see what I learned this year:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I learned to embrace the unknown&lt;/strong&gt;, get out of my comfort zone, and jump into unknown waters. I was reluctant to leave the safety of my old job, but in retrospect, it seems like I have really missed a gulp of fresh air.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I learned that patience and persistence matter&lt;/strong&gt;. When you look at the numbers above, every single one of them alone, would seem insurmountable, if you push yourself to achieve it once. But I did everything stepwise, one tiny bit at a time, day after day. Doing things this way is harder, because it requires a lot of motivation, but it certainly has a more long-lasting effect at the end.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;learned that people are different&lt;/strong&gt;, and what worked for me, may not work for others. In fact, it will &lt;strong&gt;most probably not work for others&lt;/strong&gt;. You cannot take people by the hand and show them the right way, because you don&amp;rsquo;t know the right way for others. What you can and definitely should do, is encourage them to find it for themselves.&lt;/p&gt;

&lt;p&gt;As a direct consequence of the above, &lt;strong&gt;I learned to listen more&lt;/strong&gt;. Normally, I am the type of person who won&amp;rsquo;t start a conversation, but once I feel comfortable enough, I won&amp;rsquo;t stop talking. Sometimes too much. Talking is good, but being a good listener is a way more appreciated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I learned that being having an introverted personality is unlike what society tells us, but a hidden gem in disguise&lt;/strong&gt;. Previously, I thought that it is some kind of a disadvantage that I need to cure myself from. So, I thought that becoming a sports person and an active community persona, would help me &amp;ldquo;get cured&amp;rdquo;. In fact, I had to try everything to come to the realization that this is not something people need to cure themselves from, but a unique gift that they should embrace. The ability to observe the surrounding environment with the focus of an introvert, or be able to go deep in the flow when solving a problem or mastering a skill, is something you shouldn&amp;rsquo;t be ashamed of, but actively go after. If I could do something for the community in 2019, it would be to meet more and more introverted people, and share my discoveries with them.&lt;/p&gt;

&lt;p&gt;Last but not least, &lt;strong&gt;I realized how much I really, really love writing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When I look back, it seems like 2018 was a great year indeed. Looking forward to an amazing 2019! My best wishes for a wonderful new year!&lt;/p&gt;
></content:encoded>
      
      <media:content url="https://images.unsplash.com/photo-1453475250267-163ff185e88e?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/>
      
    </item>
    
    <item>
      <title>Connecting to a MongoDB Instance Using KMongo</title>
      <link>https://preslav.me/2018/12/28/mongodb-kmongo-connection-string/</link>
      <pubDate>Fri, 28 Dec 2018 16:45:41 +0000</pubDate>
      
      <guid>https://preslav.me/2018/12/28/mongodb-kmongo-connection-string/</guid>
      <description>Often, the seemingly simple things can make you spend hours chasing around your tail. Like trying to connect to a MongoDB instance using KMongo.
Basically, if you have checked out the KMongo quick start, setting up a client and fetching some data should be extremely easy:
val client = KMongo.createClient() //get com.mongodb.MongoClient new instance val database = client.getDatabase(&amp;#34;test&amp;#34;) //normal java driver usage val col = database.getCollection&amp;lt;Jedi&amp;gt;() //KMongo extension method The quick start tutorial assumes that your DB resides on mongodb://localhost:27017, but in reality, your MongoDB connection string looks more like this:</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;Often, the seemingly simple things can make you spend hours chasing around your tail. Like trying to connect to a MongoDB instance using &lt;a href=&#34;https://litote.org/kmongo/quick-start/&#34;&gt;KMongo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, if you have checked out the KMongo &lt;a href=&#34;https://litote.org/kmongo/quick-start/&#34;&gt;quick start&lt;/a&gt;, setting up a client and fetching some data should be extremely easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; client = KMongo.createClient() &lt;span style=&#34;color:#75715e&#34;&gt;//get com.mongodb.MongoClient new instance
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; database = client.getDatabase(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;//normal java driver usage
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; col = database.getCollection&amp;lt;Jedi&amp;gt;() &lt;span style=&#34;color:#75715e&#34;&gt;//KMongo extension method&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The quick start tutorial assumes that your DB resides on &lt;code&gt;mongodb://localhost:27017&lt;/code&gt;, but in reality, your MongoDB connection string looks more like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;mongodb://&amp;lt;USERNAME&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;HOST&amp;gt;:&amp;lt;PORT&amp;gt;/&amp;lt;DATABASE&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and in proper production environments, it is unknown until runtime. Let&amp;rsquo;s assume that it was passed to the running application as an environment variable, e.g. &lt;code&gt;MONGODB&lt;/code&gt;. Simply passing this string to &lt;code&gt;KMongo.createClient()&lt;/code&gt;won&amp;rsquo;t do it. The problem is that KMongo assumes that this string is simply the &lt;code&gt;&amp;lt;HOST&amp;gt;&lt;/code&gt; part and creates a &lt;code&gt;ServerAddress&lt;/code&gt;out of it. This results in an error when connecting.&lt;/p&gt;

&lt;p&gt;The solution is to use a class called &lt;code&gt;MongoClientURI&lt;/code&gt;instead. &lt;code&gt;MongoClientURI&lt;/code&gt; parses the string argument and splits it into its corresponding parts.&lt;/p&gt;

&lt;p&gt;So, the solution to my problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; uri = MongoClientURI(System.getenv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MONGODB&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; collection = KMongo.createClient(uri = uri)
        .getDatabase(uri.database)
        .getCollection&amp;lt;Jedi&amp;gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h1 id=&#34;related&#34;&gt;Related&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mongodb.com/blog/post/getting-started-with-mongodb-and-java-part-i&#34;&gt;https://www.mongodb.com/blog/post/getting-started-with-mongodb-and-java-part-i&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>How Much of &#34;The Kotlin Way&#34; Is the Right Way?</title>
      <link>https://preslav.me/2018/12/28/the-kotlin-way/</link>
      <pubDate>Fri, 28 Dec 2018 07:10:00 +0000</pubDate>
      
      <guid>https://preslav.me/2018/12/28/the-kotlin-way/</guid>
      <description>NOTE: This post was originally intended to provoke a discussion, and despite its length, the original goal is still the same. Please, share your feedback on Twitter, Reddit, or Dev.to.
My experience with the JVM dates back from around 2010. Java in those days was a bit different from todays&amp;rsquo; standpoint. Java 6 was the current standard at the time, but most projects I got to work on, were stuck between Java 4 and 5.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;&lt;em&gt;NOTE: This post was originally intended to provoke a discussion, and despite its length, the original goal is still the same. Please, share your feedback on &lt;a href=&#34;https://twitter.com/intent/tweet?text=%40preslavrachev%20%5BADD%20YOUR%20COMMENT%20HERE%5D&amp;amp;url=https://preslav.me/p/72a4a26e-c120-428f-af5d-98f09f88e2db/&amp;amp;related=preslavrachev&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://www.reddit.com/r/Kotlin/comments/aa9anw/q_how_much_of_the_kotlin_way_is_the_right_way/&#34;&gt;Reddit&lt;/a&gt;, or &lt;a href=&#34;https://dev.to/preslavrachev/q-how-much-of-the-kotlin-way-is-the-right-way-3129&#34;&gt;Dev.to&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;My experience with the JVM dates back from around 2010. Java in those days was a bit different from todays&amp;rsquo; standpoint. Java 6 was the current standard at the time, but most projects I got to work on, were stuck between Java 4 and 5. Those were tough beasts. More verbose and tedious to write code in.&lt;/p&gt;

&lt;p&gt;At that time, we began searching for a way to release the burden of writing code, but keep relying on the vast adoption of the JVM. Groovy and Scala were the two alternatives offering more language expressiveness with less boilerplate and ceremony. And, while Groovy somehow never picked up the self-esteem to be seen as something more of a scripting language for build orchestration and runtime in-app plumbing, Scala looked like the bold and sexy future of the JVM.&lt;/p&gt;

&lt;p&gt;That is, until the language and its community ideologically drifted apart from Java. Although most of the existing Java libraries at the time were compatible and accessible from the Scala runtime, those were seen as archaic, tedious to work with, and simply not built &lt;em&gt;&amp;ldquo;the Scala way&amp;rdquo;&lt;/em&gt;. This slogan was used to justify the building of a whole new ecosystem of tools, libraries, and frameworks, written from the ground up with Scala in mind. It is safe to say that nowadays for every Java library out there, one could find two or three Scala equivalents written &lt;em&gt;&amp;ldquo;the Scala way&amp;rdquo;&lt;/em&gt;. I am not much of a Scala expert, but IMHO, this has led to a total separation between the two communities, each re-inventing the wheel its own way.&lt;/p&gt;

&lt;p&gt;Kotlin was supposed to help solve all of that. Having joined the game late enough, JetBrains put a bet on Kotlin&amp;rsquo;s inter-operability with standard Java code. To achieve this, a language has to be perceived as a companion, and not as a true paradigm shift. For the three years I have worked with and followed Kotlin&amp;rsquo;s development, there have been only a few minor occasions when the inter-operability did not work on 100%, and those were more or less edge cases. It seemed that had finally reached the golden mean, where multiple language paradigms can co-exist and their communities cooperate in order to achieve a common goal.&lt;/p&gt;

&lt;p&gt;Yet, this is not quite what is happening. I have seen the birth of a Kotlin-first community of developers, preaching things &lt;em&gt;&amp;ldquo;the Kotlin way&amp;rdquo;&lt;/em&gt;. Soon enough, tools, libraries, and frameworks started appearing, having perfectly working equivalents in Java, but written in &lt;em&gt;&amp;ldquo;idiomatic Kotlin&amp;rdquo;&lt;/em&gt;. I started wondering where I had seen this before ü§î.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t get me wrong, I am 100% for challenging the Status Quo, but by stepping on what already works well, and not merely throwing it off-board, because it was not built &lt;em&gt;&amp;ldquo;the XYZ way&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And what do you think?&lt;/p&gt;
></content:encoded>
      
      <media:content url="https://images.unsplash.com/photo-1517963879433-6ad2b056d712?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/>
      
    </item>
    
    <item>
      <title>Dependency Injection in Python: The Java Guy&#39;s Perspective</title>
      <link>https://preslav.me/2018/12/20/dependency-injection-in-python/</link>
      <pubDate>Thu, 20 Dec 2018 13:34:36 +0000</pubDate>
      
      <guid>https://preslav.me/2018/12/20/dependency-injection-in-python/</guid>
      <description>Dependency Injection (DI) in Python? Seriously? ü§î
At this point, I am expecting people to yell at me for thinking like a Java guy, but just bear with me for a moment, will you? Spoiler: I am going to mention Spring only once in this post, I promise.
NOTE: If you are already familiar with Dependency Injection and want to see it in action, you might want to jump right to the example at the end.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;Dependency Injection (DI) in Python? Seriously? ü§î&lt;/p&gt;

&lt;p&gt;At this point, I am expecting people to yell at me for thinking like a Java guy, but just bear with me for a moment, will you? &lt;em&gt;Spoiler:&lt;/em&gt; I am going to mention Spring only once in this post, I promise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; If you are already familiar with Dependency Injection and want to see it in action, you might want to jump right to &lt;a href=&#34;#a-more-complex-example&#34;&gt;the example&lt;/a&gt; at the end. Otherwise, keep reading. As always, feel free to send me a &lt;a href=&#34;https://twitter.com/intent/tweet?text=%40preslavrachev%20%5BADD%20YOUR%20COMMENT%20HERE%5D&amp;amp;url=https://preslav.me/p/3c4daf3d-607c-49e4-8aa9-c87a61be1697/&amp;amp;related=preslavrachev&#34;&gt;‚úèÔ∏ècomment on Twitter&lt;/a&gt;. Your feedback is more than appreciated.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;let-s-get-things-straight&#34;&gt;Let&amp;rsquo;s Get Things Straight&lt;/h1&gt;

&lt;p&gt;While I am definitely approaching Python software development from my close-to-a-decade  experience building Java software, I am not trying to preach to you a certain style of programming. Take this simply as a different perspective on things. The Python Universe is so immense that it will be a crime to pretend that DI is necessary for every Python project. While certain types of Python projects will definitely benefit from a bit more structure, for many others, DI might become the worst nightmare. I will try to write down my reasons, and leave the final decision to the reader.&lt;/p&gt;

&lt;h1 id=&#34;a-quick-detour-on-dependency-injection&#34;&gt;A Quick Detour on Dependency Injection&lt;/h1&gt;

&lt;p&gt;I will save you the lecture here. I am sure that many of you already know what DI is all about. Perhaps, some of you have already looked at, if not even read Martin Fowler&amp;rsquo;s &lt;a href=&#34;https://martinfowler.com/articles/injection.html&#34;&gt;Dependency Injection essay&lt;/a&gt;. Even if you haven&amp;rsquo;t, don&amp;rsquo;t panic. I will share you a secret, and that is, &lt;strong&gt;you already know DI, and have used it many times,&lt;/strong&gt; even if you haven&amp;rsquo;t used a particular name for it.&lt;/p&gt;

&lt;p&gt;There is one golden prerequisite for Dependency Injection and that is, Separation of Concerns. Put simply, group logic in separable units, and let these units work together, without any of them knowing much about the implementation details of the other. OOP calls such units &lt;em&gt;classes&lt;/em&gt;, and FP, &lt;em&gt;functions&lt;/em&gt;. The point is, &lt;em&gt;units isolate common logic&lt;/em&gt;. Let&amp;rsquo;s add to this the requirement that no unit explicitly instantiates the units it works with (dependencies). Instead, dependencies are passed upon the unit (injected), usually, during its instantiation.&lt;/p&gt;

&lt;p&gt;So, DI is a fancy term for instantiating classes in a top-level module, and passing them as initializer arguments to one another:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Api&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_remote_data&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Api called&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BusinessLogic&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, api: Api):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; api

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do_stuff&lt;/span&gt;(self):
        api_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fetch_remote_data()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;the api returned a result: {api_result}&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# do something with the data and return a result&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# ---&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Api()
    logic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BusinessLogic(api&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;api)

    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(logic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;do_stuff())&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are of course, more Pythonic ways of implementing Dependency Injection. I realize that the one I provided above is very Java-like. I have tried to collect a list of Python-related resources you might want to consult. You will find it at the end of this post.&lt;/p&gt;

&lt;h1 id=&#34;where-explicit-dependency-injection-might-help&#34;&gt;Where Explicit Dependency Injection Might Help&lt;/h1&gt;

&lt;p&gt;I already tried to make it clear that DI is not a silver bullet, and due to Python&amp;rsquo;s versatility of use, it might not fit to every project. In some, it might even hamper the development of the project.&lt;/p&gt;

&lt;p&gt;Python was created to give its developers the freedom to just do things, without sweating much about structure or ceremony, when those are not needed. This is why the Python ecosystem is perfect for scratching out ideas and prototyping, single-purpose CLI tools, or scripts with limited scope and lifetime.&lt;/p&gt;

&lt;p&gt;Yet, for many of these projects, there comes a time, when they grow, or are bound to grow from the onset, and with this growth comes a different set of challenges. Where I see DI fit best, are projects with established requirements, serving a large number of stakeholders. The challenge here is to scale and constantly improve the system, without compromising its stability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Adding DI to your project will potentially&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;increase its testability and reusability, because by design, it allows for easily replacing one component with another (great for mocking, or replacing one concrete implementation with another)&lt;/li&gt;
&lt;li&gt;increase the readability. When applying DI your top-level model becomes sort of an orchestrator, instantiating your units and passing dependencies to them. Although this might add a bit of boilerplate, it helps ensure that all the LEGO-block wiring-up happens in one place, and this place will always be the starting point of your later investigations.&lt;/li&gt;
&lt;li&gt;adds a certain level of common understanding between programmers of different backgrounds. While I am sure that many of you would come up with some more elegant and more Pythonic ways for solving the dependency issue, some of them might be too obscure for non-Python gurus (hi there üëãüèº) and lead to misunderstanding, lost communication, and potentially, compromising the resilience of the end product.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, the boilerplate and ceremony might be quite of an issue for some Python purists.&lt;/p&gt;

&lt;h1 id=&#34;a-more-complex-example&#34;&gt;A More Complex Example&lt;/h1&gt;

&lt;p&gt;I have already mentioned it a few times that doing all the instantiation and passing dependencies around by hand can be a bit tedious. It can also be complicated, because of the order of instantiation. The core dependencies must be instantiated first, the units that depend on them afterwards, and so on, until the top-level units, whose role is usually to coordinate the flow of data among their dependencies.&lt;/p&gt;

&lt;p&gt;There are many Python libraries, which already facilitate this process. Among those, I looked at &lt;a href=&#34;https://github.com/ets-labs/python-dependency-injector&#34;&gt;python-dependency-injector&lt;/a&gt;, &lt;a href=&#34;https://github.com/suned/serum&#34;&gt;serum&lt;/a&gt;, and &lt;a href=&#34;https://github.com/alecthomas/injector&#34;&gt;injector&lt;/a&gt;. I found &lt;a href=&#34;https://github.com/alecthomas/injector&#34;&gt;injector&lt;/a&gt; to be closest to what I have come to know and use on Java - &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt; and &lt;a href=&#34;https://github.com/google/guice&#34;&gt;Guice&lt;/a&gt;. It is not the least verbose, but it gets the job done. Let&amp;rsquo;s see how it works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install injector&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s take the two classes, I have created above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Api&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_remote_data&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Api called&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BusinessLogic&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, api: Api):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; api

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;do_stuff&lt;/span&gt;(self):
        api_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fetch_remote_data()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;the api returned a result: {api_result}&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# do something with the data and return a result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only modification I made, was adding an explicit &lt;a href=&#34;https://www.python.org/dev/peps/pep-0484/&#34;&gt;type hint&lt;/a&gt; to the &lt;code&gt;Api&lt;/code&gt; dependency. This will be used by the library to determine the right object to pass at instantiation.&lt;/p&gt;

&lt;p&gt;Injector, similar to Guice and Spring, adds the concept of a dependency &lt;code&gt;Module&lt;/code&gt;. This is a class that inherits from &lt;code&gt;injector.Module&lt;/code&gt; and has a bunch of methods, each corresponding to the initialization of one dependency or the other:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppModule&lt;/span&gt;(Module):

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@singleton&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@provider&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;provide_business_logic&lt;/span&gt;(self, api: Api) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; BusinessLogic:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; BusinessLogic(api&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;api)

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@singleton&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@provider&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;provide_api&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Api:
        &lt;span style=&#34;color:#75715e&#34;&gt;# there is no complex logic in our case,&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# but you can use this method to hide the complexity of initial &lt;/span&gt;
        configuration
        &lt;span style=&#34;color:#75715e&#34;&gt;# e.g. when instantiating a particular DB connector.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Api()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each of these methods is decorated with &lt;code&gt;@provider&lt;/code&gt; (required) and &lt;code&gt;@singleton&lt;/code&gt; (optional, only if you want to ensure that the object instance will always remain the same). Pay attention to the use of type hinting here too. One the one hand, it makes the dependency module code more readable, on the other, it is used by the injector library to determine the right objects to return.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how to use our classes. We need to create an Injector and pass it an instance of our AppModule.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    injector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Injector(AppModule())

    logic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; injector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(BusinessLogic)
    logic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;do_stuff()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From now on, when you want to obtain an instance which is inside the dependency graph, from outside the graph, you would have to use the injector. Before you start grunting about the rising amount of boilerplate, let me point out that the actual places where you would need to do that, are either your app&amp;rsquo;s main starting points, or API/Web endpoints in the context of a Web application. Actually, if you are building a Flask app, the creator of injector has got you covered. There is an extension for Flask, called &lt;a href=&#34;https://github.com/alecthomas/flask_injector&#34;&gt;flask-injector,&lt;/a&gt; which hides the boilerplate of having to use the injector object directly.&lt;/p&gt;

&lt;p&gt;Back to our injector instance. The real benefit of having dependency modules, is when you have several of them, for running your app in different contexts. The simplest example is testing. Let&amp;rsquo;s create a version of our Api class for testing purposes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestApi&lt;/span&gt;(Api):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_remote_data&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Demo Api called&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming that there might be more classes we&amp;rsquo;d like to mock, we create a separate dependency module for them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestAppModule&lt;/span&gt;(Module):

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@singleton&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@provider&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;provide_api&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Api:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; TestApi()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The real magic happens when creating the injector. You can have as many injectors as you have, and each injector instance can be supplied with as many dependency module configurations as you wish:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    real_injector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Injector(AppModule())
    test_injector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Injector([AppModule(), TestAppModule()])

    real_logic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; real_injector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(BusinessLogic)
    real_logic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;do_stuff()

    test_logic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; test_injector&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(BusinessLogic)
    test_logic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;do_stuff()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Api called
the api returned a result: 42
Demo Api called
the api returned a result: 24
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-end&#34;&gt;The End&lt;/h1&gt;

&lt;p&gt;I will stop here. I hope, if not really having managed to convince you, to have given you a slightly different perspective on things. Until next time!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;related-resources&#34;&gt;Related Resources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/articles/injection.html&#34;&gt;Inversion of Control Containers and the Dependency Injection pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@suneandreasdybrodebel/pythonic-dependency-injection-a-practical-guide-83a1b1299280&#34;&gt;Pythonic Dependency Injection: A Practical Guide - Sune Andreas Dybro Debel - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://python-3-patterns-idioms-test.readthedocs.io/en/latest/index.html&#34;&gt;Python 3 Patterns, Recipes and Idioms - Python 3 Patterns, Recipes and Idioms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://python-dependency-injector.ets-labs.org/introduction/di_in_python.html&#34;&gt;Dependency injection and inversion of control in Python - Dependency Injector 3.14.2 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/injector&#34;&gt;alecthomas/injector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/suned/serum&#34;&gt;suned/serum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ets-labs/python-dependency-injector&#34;&gt;ets-labs/python-dependency-injector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RobertoPrevato/rodi&#34;&gt;RobertoPrevato/rodi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Designing Well-Structured REST APIs with Flask-RestPlus: Part 1</title>
      <link>https://preslav.me/2018/12/02/designing-well-structured-rest-apis-with-flask-restplus-part-1/</link>
      <pubDate>Sun, 02 Dec 2018 15:46:47 +0000</pubDate>
      
      <guid>https://preslav.me/2018/12/02/designing-well-structured-rest-apis-with-flask-restplus-part-1/</guid>
      <description>This is the first part of a two-part series. In this post, I will introduce Flask-RestPlus and demonstrate how to start organising APIs around its simple REST-based conventions. Next time, I will address the topic of request/response marshalling (serialisation) and validation.
A seasoned Spring developer, I felt a bit uneasy when designing and future-proofing a Flask-based API for the first time. I have recently started using Python way beyond my original intention to just play with data, and found Flask to be a super-easy micro-service alternative to Spring Boot or Ktor.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;This is the first part of a two-part series. In this post, I will introduce &lt;a href=&#34;https://flask-restplus.readthedocs.io/en/stable/&#34;&gt;Flask-RestPlus&lt;/a&gt; and demonstrate how to start organising APIs around its simple REST-based conventions. Next time, I will address the topic of request/response marshalling (serialisation) and validation.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A seasoned Spring developer, I felt a bit uneasy when designing and future-proofing a &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt;-based API for the first time. I have recently started using Python way beyond my original intention to just play with data, and found Flask to be a super-easy micro-service alternative to &lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring Boot&lt;/a&gt; or &lt;a href=&#34;https://ktor.io/&#34;&gt;Ktor&lt;/a&gt;. The one thing I was really concerned about, was making sure that the API  request/response format was standardised (think, providing a Swagger schema), well-documented, and validated. While working with Java, much of this would come straight from the compiler itself, due to the static-type nature of the language. When you combine this with a couple of great libraries like &lt;a href=&#34;https://github.com/FasterXML/jackson&#34;&gt;Jackson&lt;/a&gt; and &lt;a href=&#34;http://springfox.github.io/springfox/&#34;&gt;SpringFox&lt;/a&gt;, the API communication gets documented and validated with minimal intrusion to the actual code. In Python, this would require tedious &lt;code&gt;if-else&lt;/code&gt; checks all over the place &amp;hellip; or so I thought.&lt;/p&gt;

&lt;h2 id=&#34;flask-restplus-to-the-rescue&#34;&gt;Flask-RestPlus to the Rescue&lt;/h2&gt;

&lt;p&gt;Unlike &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt;, Flask does not come with batteries included, but there is a whole ecosystem of open-source libraries and extensions contributed by the community. One of these is called &lt;a href=&#34;https://flask-restplus.readthedocs.io/en/stable/&#34;&gt;Flask-RestPlus&lt;/a&gt; and it is the absolute dream-come-true for every Flask API designer. Flask-RestPlus is a &lt;a href=&#34;http://flask.pocoo.org/docs/1.0/extensiondev/&#34;&gt;Flask extension&lt;/a&gt; library, and as the name suggests, it helps ease the building of structured RESTful APIs with minimal setup, and encourages best practices. Flask RestPlus follows certain conventions, but does not insist on them, the way Django does.  In a way, Flask-RestPlus tries to help organise a growing Flask project, but without it losing its minimal overhead, which is the greatest charm of Flask.&lt;/p&gt;

&lt;p&gt;The goal of this series is to start with a simple Flask app, and try to address the following points with a bit of Flask-RestPlus at a time:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Structure and auto-document an API &lt;strong&gt;(Part 1)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ensure request/response payload validation &lt;strong&gt;(Part 2)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;demo-app&#34;&gt;Demo App&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s start with a simple Flask-based API for a conference management application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Flask

app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Flask(__name__)


&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/conferences/&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_all__conferences&lt;/span&gt;():
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    returns a list of conferences
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/conferences/&amp;#34;&lt;/span&gt;, methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_conference&lt;/span&gt;():
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Adds a new conference to the list
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/conferences/&amp;lt;int:id&amp;gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_conference&lt;/span&gt;(id):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Displays a conference&amp;#39;s details
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/conferences/&amp;lt;int:id&amp;gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edit_conference&lt;/span&gt;(id):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Edits a selected conference
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Installing Flask-RestPlus is easy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install Flask-RestPlus&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s simply introduce an Api object for now, try to wrap our app instance with it, replace the routing decorators, and see what happens:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Flask
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask_restplus &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Api

app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Flask(__name__)
api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Api(app&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app)


&lt;span style=&#34;color:#a6e22e&#34;&gt;@api.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/conferences/&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_all__conferences&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;@api.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/conferences/&amp;#34;&lt;/span&gt;, methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_conference&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;@api.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/conferences/&amp;lt;int:id&amp;gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_conference&lt;/span&gt;(id):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Displays a conference&amp;#39;s details
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@api.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/conferences/&amp;lt;int:id&amp;gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edit_conference&lt;/span&gt;(id):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Edits a selected conference
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As soon as the app starts, we will get the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AttributeError: &#39;function&#39; object has no attribute &#39;as_view&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because if you want to use RestPlus for some of your Flask functions, you have to enclose them in a scoping class. Not only that, but inside the enclosing class, you should name your methods, corresponding to the HTTP methods that REST is based on: GET, POST, PUT, and DELETE:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@api.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/conferences/&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConferenceList&lt;/span&gt;(Resource):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        returns a list of conferences
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before anyone starts objecting, let me explain why this is helpful. Flask-RestPlus uses the Flask concept of &amp;ldquo;Pluggable Views&amp;rdquo; to introduce &lt;code&gt;Resource&lt;/code&gt; (as in, REST resource).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s be honest. While most Flask applications start simple, many of them outgrow the initial idea, and cramming several handler functions in the main module scope quickly becomes a mess. This is why &lt;a href=&#34;http://exploreflask.com/en/latest/blueprints.html&#34;&gt;Flask Blueprints&lt;/a&gt; exist to help split common functionality into multiple modules.&lt;/p&gt;

&lt;p&gt;Flask-RestPlus makes great use of Blueprints too, as I will demonstrate later, but Resources go one level of granularity further. A Resource class can have multiple methods, but each one should be named after one of the accepted HTTP verbs. What if you need more than one &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt; method for your API? Well, create multiple Resource classes and put each method in the corresponding resource class. It might look a little overwhelming at first, coming from the cut-the-boilerplate nature of Flask, but with a bit of playing around, it won&amp;rsquo;t be a brainer at all, and it will pay off tremendously in the long run.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how our tiny app will look after the transformations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Flask
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask_restplus &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Api, Resource

app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Flask(__name__)
api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Api(app&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app)


&lt;span style=&#34;color:#a6e22e&#34;&gt;@api.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/conferences/&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConferenceList&lt;/span&gt;(Resource):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        returns a list of conferences
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Adds a new conference to the list
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;@api.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/conferences/&amp;lt;int:id&amp;gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Conference&lt;/span&gt;(Resource):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(self, id):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Displays a conference&amp;#39;s details
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(self, id):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Edits a selected conference
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this tiny bit of overhead (if you even consider this any overhead at all), you get so much in return. Start the app and point to &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;. You will see that the index page has turned into a Swagger UI, which shows the already defined API endpoints, neatly organised into categories (namespaces):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2018/december/image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is great for documenting, playing with, and sharing you API schema around. Yet, this is by far not the only thing that Flask-RestPlus does for you. It goes beyond simply documenting the API, in ensuring that the API is compliant with the schema. Put simply, Flask-RestPlus makes sure that if certain request parameters are marked as mandatory, or if request/response models are supposed to have a certain structure, those are checked and validated at runtime. In my opinion, this is real advantage of Flask-RestPlus, sitting on top of a Flask application. The current example is too simple to demonstrate the real power of request/response marshalling and validation, but both will be throughly described in Part 2.&lt;/p&gt;

&lt;h3 id=&#34;namespaces&#34;&gt;Namespaces&lt;/h3&gt;

&lt;p&gt;Namespaces are optional, and add a bit of additional organisational touch to the API, mainly, from a documentation point of view. A namespace allows you to group related Resources under a common root, and is simple to create:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ns_conf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;namespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;conferences&amp;#39;&lt;/span&gt;, description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Conference operations&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To bring certain Resources under a given namespace, all you need to do, is to replace &lt;code&gt;@api&lt;/code&gt; with &lt;code&gt;@ns_conf&lt;/code&gt;. Notice also that the name of the namespace replaces the name of the resource, so endpoints can simply to refer to &lt;code&gt;/&lt;/code&gt;, instead of copying the name of the resource time and again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Flask
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask_restplus &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Api, Resource

app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Flask(__name__)
api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Api(app&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app)
ns_conf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;namespace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;conferences&amp;#39;&lt;/span&gt;, description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Conference operations&amp;#39;&lt;/span&gt;)


&lt;span style=&#34;color:#a6e22e&#34;&gt;@ns_conf.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConferenceList&lt;/span&gt;(Resource):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        returns a list of conferences
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Adds a new conference to the list
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;@ns_conf.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;lt;int:id&amp;gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Conference&lt;/span&gt;(Resource):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(self, id):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Displays a conference&amp;#39;s details
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(self, id):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Edits a selected conference
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One will notice afterwards that the Swagger UI display has changed too, to reflect the namespacing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2018/december/image-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;blueprints&#34;&gt;Blueprints&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://flask.pocoo.org/docs/blueprints/#blueprints&#34;&gt;Flask Blueprints&lt;/a&gt; are a popular way of designing modular applications. The same applies to Flask-RestPlus. The production version of our application will certainly outgrow the four endpoints we started with. There might be other resources, or at the very least, you might want to move to move your API away from the root of your app. Both cases are a perfect candidate for a Blueprint.  Let&amp;rsquo;s move all of our API endpoints under &lt;code&gt;/api/v1&lt;/code&gt;, without touching the routes of even one of them. This example is coming straight from the Flask-RestPlus &lt;a href=&#34;https://flask-restplus.readthedocs.io/en/stable/scaling.html#use-with-blueprints&#34;&gt;documentation&lt;/a&gt;, and is illustrative enough to help close this chapter of the journey:&lt;/p&gt;

&lt;p&gt;Create a Blueprint the usual way, and instead of wrapping our app instance with the RestPlus API,  we will wrap the Blueprint instead. This way, independent of our app, we are free to move our API part into a different module: (e.g. &lt;code&gt;blueprint/api.py&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Blueprint
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask_restplus &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Api

blueprint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Blueprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api&amp;#39;&lt;/span&gt;, __name__)
api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Api(blueprint)

&lt;span style=&#34;color:#75715e&#34;&gt;# Bring in the rest of our API code here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This leaves only a tiny bit of bridging code to introduce the Blueprint to the main app, and set the URL prefix. The next time you start your app, the API endpoints will be accessible only under the specified URL prefix (&lt;code&gt;/api/v1&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Flask
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; apis &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; blueprint &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; api

app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Flask(__name__)
app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;register_blueprint(api, url_prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/api/1&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Last but not least, it is always a good idea to move the Swagger UI documentation away from the root. As in everything else in RestPlus, this part is extremely ease, too. You can override the default location by passing an additional parameter to the initialiser:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Api(app&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app, doc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/docs&amp;#39;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;This sums up the first part of my series. I hope that it was informative, and will help you structure your Flask-based REST APIs better in the future. Till next time!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.freecodecamp.org/structuring-a-flask-restplus-web-service-for-production-builds-c2ec676de563&#34;&gt;How to structure a Flask-RESTPlus web service for production builds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
></content:encoded>
      
      <media:content url="https://images.unsplash.com/photo-1531083894382-04a4f09c998f?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=774784f0805880a8b64693a15540c1ef" medium="image"/>
      
    </item>
    
    <item>
      <title>I Made a Mastodon Account and so Far I like It</title>
      <link>https://preslav.me/2018/08/19/i-made-a-mastodon-account-and-i-like-it/</link>
      <pubDate>Sun, 19 Aug 2018 17:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2018/08/19/i-made-a-mastodon-account-and-i-like-it/</guid>
      <description>So, you might have heard about Mastodon. A micro-blogging alternative to Twitter, boasting itself for being 100% open-source, and for its decentralised nature.
  Unlike traditional social networks like Twitter and Facebook, Mastodon is not driven by a single company profiting by selling your identity to others, but by a network of instance maintainers and supporters who put their own money on the line. Ensuring that Mastodon is going to live in the long term sounds easy&amp;hellip;on paper.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;So, you might have heard about &lt;a href=&#34;https://joinmastodon.org/&#34;&gt;Mastodon&lt;/a&gt;. A micro-blogging alternative to Twitter, boasting itself for being 100% open-source, and for its decentralised nature.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/IPSbNdBmWKE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;Unlike traditional social networks like Twitter and Facebook, Mastodon is not driven by a single company profiting by selling your identity to others, but by a network of instance maintainers and supporters who put their own money on the line. Ensuring that Mastodon is going to live in the long term sounds easy&amp;hellip;on paper. Many of the instance maintainers gladly accept donations through &lt;a href=&#34;https://www.patreon.com/ashfurrow&#34;&gt;Patreon&lt;/a&gt; or other means, and of course, adding your own instance to the network is relatively easy. Whether this is actually going to work in the long run, is a different question. There has been a list of alleged P2P Facebook/Twitter killers, which for one reason or another, have failed to the critical mass needed for mass adoption. I am willing to bet on a hopeful &amp;ldquo;YES&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Being an early adopter of all things digital, and annoyed by the direction that Twitter is taking, I signed up for an account yesterday: &lt;a href=&#34;https://mastodon.technology/@preslavrachev&#34;&gt;@preslavrachev@mastodon.technology&lt;/a&gt;. I gladly encourage everyone to join and follow me. In case you ask yourselves what &lt;a href=&#34;https://mastodon.technology/about&#34;&gt;@mastodon.technology&lt;/a&gt; has to do with my username, this is the name of the instance where I registered my account.&lt;/p&gt;

&lt;p&gt;Instance names are somewhat like email domains. Being on a particular instance ensures that one will get the entire flow of communication inside the given instance. Just like email however, cross-instance communication is an essential part of what makes Mastodon work. In fact, a large percentage of the people I follow now are not on the same instance as I am but communicate flawlessly with each other.&lt;/p&gt;

&lt;p&gt;Just like with email, the real advantage of having multiple identities on Mastodon comes when one wants to claim allegiance to a certain organisation, group, or topic of interest. Say, your company decided to run a private Mastodon instance. Having an identity there would allow you to follow locally shared chatter, but also prove to the rest of the Mastodon Universe that you belong to the given organisation. As of yet, I haven&amp;rsquo;t yet figured out how multi-identity management really works, so I might have to leave this part for a later post.&lt;/p&gt;

&lt;p&gt;The last 24 hours of being on Mastodon feel very much like the early days of Twitter. When I joined Twitter in 2008, it was still a very turbulent time for both the service and the team. There have been way too many occasions when the fail whale appeared on my screen, something which I have not really witnessed during the past couple of years.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2019/05/fail-whale.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With the frequent downtimes and shakes inside the team, something else slowly started going away - the community spirit of the early days. Don&amp;rsquo;t get me wrong, I still use Twitter on a daily basis, though somewhat automatically. The community is still there, it is just that the bond and the friendly chatter of the early days is gone. It got replaced by incessant advertising (which I fervently mute on every occasion) and a stream of posts clearly optimised to target eyeballs and clicks. And of course, the clear statement to third-party app developers. I still remember the early days, when budding app or Web developers would use the developer-friendly Twitter API and boast with the client they developed. In no small terms, it was the developers who helped Twitter reach mainstream fame, and it is just sad that things had to reach their current state. Looks like my thoughts are being shared by the community as well:&lt;/p&gt;

&lt;figure&gt;
&lt;iframe src=&#34;https://mastodon.social/@bastianallgeier/100577435213222907/embed&#34; class=&#34;mastodon-embed&#34; style=&#34;max-width: 100%; border: 0&#34; width=&#34;400&#34;&gt;&lt;/iframe&gt;&lt;script src=&#34;https://mastodon.social/embed.js&#34; async=&#34;async&#34;&gt;&lt;/script&gt;
&lt;/figure&gt;

&lt;p&gt;Back to Mastodon, during my first 24 hours, I spent an hour browsing among the many available alternative clients for both iOS and macOS. I spent another couple of hours waiting for the instance to go back up after a maintenance downtime that took longer than expected. Everyone else in my place would have backed off and left, but this just raised my level of excitement. It showed me that there is some actual work needed, and that the community is working hard to put things where they should be. I can but clap in respect to the efforts that the maintainers of my instance put yesterday, in order to ensure its stability in the upcoming days and weeks. During the hours when the instance was online, I managed to set up a few friendships and engaged in some interesting discussions. It seems like a bunch fo the early spirit is back. People reply more often, and others join in to the chat. I have the feeling that conversations flow more easily.&lt;/p&gt;

&lt;p&gt;In many respects, being on Mastodon feels like the Wild West. There are many open questions I have, like how to manage multiple accounts, what would happen with my identity, if an instance dies. I am not yet sure if I am going to leave Twitter for Mastodon (not in the foreseeable future, at least), but it sure feels exciting to try a refreshing look at what Twitter might have evolved into, had it not been forced to turn into an ordinary business.&lt;/p&gt;
></content:encoded>
      
      <media:content url="https://preslav.me/images/2019/05/mastodon-wallpaper.png" medium="image"/>
      
    </item>
    
    <item>
      <title>Data Science on Your iPad</title>
      <link>https://preslav.me/2018/08/12/data-science-on-your-ipad/</link>
      <pubDate>Sun, 12 Aug 2018 05:29:00 +0000</pubDate>
      
      <guid>https://preslav.me/2018/08/12/data-science-on-your-ipad/</guid>
      <description>This article is a follow-up transcription to a talk I recently gave at a local Munich machine learning meetup. Unlike my previous talk, this time I wanted to convey the idea of using an iPad for actively running data science experiments, as opposed to passively consuming information. I illustrated my point with a few example iOS applications I personally use on a daily basis, which I hope would be good starting points to get the audience interested in the idea.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;This article is a follow-up transcription to a talk I recently gave at a local &lt;a href=&#34;https://www.meetup.com/Hacking-Machine-Learning&#34;&gt;Munich machine learning meetup&lt;/a&gt;. Unlike &lt;a href=&#34;https://preslav.me/2018/05/25/my-first-machine-learning-talk/&#34;&gt;my previous talk&lt;/a&gt;, this time I wanted to convey the idea of using an iPad for actively running data science experiments, as opposed to passively consuming information. I illustrated my point with a few example iOS applications I personally use on a daily basis, which I hope would be good starting points to get the audience interested in the idea. Being an iOS developer, who has once built a 3rd-party App Store search engine, I know first-hand how difficult it is to find anything inside the App Store, more so, when carefully specifying what one is looking for. Therefore, I believe that if nothing else, even having this one collection of links should be a valuable starting point for further exploration.&lt;/p&gt;

&lt;p&gt;Before I get to the apps, let me start with some background:&lt;/p&gt;

&lt;h2 id=&#34;why-a-tablet&#34;&gt;Why a Tablet?&lt;/h2&gt;

&lt;p&gt;Although it might no longer get the media&amp;rsquo;s attention as the tech sector&amp;rsquo;s latest sexy gadget, the tablet has replaced the laptop/desktop in a number of activities, where one previously needed a &amp;ldquo;real machine&amp;rdquo;. What is more, the tablet is slowly getting out of people&amp;rsquo;s notion as being handy coffee table device for content consumption. It is rather becoming the preferred content creation choice of many, particularly, creative professions, such as writers, musicians, and visual artists. This has caught the eye of companies like Apple, who have decided to double-down on the iPad&amp;rsquo;s Pro model, targeted primarily at professionals.&lt;/p&gt;

&lt;p&gt;If there is one thing that could describe our generation best, this would be our constant state of movement. We spend so much time commuting, or in some form of passive travel. We might as well try to start reclaiming some of this time and use it for creative and productive activities. This is where a tablet fits in for me.&lt;/p&gt;

&lt;p&gt;Even at the bulkiest of sizes, an iPad is more convenient to carry around than a laptop. It is &amp;ldquo;always on&amp;rdquo;, can be used while sitting, lying or standing, with or without a keyboard, and requires less interactions than a laptop. More than anything else, I find the level of multitasking exactly right for this type of medium. Indeed, one can do way less things at the same time on an iPad than one can do using a laptop. I tend to consider this a feature rather than a shortcoming: less multitasking =&amp;gt; less distraction, i.e. more immersion.&lt;/p&gt;

&lt;p&gt;Although my daily work involves sitting behind a laptop and crafting complex systems, it is rarely behind the laptop where these ideas originate. I feel most creative when discussing things with people or when I drift away somewhere outside, my iPad in my hand.&lt;/p&gt;

&lt;p&gt;Now back to the main topic&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;coding-on-an-ipad&#34;&gt;Coding on an iPad?&lt;/h2&gt;

&lt;p&gt;It is certainly doable, and getting used to it takes way less time than one might expect. As an example, take developer Richard Morgan, who &lt;a href=&#34;https://www.imore.com/starsceptre-ios-game-was-entirely-coded-ipad&#34;&gt;developed an iOS game on his iPad&lt;/a&gt;, entirely during his commute around London. Everything is possible when you have the right mindset and the right tools.&lt;/p&gt;

&lt;p&gt;As for the tools, there are quite a few good ones, hidden inside the App Store. In fact, code editors for iOS have existed even before the release of the original iPad. Among them, many in-app IDEs of sorts. Yet, it wasn&amp;rsquo;t until last year, when I started seriously taking look at the possibility writing code and running it entirely on an iPad. In 2017, Apple &lt;a href=&#34;https://www.macstories.net/linked/apples-app-store-guidelines-now-allow-executable-code-in-educational-apps-and-developer-tools/&#34;&gt;permitted&lt;/a&gt; the sharing and downloading of executable code on iOS devices, for teaching, learning and personal development purposes. A validation that writing code on iOS is here to stay.&lt;/p&gt;

&lt;p&gt;The apps below are in no particular order, besides the fact that I will be specifically looking at Pythonista later on. All apps are paid, which is something I firmly stand behind and support, yet this post is no product or service endorsement of any kind. I am just a happy customer:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;App Name&lt;/th&gt;
&lt;th&gt;Languages&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://omz-software.com/pythonista/&#34;&gt;Pythonista 3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Python 2 / 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://codea.io/&#34;&gt;Codea&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Lua&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://continuous.codes/&#34;&gt;Continuous&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C# / F# .NET&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://itunes.apple.com/gb/app/irstudio/id1173749340&#34;&gt;iRstudio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;¬†R&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://itunes.apple.com/gb/app/analyser/id1083042861?mt=8&#34;&gt;Analyser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/swift-playgrounds/id908519492&#34;&gt;Playgrounds&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Swift&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;pythonista&#34;&gt;Pythonista&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://omz-software.com/pythonista/&#34;&gt;Pythonista&lt;/a&gt; is one the few apps, just like &lt;a href=&#34;https://ia.net/writer&#34;&gt;iA Writer&lt;/a&gt; (which I am using right now to write this post), which IMHO, deserves to come on an iPad pre-installed. To those having tried the Swift Playgrounds app on an iPad, it is just mere peanuts in comparison with what Pythonista offers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fully featured support for both Python 2 and Python 3&lt;/li&gt;
&lt;li&gt;Excellent documentation, keyboard extensions, and code completion&lt;/li&gt;
&lt;li&gt;Has an integrated debugger, a property inspector, and its own REPL-like console&lt;/li&gt;
&lt;li&gt;Provides extensions for writing GUIs and communication with other apps on your device&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2018/august/pythonista-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2018/august/pythonista-2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/UYIZlqQPusw&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Pythonista comes pre-packed with a ton of libraries we love and use every day: NumPy, Matplotlib, Requests, BeatufulSoup, etc. Yet, lacks some of our favourites, due to Apple&amp;rsquo;s restrictions: Pandas, SciPy, Scikit-Learn, and unfortunately, TensorFlow. There are other apps like
&lt;a href=&#34;https://itunes.apple.com/gb/app/analyser/id1083042861?mt=8&#34;&gt;Analyser&lt;/a&gt; and the now defunct Computable, which feature many of those as part of the app bundle, which lets me remain optimistic that we will see many of those included in future releases of Pythonista too.&lt;/p&gt;

&lt;p&gt;Pythonista is great for quickly scrapping ideas, and doing exploratory data analysis. In fact, I am running most of my early-stage exploratory analysis on cryptocurrency pricing directly in the app. It is absolutely indispensable when learning new concepts, be those Python, or math / science-related. Last but not least, the integrated GUI and extension capabilities allow for creating entire iOS applications using Python. Think about it. An iOS app, built using Python, using only an iPad. It can&amp;rsquo;t get better than this.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/a7QcX4Ke3Hc&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;what-about-jupyter&#34;&gt;What about Jupyter?&lt;/h2&gt;

&lt;p&gt;Indeed, what about &lt;a href=&#34;https://jupyter.org/&#34;&gt;Jupyter&lt;/a&gt;? Unless you have been living in a cave, and self-proclaimed yourself a data scientist, you should know that Jupyter  Notebook, and similar tools which mix code and narrative have taken the scientific world by storm. Moreover, Jupyter Notebook is entirely Web-based. Therefore, it shouldn&amp;rsquo;t be a big deal to run your private Jupyter instance, or use of the many readily available instances from &lt;a href=&#34;https://notebooks.azure.com/&#34;&gt;Microsoft&lt;/a&gt;, &lt;a href=&#34;https://www.kaggle.com/kernels&#34;&gt;Kaggle&lt;/a&gt;, &lt;a href=&#34;https://colab.research.google.com/&#34;&gt;Google&lt;/a&gt;, and many other providers. My answer to this is &lt;strong&gt;yes and no&lt;/strong&gt;. Although Jupyter Notebook is Web-based and technically opens up in mobile Safari, the actual usability of the Web version on mobile is less than ideal. Browsing through and reading code somehow works. It is the editing of code, where things get really painful. Many of the beloved Jupyter shortcuts are not supported, due to the lack of corresponding keys on the iPad&amp;rsquo;s keyboard. When trying to type inside a cell, the browser tries to compensate by zooming in in and out in a horrible fashion. A very, very unpleasant thing.&lt;/p&gt;

&lt;p&gt;So far, so good, but there must be an app that brings the best of Jupyter and the native iOS experience together, right? Indeed, but a bit later on that. First, a word about Computable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://computableapp.com/index_old.html&#34;&gt;Computable&lt;/a&gt; was an app that promised to be the best of Pythonista, with  even more DS libraries under the hood, and its own native Jupyter support. The ultimate bliss.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.computableapp.com/img/keyboard@2x.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h6 id=&#34;computable-in-action-photo-source-http-www-computableapp-com-index-old-html&#34;&gt;Computable in Action. &lt;a href=&#34;http://www.computableapp.com/index_old.html&#34;&gt;Photo Source&lt;/a&gt;&lt;/h6&gt;

&lt;p&gt;Sadly, the app is no longer available. It was pulled from the App Store in 2015 for various reasons, but the developer was kind enough to &lt;a href=&#34;https://github.com/ktraunmueller/Computable&#34;&gt;put the original code up on GitHub&lt;/a&gt;, and make it open-source. In fact, as far as I know, I have been the first one to &lt;a href=&#34;https://github.com/preslavrachev/Computable&#34;&gt;fork&lt;/a&gt; the repository, and I am keen on trying to at least trying to revive it. I am looking for other contributors as well, so anyone willing to help is more than welcome.&lt;/p&gt;

&lt;p&gt;Now, back to my dilemma. Indeed, there is a great app I discovered last year, which brings the best of both worlds. It is called
&lt;a href=&#34;https://juno.sh/&#34;&gt;Juno&lt;/a&gt; and it is a slick, brand new, native iOS client for working with Jupyter Notebook and JupyterLab instances.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://navoshta.com/images/posts/juno/screenshot_h_01@2x.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h6 id=&#34;photo-source-https-navoshta-com&#34;&gt;&lt;a href=&#34;https://navoshta.com&#34;&gt;Photo Source&lt;/a&gt;&lt;/h6&gt;

&lt;p&gt;Juno will easily connect to a self-hosted Jupyter server, or to a cloud-provided Jupyter VM (e.g. Azure, CoCalc, and many more coming soon). It also supports &lt;a href=&#34;https://mybinder.org/&#34;&gt;Binder&lt;/a&gt;, for a series of pre-made tutorial notebooks, which is ideal for people to get on board without yet having an actual Jupyter instance running.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6QNFi4EIz6U&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Indeed, the lack of working truly offline might be a show-stopper for some, but I am more than sure that the developers are working hard to address this in future versions. Understanding the difficulties of having all Python libraries locally under the hood, I can only wish for an easy way to browse through, and perhaps, locally caching pre-rendered Jupyter notebooks for later reference. This would be great, and one won&amp;rsquo;t have to render those to PDF or something more obscure.&lt;/p&gt;

&lt;h2 id=&#34;a-few-more-apps&#34;&gt;A few more apps&lt;/h2&gt;

&lt;p&gt;Before closings have decided to reiterate on my original statement that  the App Store is full of hidden gems which unfortunately, often did not really get the credit they deserve. This is the reason why I decided to share a few complementary apps that professionals from all disciplines will surely be interested in trying out. As before, those are not in any particular order, and I am not endorsing any of them, just sharing my personal opinion.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;th&gt;Apps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Taking Notes and Documenting&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://happenapps.com/#quiver&#34;&gt;Quiver&lt;/a&gt;, &lt;a href=&#34;https://ia.net/writer&#34;&gt;iAWriter&lt;/a&gt;, &lt;a href=&#34;http://www.bear-writer.com/&#34;&gt;Bear&lt;/a&gt;, &lt;a href=&#34;https://fsnot.es/&#34;&gt;FSNotes&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Source Control&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://workingcopyapp.com/&#34;&gt;Working Copy&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SSH and Terminal Emulation&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.termius.com/&#34;&gt;Termius&lt;/a&gt;, &lt;a href=&#34;https://panic.com/prompt/&#34;&gt;Prompt&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;Last but not least, here are &lt;a href=&#34;https://speakerdeck.com/preslavrachev/data-science-on-your-ipad&#34;&gt;my slides&lt;/a&gt; from the talk. Until next time!&lt;/p&gt;
></content:encoded>
      
      <media:content url="https://images.unsplash.com/photo-1517421189533-dbc3211edf9a?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/>
      
    </item>
    
    <item>
      <title>Live-reloading of Python Modules in the Python REPL / IPython / Jupyter Console</title>
      <link>https://preslav.me/2018/04/22/live-reloading-of-python-modules/</link>
      <pubDate>Sun, 22 Apr 2018 04:14:00 +0000</pubDate>
      
      <guid>https://preslav.me/2018/04/22/live-reloading-of-python-modules/</guid>
      <description>Often, I would work on a Python module and add changes to it live, which I would then want to test immediately. Piece of cake! Add the changes and execute the script again. Well, that‚Äôs certainly a way, but as modules get bigger, they tend to import other modules, or do some preliminary setup work.
With time, I have developed this practice of opening up a Python REPL (though I recommend IPython or the Jupyter Console for that), importing my in-progress module and singling out separate functions I would like to test.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;Often, I would work on a Python module and add changes to it live, which I would then want to test immediately. Piece of cake! Add the changes and execute the script again. Well, that‚Äôs certainly a way, but as modules get bigger, they tend to import other modules, or do some preliminary setup work.&lt;/p&gt;

&lt;p&gt;With time, I have developed this practice of opening up a Python REPL (though I recommend IPython or the Jupyter Console for that), importing my in-progress module and singling out separate functions I would like to test. The problem is, when I do changes to the Python code (like, add a new function), they are not immediately usable, because neither the Python REPL, nor IPython / Jupyter would auto-reload them.&lt;/p&gt;

&lt;h2 id=&#34;give-me-the-code&#34;&gt;Give me the code&lt;/h2&gt;

&lt;p&gt;Yes, we are coming to that&lt;/p&gt;

&lt;h3 id=&#34;general-way&#34;&gt;General Way&lt;/h3&gt;

&lt;p&gt;Python 3 supports inline reloading of modules using a function called, well clever enough, &lt;code&gt;reload&lt;/code&gt;. It used to be a built-in function in Python 2, but this is no longer the case. If you are using Python 3.2+, you should import it extra:&lt;/p&gt;

&lt;p&gt;For Python 3.2 and 3.3:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; importlib
importlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reload(some_module)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Python 3.4+:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; imp
imp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reload(some_module)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ipython-jupyter-magic&#34;&gt;IPython/Jupyter Magic&lt;/h3&gt;

&lt;p&gt;Jupyter comes with a set of extensions only applicable to the Jupyter/iPython sessions, called &lt;a href=&#34;https://ipython.org/ipython-doc/3/interactive/magics.html&#34;&gt;magics&lt;/a&gt;. One of these ‚Äúmagics‚Äù is the ability to load custom extensions, &lt;a href=&#34;http://ipython.readthedocs.io/en/stable/config/extensions/index.html&#34;&gt;one of which&lt;/a&gt; allows auto-reloading of modules. To enable this, you should add the following two commands, before any imports:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;load_ext autoreload
&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;autoreload &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# you can check out the the documentation for the rest of the autoreaload modes&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# by apending a question mark to %autoreload, like this:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# %autoreload?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, as soon as you hit &lt;code&gt;Save&lt;/code&gt; in your code editor, you should be able to re-run a Jupyter cell or an iPython line again, and if it is calling your  module, it should automatically call the latest version.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://support.enthought.com/hc/en-us/articles/204469240-Jupyter-IPython-After-editing-a-module-changes-are-not-effective-without-kernel-restart&#34;&gt;Jupyter / IPython: After editing a module, changes are not effective without kernel restart ‚Äì Enthought Knowledge Base&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/5364050/reloading-submodules-in-ipython#5399339&#34;&gt;python - Reloading submodules in IPython - Stack Overflow&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>How to Use Twitter More Efficiently with These Hidden Search Features</title>
      <link>https://preslav.me/2018/04/02/how-to-use-twitter-more-efficiently-with-these-hidden-search-features/</link>
      <pubDate>Mon, 02 Apr 2018 04:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2018/04/02/how-to-use-twitter-more-efficiently-with-these-hidden-search-features/</guid>
      <description>Twitter can be a mess sometimes. If you follow tons of people, it‚Äôs easy to get lost in the torrent of constant updates. This was one of the reasons why Twitter decided to move away from the purely chronological timeline a couple of years ago. In a move that almost ditched the diehard Twitter fans in favor of the mainstream, predominantly passive content consumers, the company started pushing more and more in favour of algorithmically adjusted timelines, much like Facebook does it.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;Twitter can be a mess sometimes. If you follow tons of people, it‚Äôs easy to get lost in the torrent of constant updates. This was one of the reasons why Twitter decided to move away from the purely chronological timeline a couple of years ago. In a move that almost ditched the diehard Twitter fans in favor of the mainstream, predominantly passive content consumers, the company started pushing more and more in favour of algorithmically adjusted timelines, much like Facebook does it.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Starting today you can choose to try our new feature, so you&amp;#39;ll never miss important Tweets from people you follow: &lt;a href=&#34;https://t.co/fS1axkDiUh&#34;&gt;https://t.co/fS1axkDiUh&lt;/a&gt;&lt;/p&gt;&amp;mdash; Twitter (@Twitter) &lt;a href=&#34;https://twitter.com/Twitter/status/697420917253668868?ref_src=twsrc%5Etfw&#34;&gt;February 10, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;A couple of years later, some might argue that this was a good move, others, that it kills the natural springing momentum which is what made Twitter what it is today. I personally tend to stay away from the algorithmic timeline, which is why I am mostly relying on TweetBot ‚Äî perhaps, one of the last bastions of the real, unsavored Twitter experience.&lt;/p&gt;

&lt;p&gt;To keep on top of the stream, I have devised a series of heuristics that help me filter the massive Twitter stream down to what matters to me. Down to where real, actual human discussions are happening. Because Twitter is about active engagement and not just scrolling around, right? Let me share my few tips with you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;: Many of the search parameters have remained largely undocumented, so I cannot really guarantee that they will be around forever.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-basics&#34;&gt;The Basics&lt;/h1&gt;

&lt;p&gt;Since the beginning of time, there has been a &lt;a href=&#34;https://twitter.com/search-advanced&#34;&gt;page&lt;/a&gt; on the Twitter website that allowed you to perform some of what they called ‚Äúadvanced search‚Äù operations. If you type a few queries and see how they get executed in the search box, you can deduce the syntax for a couple of basics that I am sure, most of you have learned by now:&lt;/p&gt;

&lt;h2 id=&#34;exact-phrase-matching&#34;&gt;&lt;strong&gt;Exact phrase matching&lt;/strong&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;this query will be treated like a whole phrase&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;boolean-operators&#34;&gt;&lt;strong&gt;Boolean operators&lt;/strong&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;word1 word2 OR word3 -word4 -word5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Word1&lt;/code&gt; and &lt;code&gt;word2&lt;/code&gt; will be treated as ‚Äúmust be present‚Äù, whereas &lt;code&gt;word3&lt;/code&gt; is optional, and &lt;code&gt;word4&lt;/code&gt; and &lt;code&gt;word5&lt;/code&gt; will not be present in any of the search results.&lt;/p&gt;

&lt;p&gt;As with any syntax that allows boolean expressions, you can also put words in parentheses, if you think this will help make the syntax easier to understand. In my experience, parentheses actually made the syntax more complex. At the end, it is up to you. All you have to remember is that if you don‚Äôt explicitly put an OR or a minus before a word, the relation between words is always AND, all of them must appear in the end result.&lt;/p&gt;

&lt;h1 id=&#34;social-engagement-thresholds&#34;&gt;Social Engagement Thresholds&lt;/h1&gt;

&lt;p&gt;Moving to the less documented stuff. How many of you did you know that you can apply minimum thresholds of favorites, retweets, and even replies as part of your search?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my search query min_retweets:5 min:faves:5 min_replies:5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How cool is that? I discovered this myself a couple of years ago, while hacking around TweetDeck. It was the first Twitter app that allowed something like that, so I did not hesitate to look under the hood. Turns out, it was pretty simple. All you need to do, is apply any of the following as part of your search query, and results will get filtered to only those that that match desired level of engagement. Of course, you will have to play around adjusting the desired numbers. Depending on the popularity of the rest of your search, the result might return too little or too much. You have to also keep in mind that the different actions were designed with different intentions in mind, and this will reflect in your search results. While the number of faves and retweets might be an indication that the particular tweet is viral (ideal for news and sudden events), the number of replies indicates narrative or content provoking a discussion.&lt;/p&gt;

&lt;p&gt;Two tiny things before I move on:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;As with the rest of the syntax, you can apply boolean logic operators here too. So the following query:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;   my search query min_retweets:5 OR min:faves:5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;will return results that match either of the engagement thresholds, or both.
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;The results are limited back in time to the most recent 10 days.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;search-in-lists&#34;&gt;Search in Lists&lt;/h2&gt;

&lt;p&gt;Another relatively unknown keyword is the &lt;code&gt;list&lt;/code&gt; one. It allows you to filter your search results only to tweets written by members of a particular list. Keeping people in thematically curated lists instead of, or as a supplement to following, is a whole other topic, which I‚Äôll elaborate on in another post. Generally, if you organize people around topics, it will be way easier for you follow streams where things roughly revolve around the same topic, instead of trying to stay up-to-date with your timeline.&lt;/p&gt;

&lt;p&gt;Back to the syntax, this is how you can restrict you search query to a given list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list:username/list_name my search query
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Needless to say, Boolean logic, as well as all the previous syntax rules apply here too.&lt;/p&gt;

&lt;h2 id=&#34;content-type-filters-and-excludes&#34;&gt;Content Type Filters and Excludes&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; keyword allows you to specify whether:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;tweet results include a certain feature:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter:links&lt;/code&gt; - links to Web sites&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter:news&lt;/code&gt; - tweets from or containing links to identified news sources&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter:mentions&lt;/code&gt; - tweets containing &lt;code&gt;@mentions&lt;/code&gt; inside the tweet content&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter:replies&lt;/code&gt; - tweets that are explicit replies. Keep in mind that this has no effect on the tweet containing &lt;code&gt;mentions&lt;/code&gt;. Those should be explicitly filtered with the above mentioned &lt;code&gt;filter:mentions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter:media&lt;/code&gt; - Tweets that include any kind of media. These might be native videos, images, audios or links to the same, coming from external Web sites.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter:images&lt;/code&gt; - Tweets that contain any kind of images. Those might include ones uploaded via Twitter, as well as ones coming from external Web sites. For photos, explicitly loaded via the Twitter app or the API, use &lt;code&gt;filter:twimg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter:videos&lt;/code&gt; - Tweets that include either attached videos, or links to externally hosted ones (e.g. form YouTube, Vimeo, etc). If you want to see videos, explicitly loaded via the Twitter app or the API, use &lt;code&gt;filter:native_video&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter:quote&lt;/code&gt; - returns only quoted tweets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter:verified&lt;/code&gt; lists only tweets written by verified accounts, while &lt;code&gt;filter:safe&lt;/code&gt; will return ones that do not contain obscene words, imagery, or come from accounts known to produce such content.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Adding a &lt;code&gt;-&lt;/code&gt; to any of those filters will essentially negate the meaning, and can be used for filtering out posts without media, links, etc.&lt;/p&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;h2 id=&#34;example-1-interesting-discussions-from-the-apple-developer-community&#34;&gt;Example #1: Interesting discussions from the Apple developer community&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;list:preslavrachev/ios-macos-developers exclude:retweets exclude:replies min_retweets:10 swift OR apple OR iOS OR objC
&lt;/code&gt;&lt;/pre&gt;







&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://twitter.com/search?src=typd&amp;amp;amp;q=list%3Apreslavrachev%2Fios-macos-developers%20exclude%3Aretweets%20exclude%3Areplies%20min_retweets%3A10%20filter%3Alinks%20swift%20OR%20apple%20OR%20iOS%20OR%20objC&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;See what‚Äôs happening right now&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://source.unsplash.com/200x200/?nature,water&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;Search Twitter to find the latest news and world events faster. Find popular people, hashtags and photos for any topic you can imagine.&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://twitter.com/search?src=typd&amp;amp;amp;q=list%3Apreslavrachev%2Fios-macos-developers%20exclude%3Aretweets%20exclude%3Areplies%20min_retweets%3A10%20filter%3Alinks%20swift%20OR%20apple%20OR%20iOS%20OR%20objC&#34;
          &gt;https://twitter.com&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;



&lt;h2 id=&#34;example-2-top-bitcoin-news-from-verified-german-sources&#34;&gt;Example #2: Top Bitcoin news from verified German sources&lt;/h2&gt;

&lt;p&gt;If you want to see what the mainstream press (e.g. in Germany) writes about Bitcoin, write something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bitcoin filter:news filter:verified -filter:quotes -filter:hashtags lang:de
&lt;/code&gt;&lt;/pre&gt;







&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://twitter.com/search?src=typd&amp;amp;amp;q=bitcoin%20filter%3Anews%20-filter%3Aquotes%20filter%3Averified%20-filter%3Ahashtags%20lang%3Ade&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;See what‚Äôs happening right now&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;https://source.unsplash.com/200x200/?nature,water&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;Search Twitter to find the latest news and world events faster. Find popular people, hashtags and photos for any topic you can imagine.&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://twitter.com/search?src=typd&amp;amp;amp;q=bitcoin%20filter%3Anews%20-filter%3Aquotes%20filter%3Averified%20-filter%3Ahashtags%20lang%3Ade&#34;
          &gt;https://twitter.com&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;



&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;







&lt;article class=&#34;bg-white center mw6 ba b--black-10 mv4&#34;&gt;
  &lt;div class=&#34;pv2 ph3 bb b--black-10&#34;&gt;
    &lt;a href=&#34;https://www.labnol.org/internet/twitter-search-tricks/13693/&#34;&gt;
      &lt;h1 class=&#34;f6 ttu tracked&#34;&gt;The Best Twitter Search Tricks&lt;/h1&gt;
    &lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=&#34;flex flex-column flex-row-m flex-row-l&#34;&gt;
    &lt;div
      class=&#34;ma2 w-100-l w-100-m&#34;
      style=&#34;background: url(&#39;http://img.labnol.org/di/twitter-search-tricks.jpg&#39;); background-position:center; background-size: cover; min-height: 100px&#34;
    &gt;&lt;/div&gt;
    &lt;div class=&#34;pa2&#34;&gt;
      &lt;p&gt;Learn about the various Twitter search operator that will help you find the best tweets for any search phrase. Search tweets inside Twitter lists, filter tweets containing images and more.&lt;/p&gt;
      &lt;small class=&#34;gray db pv2&#34;
        &gt;Source: -
        &lt;a
          href=&#34;https://www.labnol.org/internet/twitter-search-tricks/13693/&#34;
          &gt;Digital Inspiration&lt;/a
        &gt;&lt;/small
      &gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;


></content:encoded>
      
      <media:content url="https://preslav.me/images/2019/06/photo-1494059980473-813e73ee784b.jpg" medium="image"/>
      
    </item>
    
    <item>
      <title>Pandas: Finding a Row Where One of Its Values Is at a Minimum/Maximum</title>
      <link>https://preslav.me/2018/02/16/pandas-finding-a-row-where-one-of-its-values-is-at-a-minimum-maximum/</link>
      <pubDate>Fri, 16 Feb 2018 06:58:00 +0000</pubDate>
      
      <guid>https://preslav.me/2018/02/16/pandas-finding-a-row-where-one-of-its-values-is-at-a-minimum-maximum/</guid>
      <description>Often, we will want to get to get a specific row, which marks the minimum or maximum of one of its columns. Let&amp;rsquo;s suppose we have the SF Salaries dataset from Kaggle. We want to find the employee name, with the largest total pay benefits. The experience with writing NumPy/Pandas filter conditions will quickly let us produce the following version:
sal[sal[&amp;#39;TotalPayBenefits&amp;#39;] == sal[&amp;#39;TotalPayBenefits&amp;#39;].max()][&amp;#39;EmployeeName&amp;#39;] which is absolutely valid, but is it the only option?</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;Often, we will want to get to get a specific row, which marks the minimum or maximum of one of its columns. Let&amp;rsquo;s suppose we have the &lt;a href=&#34;https://www.kaggle.com/kaggle/sf-salaries&#34;&gt;SF Salaries dataset from Kaggle&lt;/a&gt;. We want to find the employee name, with the largest total pay benefits. The experience with writing NumPy/Pandas filter conditions will quickly let us produce the following version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;sal[sal[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TotalPayBenefits&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sal[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TotalPayBenefits&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max()][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EmployeeName&amp;#39;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which is absolutely valid, but is it the only option? I could imagine that that in a large dataset, there would be quite a lot of comparison involved, plus the creation of a whole new data series (the filter condition). Is there perhaps a more performant one? How about trying out &lt;a href=&#34;http://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.DataFrame.idxmax.html&#34;&gt;idmax()&lt;/a&gt; (or, for those coming from NumPy, &lt;a href=&#34;http://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.DataFrame.argmax.html&#34;&gt;argmax()&lt;/a&gt;, both do the same). By given a column, the function will return the index of the data frame, where it is at its highest.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;sal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[sal[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TotalPayBenefits&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;idxmax()][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EmployeeName&amp;#39;&lt;/span&gt;]

sal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[sal[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TotalPayBenefits&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argmax()][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EmployeeName&amp;#39;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I did a quick performance check, and indeed, idmax/argmax turn out twice as fast:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# the original filter condition&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;815&lt;/span&gt; ¬µs ¬± &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;.5 ¬µs per loop &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mean ¬± std. dev. of &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; runs, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; loops each&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# idmax()&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;402&lt;/span&gt; ¬µs ¬± &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;.61 ¬µs per loop &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mean ¬± std. dev. of &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; runs, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; loops each&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# argmax&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt; ¬µs ¬± &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;.81 ¬µs per loop &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mean ¬± std. dev. of &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; runs, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; loops each&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;></content:encoded>
      
    </item>
    
    <item>
      <title>Debugging Network Calls in React Native Using the Chrome Debugger</title>
      <link>https://preslav.me/2017/03/26/debugging-network-calls-in-react-native-using-the-chrome-debugger/</link>
      <pubDate>Sun, 26 Mar 2017 05:25:00 +0000</pubDate>
      
      <guid>https://preslav.me/2017/03/26/debugging-network-calls-in-react-native-using-the-chrome-debugger/</guid>
      <description>TL;DR! Just give me the code In your index.js file (or your platform-specific index file for that matter), simply add the following line to the top, directly after the import statements:
XMLHttpRequest = GLOBAL.originalXMLHttpRequest ? GLOBAL.originalXMLHttpRequest : GLOBAL.XMLHttpRequest;  You will also need a Chrome plugin that overrides CORS. I use CORS Toggle. You may also decide to skip the plugin and start Chrome with CORS disabled:
chrome --disable-web-security then, as usually, start remote debugging from your app, and open: http://localhost:8081/debugger-ui on your computer.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;h2 id=&#34;tl-dr-just-give-me-the-code&#34;&gt;TL;DR! Just give me the code&lt;/h2&gt;

&lt;p&gt;In your &lt;code&gt;index.js&lt;/code&gt; file (or your platform-specific index file for that matter), simply add the following line to the top, directly after the &lt;code&gt;import&lt;/code&gt; statements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;XMLHttpRequest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GLOBAL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;originalXMLHttpRequest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; 
  &lt;span style=&#34;color:#a6e22e&#34;&gt;GLOBAL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;originalXMLHttpRequest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GLOBAL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;XMLHttpRequest&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will also need a Chrome plugin that overrides &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&#34;&gt;CORS&lt;/a&gt;. I use &lt;a href=&#34;https://chrome.google.com/webstore/detail/cors-toggle/omcncfnpmcabckcddookmnajignpffnh?hl=en&#34;&gt;CORS Toggle&lt;/a&gt;. You may also decide to skip the plugin and start Chrome with CORS disabled:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;chrome --disable-web-security&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then, as usually, start remote debugging from your app, and open: &lt;code&gt;http://localhost:8081/debugger-ui&lt;/code&gt; on your computer.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it. Please, make sure to never rely completely on the network infrastructure of the Chrome debugger. Many networking problems may be specific to your device/simulator, and will not be caught by the debugger.&lt;/p&gt;

&lt;h2 id=&#34;ok-now-the-longer-explanation&#34;&gt;OK, now the longer explanation&lt;/h2&gt;

&lt;p&gt;One of the big advantages of React Native is the ease of debugging your code. When running an app in development mode, one can debug it remotely, using the well familiar Chrome DevTools. Logging to the console and setting breakpoints in the code work just as if the app were running in a normal browser&amp;rsquo;s window.&lt;/p&gt;

&lt;p&gt;It is, therefore, strange to many RN starters, why one of the core functionalities of the Chrome Inspector, namely the network call interception, is not available. Instead, if a network error occurs, all the JavaScript code gets access to, is an Error object that simply says &amp;ldquo;Network Error&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;To fully explain why this is so is out of the scope of this post. There is a great Medium article that explains in detail how the &amp;ldquo;magic&amp;rdquo; behind the RN remote debugging works. I totally recommend you read, regardless of your experience with React and RN.&lt;/p&gt;

&lt;p&gt;Long story short, when debugging RN remotely, the JavaScript code actually gets executed in the browser, and not on the device. This allows you to interrupt the flow with breakpoints, or log the console output in the Chrome DevTools window. While the JS code gets executed in the browser, the native calls happen on the device itself. The browser and the device running the app keep a WebSocket connection open and synchronize the code execution on every step.&lt;/p&gt;

&lt;p&gt;All the native calls run on the device itself, and executing a network call makes no difference. As such, it is not an easy task to make network traces appear in the Inspector window. At least, not without overriding the default platform APIs (for each of the supported platforms) and communicate every state change with the browser. I am sure that the core dev team is working on a solution, and will deliver it in a future release.&lt;/p&gt;

&lt;p&gt;Until then, you can test network calls by replacing the default implementation of &lt;code&gt;XMLHttpRequest&lt;/code&gt; and use the one provided by the browser. As you saw in the beginning, it turns out that this is surprisingly simple. Once you do it, override the browser&amp;rsquo;s default CORS rules, and reload the app, you should start seeing network requests in the Chrome Inspector. As I already pointed out, though, the Chrome Inspector can be helpful inasmuch as the requests and responses are concerned. It won&amp;rsquo;t help you prevent issues with the native network infrastructure of your emulator/device. To inspect those, you will rather have to use a proxy, such as &lt;a href=&#34;https://www.charlesproxy.com/&#34;&gt;Charles&lt;/a&gt;, or jump into tracing the native log files.&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Securing your ElasticSearch instances</title>
      <link>https://preslav.me/2017/02/03/securing-your-elasticsearch-instances/</link>
      <pubDate>Fri, 03 Feb 2017 05:29:00 +0000</pubDate>
      
      <guid>https://preslav.me/2017/02/03/securing-your-elasticsearch-instances/</guid>
      <description>Securing your ElasticSearch instances and keeping all the fun Often, we choose convenience over security. Many modern tools such as MongoDB and ElasticSearch, have grown in popularity, partly because of their easy-to-set-up-and-tinker-with nature. Just spin off an instance, point your browser to the right URL and you&amp;rsquo;re ready to start sending queries.
Unfortunately, one thing comes for another, and as we have recently seen, ElasticSearch left in the open can be a vulnerable target, same as MongoDB was in its heyday.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;h3 id=&#34;securing-your-elasticsearch-instances-and-keeping-all-the-fun&#34;&gt;Securing your ElasticSearch instances and keeping all the fun&lt;/h3&gt;

&lt;p&gt;Often, we choose convenience over security. Many modern tools such as MongoDB and ElasticSearch, have grown in popularity, partly because of their easy-to-set-up-and-tinker-with nature. Just spin off an instance, point your browser to the right URL and you&amp;rsquo;re ready to start sending queries.&lt;/p&gt;

&lt;p&gt;Unfortunately, one thing comes for another, and as &lt;a href=&#34;http://www.zdnet.com/article/elasticsearch-ransomware-attacks-now-number-in-the-thousands/&#34;&gt;we have recently seen&lt;/a&gt;, ElasticSearch left in the open can be a vulnerable target, same as MongoDB was in its heyday. In light of the &lt;a href=&#34;http://www.zdnet.com/article/elasticsearch-ransomware-attacks-now-number-in-the-thousands/&#34;&gt;recent attacks&lt;/a&gt; on many open ElasticSearch instances across the world, I decided to share a quick tip on how to set remote ES instances, and keep them secure, by not compromising on its easy-to-play-with nature.&lt;/p&gt;

&lt;h2 id=&#34;part-one-restricting-the-access-to-your-elasticsearch-instance&#34;&gt;Part One: Restricting the access to your ElasticSearch instance&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start. The easiest way to setup an ElasticSearch instance is &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html&#34;&gt;spinning up a container&lt;/a&gt; off the default Docker image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker pull docker.elastic.co/elasticsearch/elasticsearch:&amp;lt;VERSION&amp;gt;

docker run -p &lt;span style=&#34;color:#ae81ff&#34;&gt;9200&lt;/span&gt;:9200 -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http.host=0.0.0.0&amp;#34;&lt;/span&gt; -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;transport.host=127.0.0.1&amp;#34;&lt;/span&gt; elasticsearch:&amp;lt;VERSION&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running the above line, will create a portion mapping from 9200 within the container, to port 9200 on the host machine. One problem here, is that by doing so, it also exposes it to the outside world. This could easily be seen by running &lt;code&gt;iptables&lt;/code&gt; against your host:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;iptables -t nat -L -n

&lt;span style=&#34;color:#75715e&#34;&gt;# Outputs&lt;/span&gt;
...
target     prot opt source               destination
DNAT       tcp  --  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.0.0.0/0            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.0.0.0/0            tcp dpt:9200 to:XXX.XXX.XXX.XXX:9200
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Indeed, Docker takes the heavy-lifting of configuring your &lt;code&gt;iptables&lt;/code&gt; firewall, but often, this may result in a configuration which is too permissive. What one should do instead, is provide a specific IP to the port mapping configuration. Thankfully, Docker supports this, so all we have to do is modify the above command, using the &lt;code&gt;IP:host_port:container_port&lt;/code&gt; mapping:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -p &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;.0.0.1:9200:9200 -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http.host=0.0.0.0&amp;#34;&lt;/span&gt; -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;transport.host=127.0.0.1&amp;#34;&lt;/span&gt; elasticsearch:&amp;lt;VERSION&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perfect! Putting the &lt;code&gt;127.0.0.1&lt;/code&gt; will guarantee that the container will be available inside the host machine, but not accessible outside. A quick proof of this is looking at iptables again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;target     prot opt source               destination
DNAT       tcp  --  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.0.0.0/0            &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;.0.0.1            tcp dpt:9200 to:XX.XXX.XXX.XXX:9200&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if you point your browser to port 9200 you should not be able to see anything, but executing `curl 127.0.0.1:9200 from inside the host machine should work.&lt;/p&gt;

&lt;h2 id=&#34;part-two-accessing-your-elasticsearch-instance-in-a-secure-manner&#34;&gt;Part Two: Accessing your ElasticSearch instance in a secure manner&lt;/h2&gt;

&lt;p&gt;What we did was all fine, but how do access our ElasticSearch instance now, without losing the flexibility of quickly testing stuff on ES? Easy, using *NIX&amp;rsquo;s Swiss Army Knife - &lt;code&gt;SSH&lt;/code&gt;. SSH is a tool most programmers use on a daily basis, but fewer of them are aware that SSH allows for local and remote port forwarding. What this means is that SSH can create an encrypted tunnel between your machine and your server, such that you can accesses services running remotely, as if they were running on loclahost (local forwarding). There is also remote forwarding, which alternatively, allows you to securely access locally running services from your remote server.&lt;/p&gt;

&lt;p&gt;While we are going to use local port forwarding in our case, both are analogous to each other:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -L/-R &amp;lt;PORT_ON_THE_LOCAL/REMOTE_MACHINE&amp;gt;:&amp;lt;HOST_TO_MAP_TO&amp;gt;:&amp;lt;PORT_ON_THE_REMOTE/LOCAL_MACHINE&amp;gt; &amp;lt;USERNAME&amp;gt;@&amp;lt;REMOTE_IP&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our particular case, this looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -L &lt;span style=&#34;color:#ae81ff&#34;&gt;9200&lt;/span&gt;:127.0.0.1:9200  user@XX.XXX.XXX.XXX&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This basically says: map my local port &lt;code&gt;9200&lt;/code&gt; to a call to &lt;code&gt;127.0.0.1:9200&lt;/code&gt; on the &lt;code&gt;XX.XXX.XXX.XXX&lt;/code&gt; server. When you point your browser to &lt;code&gt;http://localhost:9200&lt;/code&gt;, you should now see the familiar ElasticSearch output, even though, as before &lt;code&gt;XX.XXX.XXX.XXX:9200&lt;/code&gt; returns nothing. You can let the above command run in the background and run as a daemon.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;These two steps are all you need, in order to keep enjoying the freedom of playing with ElasticSearch or MongoDB, but doing it in a fully secure manner. This recipe can be applied to just about any service. And you really don&amp;rsquo;t need Docker even. The fact that I mentioned it in part one, is because it makes setting up easy, and also saves you from having to tinker with &lt;code&gt;iptables&lt;/code&gt; yourselves.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Please, keep in mind that while running a SSH tunnel is just about perfect for testing and development purposes, it may not be an optimal solution for production. The reason for this is the latency caused by en/decrypting the data and shuffling it through the tunnel. It may become a bottleneck with many incoming requests running in parallel. I am yet to stress-test this setup and will share my observations in a further post. I will also share some more ideas on how to access an ElasticSearch instance securely, but also in a productive manner.&lt;/p&gt;
></content:encoded>
      
    </item>
    
    <item>
      <title>Kotlin Basics: apply() and copy()</title>
      <link>https://preslav.me/2016/06/26/kotlin-basics-apply-and-copy/</link>
      <pubDate>Sun, 26 Jun 2016 12:56:00 +0000</pubDate>
      
      <guid>https://preslav.me/2016/06/26/kotlin-basics-apply-and-copy/</guid>
      <description>Without any doubt, Java is a verbose language. This verbosity of the language makes it easy to understand Java code by new programmers. It is though one of the reasons, why many Java programmers find writing Java code tedious. Kotlin brings a touch of succinctness in places, where even programmers new to Java, may find code unnecessarily over-bloated.
How many times have you had to do the same thing over and over again:</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;Without any doubt, Java is a verbose language. This verbosity of the language makes it easy to understand Java code by new programmers. It is though one of the reasons, why many Java programmers find writing Java code tedious. Kotlin brings a touch of succinctness in places, where even programmers new to Java, may find code unnecessarily over-bloated.&lt;/p&gt;

&lt;p&gt;How many times have you had to do the same thing over and over again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; A &lt;span style=&#34;color:#a6e22e&#34;&gt;updateA&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;A objA&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; B objB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    objA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;objB&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    objA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setD&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;objB&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getD&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; objA&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having an object, you want to modify some of its properties and simply return the same object. In Java, you can&amp;rsquo;t do this in a single chained fashion. In Kotlin, you can squeeze the above method to the following single line of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;fun &lt;span style=&#34;color:#a6e22e&#34;&gt;updateA&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;objA: A&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; objB: B&lt;span style=&#34;color:#f92672&#34;&gt;):&lt;/span&gt; A &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; objA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; objB&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; objB&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;apply&#34;&gt;apply()&lt;/h3&gt;

&lt;p&gt;By definition, &lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/apply.html&#34;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt; accepts a function, and sets its scope to that of the object on which apply has been invoked. This means that no explicit reference to the object is needed. &lt;code&gt;Apply()&lt;/code&gt; can do much more than simply setting properties of course. It is a transformation function, capable of evaluating complex logic before returning. At the end, the function simply returns the same object (with the added changes), so one can keep using it on the same line of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please, note as well the direct use of properties instead of explicitly calling getters and setters. This is not a bad practice, since Kotlin implicitly invokes provided getters and setters of a property, when working with the property (similar to C#).&lt;/p&gt;

&lt;h3 id=&#34;copy&#34;&gt;copy()&lt;/h3&gt;

&lt;p&gt;Please, remember that using apply on an object is NOT a thread-safe operation, and mutates the state of the object. If you want to retain the original object and return an immutable copy of it, you can use the function &lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html#copying&#34;&gt;&lt;code&gt;copy()&lt;/code&gt;&lt;/a&gt;, provided in all instances of data classes.&lt;/p&gt;

&lt;p&gt;Assuming that your class contains only data (usually a good practice to separate logic from data), you can turn it into a &lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;data class&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;data &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;val name: String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; val age: Int&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Data classes have a few advantages, and one of them is definitely the &lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html#copying&#34;&gt;&lt;code&gt;copy()&lt;/code&gt;&lt;/a&gt; function, provided to each and every instance. It not only provides a copy of the original object, leaving its state intact, but also allows setting new values to some of its properties at copy-time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;val user1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; User&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Smith&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 24&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
val user2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;copy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 31&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kotlin supports &lt;a href=&#34;http://blog.preslav.me/2016/05/29/kotlin-tips-named-parameters-default-arguments/&#34;&gt;named parameters&lt;/a&gt;, known from other languages, such as Python and Scala. In this case, they make life much easier, as all you need to do, is specify the name of the particular property (or properties) you want to modify by copying.&lt;/p&gt;

&lt;p&gt;At the end you can combine the power and succinctness of both &lt;code&gt;apply()&lt;/code&gt; and &lt;code&gt;copy()&lt;/code&gt; by calling apply after copying:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;val user2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;copy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 31&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; execute some logic here &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;></content:encoded>
      
    </item>
    
    <item>
      <title>What‚Äôs with the 50/72 rule?</title>
      <link>https://preslav.me/2015/02/21/what-s-with-the-50-72-rule/</link>
      <pubDate>Sat, 21 Feb 2015 06:59:00 +0000</pubDate>
      
      <guid>https://preslav.me/2015/02/21/what-s-with-the-50-72-rule/</guid>
      <description>It is part of common sense to assume that the worthiest commit messages lie far from any extremes. Years ago, I often fell in the trap of hastily sending a commit after commit, annoyed by the fact that I have to add a summary to it (let alone a description). I&amp;rsquo;ve seen many projects whose commit summaries consist primarily of one-word verbs like [FIX], [CLEAN], [TEST], etc.
They don&amp;rsquo;t tell much do they?</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>&lt;p&gt;It is part of common sense to assume that the worthiest commit messages lie far from any extremes. Years ago, I often fell in the trap of hastily sending a commit after commit, annoyed by the fact that I have to add a summary to it (let alone a description). I&amp;rsquo;ve seen many projects whose commit summaries consist primarily of one-word verbs like [FIX], [CLEAN], [TEST], etc.&lt;/p&gt;

&lt;p&gt;They don&amp;rsquo;t tell much do they? Six months down the road, you&amp;rsquo;d be scratching your head, trying to remember what you were thinking exactly six months before, when you wrote that commit.&lt;/p&gt;

&lt;p&gt;On the other hand are the &amp;ldquo;novels&amp;rdquo;. Some programmers go into much detail of what they&amp;rsquo;ve done, both in the summary, and in the description. This makes it difficult to read, and understand later on, what they did exactly.&lt;/p&gt;

&lt;p&gt;Being verbose is by no means a bad thing. In fact, programmers are encouraged to put lengthy details about their commits, but only in the description. The summary is what helps you and other programmers to skim through thousands of commits, so it must be both concise and insightful.&lt;/p&gt;

&lt;p&gt;In a &lt;a href=&#34;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&#34;&gt;2008 blog post&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/tpope&#34;&gt;tpope&lt;/a&gt;, described a system for creating commit messages, which I started calling simply, the &lt;em&gt;&amp;ldquo;50 / 72&amp;rdquo;&lt;/em&gt; rule. The rules of the game are simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first line of your commit message must be maximum 50 characters long. No more, and (ideally), no less.&lt;/li&gt;
&lt;li&gt;Leave a blank line&lt;/li&gt;
&lt;li&gt;Start writing your description. The description can be as verbose as it suits you. Each line in your description should though wrap at the 72nd mark.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Git is smart enough to distinguish the first line of your commit message as your summary. In fact, if you try &lt;em&gt;git shortlog&lt;/em&gt;, instead of &lt;em&gt;git log&lt;/em&gt;, you will see a long list of commit messages, consisting of the id of the commit, and the summary only. The reason for wrapping your description lines at the 72nd mark is that &lt;em&gt;git log&lt;/em&gt; adds a padding of 4 blank spaces when displaying the commit message. To center the message perfectly, and make it read well on an 80-column terminal, you&amp;rsquo;d want to leave space for 4 more blank spaces at right side. That&amp;rsquo;s where 72 comes from.&lt;/p&gt;

&lt;p&gt;What about the 50? An analysis of the average length of commit messages in the linux kernel suggests that the ideal size of a git commit summary is around 50 characters in length:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/images/2015/february/0_Hm0dO0UnjFBprfV-.png&#34; alt=&#34;&#34; /&gt;Most commit messages average around 50 characters in length&lt;/p&gt;

&lt;p&gt;Most code editors display the current line and column number that the cursor is at. Many support automatic wrap-line settings. If you are using GitHub&amp;rsquo;s desktop app (as I used to), it will also show you warnings when you are over the limit.&lt;/p&gt;

&lt;p&gt;Writing a great commit summary is like writing a great tweet, only shorter. Id suggest to try and write your thoughts at first, to see how long it gets. Then you&amp;rsquo;s paraphrase it, and put the extra content (the details) in the summary. Try to use the 50-column mark as a guideline for your thoughts. Try to reach as close as possible to it, without going over. Remember, short commit messages do not help, too long don&amp;rsquo;t either.&lt;/p&gt;

&lt;p&gt;How does your team compare to the linux kernel contributors? You can check yourselves, using the code below:&lt;/p&gt;

&lt;p&gt;You can use the data and plot it on a real histogram, using &lt;a href=&#34;http://stackoverflow.com/a/5328669/1107412&#34;&gt;matplotlib&lt;/a&gt;. Many thanks to &lt;a href=&#34;http://stackoverflow.com/users/209050/mgalgs&#34;&gt;mgalgs&lt;/a&gt; for posting the &lt;a href=&#34;http://stackoverflow.com/a/11993051/1107412&#34;&gt;code&lt;/a&gt;, and the &lt;a href=&#34;http://stackoverflow.com/a/11993051/1107412&#34;&gt;histogram&lt;/a&gt; originally on &lt;a href=&#34;http://stackoverflow.com/a/11993051/1107412&#34;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
></content:encoded>
      
      <media:content url="https://preslav.me/images/2015/february/1_756pH2sfB-0227AkUe1VXA.png" medium="image"/>
      
    </item>
    
    <item>
      <title>Gulp vs Grunt. Why one? Why the Other?</title>
      <link>https://preslav.me/2015/01/06/gulp-vs-grunt-why-one-why-the-other/</link>
      <pubDate>Tue, 06 Jan 2015 06:29:00 +0000</pubDate>
      
      <guid>https://preslav.me/2015/01/06/gulp-vs-grunt-why-one-why-the-other/</guid>
      <description>So you&amp;rsquo;ve been trying to wrap your heads around and decide between Grunt and Gulp? Yeah, me too, been there, done that. In my case, the decision wasn&amp;rsquo;t really hard. I&amp;rsquo;ve never had strong feelings for Grunt, and for a long time, I used a custom made ANT script. I used to copy it over to every new project, and it helped me with basic tasks‚Ää‚Äî‚Äämoving, copying, cleaning, linting, minifying, etc.</description>
      <dc:creator>Preslav Rachev</dc:creator>
      <content:encoded>

&lt;p&gt;So you&amp;rsquo;ve been trying to wrap your heads around and decide between Grunt and Gulp? Yeah, me too, been there, done that. In my case, the decision wasn&amp;rsquo;t really hard. I&amp;rsquo;ve never had strong feelings for Grunt, and for a long time, I used a custom made ANT script. I used to copy it over to every new project, and it helped me with basic tasks‚Ää‚Äî‚Äämoving, copying, cleaning, linting, minifying, etc. At one point, I switched over to Grunt, but my workflow essentially mimicked the one I had already created using ANT.&lt;/p&gt;

&lt;p&gt;So, when Gulp came out, I was right at the point of willing to dive deep into JS-based task runners. Plus, it quickly became the darling of a large portion of the JS community, and many projects, like Ionic, adopted it right away. So, my choice was easy.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Getting started with Gulp &lt;a href=&#34;http://t.co/qKo0rOXGT4&#34;&gt;http://t.co/qKo0rOXGT4&lt;/a&gt; &amp;quot;Gulp is a streaming build system&amp;quot;. Think Grunt, but faster and less config.&lt;/p&gt;&amp;mdash; Sindre Sorhus (@sindresorhus) &lt;a href=&#34;https://twitter.com/sindresorhus/status/420272334281662464?ref_src=twsrc%5Etfw&#34;&gt;January 6, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;Yet, writing Grunt off for all the wrong reasons does not feel right. It is still a great tool, with a bustling community around it, so it makes a lot of sense to make a proper comparison between Grunt and Gulp.&lt;/p&gt;

&lt;h1 id=&#34;the-differences&#34;&gt;The Differences&lt;/h1&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/Grunt?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Grunt&lt;/a&gt; vs &lt;a href=&#34;https://twitter.com/hashtag/Gulp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Gulp&lt;/a&gt;: &lt;a href=&#34;http://t.co/eaaolHHIl6&#34;&gt;http://t.co/eaaolHHIl6&lt;/a&gt; (piping is beautiful!) This is so reminds me of &lt;a href=&#34;https://twitter.com/hashtag/Maven?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Maven&lt;/a&gt; vs &lt;a href=&#34;https://twitter.com/hashtag/Gradle?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Gradle&lt;/a&gt;. Always voted for code over config&lt;/p&gt;&amp;mdash; Evgeny Goldin (@evgeny_goldin) &lt;a href=&#34;https://twitter.com/evgeny_goldin/status/521003643802513409?ref_src=twsrc%5Etfw&#34;&gt;October 11, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;There are two main differences between Grunt and Gulp:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grunt focuses on configuration, while Gulp focuses on code&lt;/li&gt;
&lt;li&gt;Grunt was built around a set of &lt;a href=&#34;http://bocoup.com/weblog/introducing-grunt/&#34;&gt;built-in, and commonly used tasks&lt;/a&gt;, while Gulp came around with the idea of enforcing nothing, but how community-developed micro-tasks should connect to each other&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That is not to say that Grunt does not support community extensions. Of course, Grunt has supported creating custom plugins since the beginning, and I am sure that one can find a plugin for just about anything one needs. It was just the nature of the built-in tasks that made me stick around a little longer with my ANT script. In retrospect, I have to admit that I was wrong that for being sceptical about it becoming as popular as it is today. In early 2015, Grunt still holds a larger community than Gulp, despite the latter catching up fast.&lt;/p&gt;

&lt;p&gt;Every task in Grunt is an array of different plugin configurations, that simply get executed one after another, in a strictly independent, and sequential fashion:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;grunt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;initConfig&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;build/app.js&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;build/vendor.js&amp;#39;&lt;/span&gt;]
    },
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;copy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;build/app.js&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;build/dist/app.js&amp;#39;&lt;/span&gt;
    }]
    }
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;build/app.js&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;build/vendors.js&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;build/app.js&amp;#39;&lt;/span&gt;]
    }
    
    &lt;span style=&#34;color:#75715e&#34;&gt;// ... other task configurations ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
});

&lt;span style=&#34;color:#a6e22e&#34;&gt;grunt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;registerTask&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;clean&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bower&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;browserify&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;concat&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;copy&amp;#39;&lt;/span&gt;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, &amp;lsquo;clean&amp;rsquo; and &amp;lsquo;concat&amp;rsquo; must be configured before the &amp;lsquo;build&amp;rsquo; task is registered. Each task configuration is independent from all the rest. When dealing with IO, such as files, each task accesses the file separately‚Ää‚Äî‚Ääopening the file, applying the changes, and closing the file. Therefore, almost every task requires a source and destination to be specified. This not only doubles the effort for the developer, but it also makes Grunt relatively slower thanGulp.&lt;/p&gt;

&lt;p&gt;Gulp on the other hand is all about streams and building complex pipelines with ease. It uses node.js&amp;rsquo; streams, and executes faster, since it does not open/close files, or create intermediary copies all the time. This is a sample task declaration, taken straight from Ionic&amp;rsquo;s gulpfile.js&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//import the necessary gulp plugins
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sass&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gulp-sass&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;minifyCss&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gulp-minify-css&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rename&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gulp-rename&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;//declare the task
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./scss/ionic.app.scss&amp;#39;&lt;/span&gt;)
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sass&lt;/span&gt;())
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./www/css/&amp;#39;&lt;/span&gt;))
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;minifyCss&lt;/span&gt;({
        &lt;span style=&#34;color:#a6e22e&#34;&gt;keepSpecialComments&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    }))
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rename&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;extname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.min.css&amp;#39;&lt;/span&gt; }))
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./www/css/&amp;#39;&lt;/span&gt;))
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing that is immediately noticed here, is the lack of any up-front configuration, especially, specifying a source and destination. It is clear how one processor plugs into another. Just like LEGO bricks, plugins fit right into each other. The magic happens because of the object format that plugins exchange, the so called &lt;a href=&#34;https://github.com/wearefractal/vinyl&#34;&gt;Vinyl&lt;/a&gt;. Vinyl is just an abstraction that describes a virtual file object‚Ää‚Äî‚Ääone that could refer to an existing file on the FS, a stream, or simply dead-ends with a null.&lt;/p&gt;

&lt;p&gt;The use of streams is also a part of how gulp plugins are developed. In unison with the UNIX philosophy, gulp plugins must &lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md&#34;&gt;&lt;strong&gt;try to do one thing well&lt;/strong&gt;&lt;/a&gt;. In simple words, if your plugin tries to do way too many things, better split it into several smaller plugins, and try to use as many readily developed plugins as you can. Let the complexity reside within the task orchestration, not the plugin body.&lt;/p&gt;

&lt;p&gt;Both Grunt and Gulp have their own specifics when developing extensions. Both will make you sacrifice a bit of the beauty of your code, for the sake of plugging it into each build system. Truth is though that Gulp plugins feel one idea less coupled than their Grunt counterparts. This is because every Gulp plugin is first and foremost a legit node.js streaming module. With a bit of fitting, it can be re-used in other pieces of streaming node.js code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://preslav.me/content/images/2019/02/image.png&#34; alt=&#34;&#34; /&gt;&lt;a href=&#34;https://twitter.com/maxogden/status/421375617733386242&#34;&gt;@maxodgen | Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One word of advice though is to try not to fit every piece of your code into a Gulp plugin. As this &lt;a href=&#34;http://blog.overzealous.com/post/74121048393/why-you-shouldnt-create-a-gulp-plugin-or-how-to&#34;&gt;article points out&lt;/a&gt;, thinking of your code as a Gulp plugin would inevitably increase configuration, which is counter to what the Gulp guidelines, and the &lt;strong&gt;do one thing well&lt;/strong&gt; philosophy suggest. This is where the &lt;strong&gt;code over configuration&lt;/strong&gt; principle shines. Unlike Grunt, Gulp makes it extremely easy to fit other code within a task definition, besides streaming from one plugin to another. In fact, a Gulp task may not even contain a streaming pipeline:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;);
    
&lt;span style=&#34;color:#75715e&#34;&gt;//declare the task
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;server&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;) {
    &lt;span style=&#34;color:#75715e&#34;&gt;//start an http server (I know, a totally useless example, but helps to illustrate the point)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;requestListener&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeHead&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello, World!n&amp;#39;&lt;/span&gt;);
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;requestListener&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;);
    
    &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;();
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;the-verdict&#34;&gt;The Verdict&lt;/h1&gt;

&lt;p&gt;Has Gulp made Grunt obsolete. &lt;a href=&#34;http://qr.ae/6rv0g&#34;&gt;&lt;em&gt;No, for the same reason that Burger King didn&amp;rsquo;t make McDonald&amp;rsquo;s obsolete&lt;/em&gt;&lt;/a&gt;. Truth is, if you&amp;rsquo;re starting to work with JS-based build systems, there is a high chance that you&amp;rsquo;d pick Gulp right away. The prospects for it just seem a little rosier, plus, it has been adopted by a large portion of projects. Yet, if you are still using Grunt and feel comfortable using it, there is nothing to be worried about‚Ää‚Äî‚Ääthe community is still there, bigger than Gulp, and keeps growing. Grunt has almost a couple of years of advantage, and I am sure that large project maintainers will try to stick to it for as long as possible. Another advantage of using Grunt is if all you need is that little built-in set of simple tasks. In that case, you&amp;rsquo;d feel right at home with it, and Gulp, despite all of its flexibility, will make you spend more time in theory than you need. As with everything else project related, you should choose based on the circumstances.&lt;/p&gt;

&lt;h1 id=&#34;resources&#34;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://benalman.com/news/2012/08/why-grunt/&#34;&gt;Why grunt? Why not something else?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://markdalgleish.github.io/presentation-build-wars-gulp-vs-grunt&#34;&gt;Build Wars: Gulp vs Grunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/p/3828e8126466&#34;&gt;gulp - Eric Schoffstall - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.100percentjs.com/just-like-grunt-gulp-browserify-now/&#34;&gt;Ëá™ÂÆ∂Áî®Ëªä„ÅÆÊñ∞Ëªä„Å´„Å§„ÅÑ„Å¶&lt;/a&gt;
and others&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
></content:encoded>
      
      <media:content url="https://preslav.me/images/2015/january/gulp-vs-grunt-header.jpeg" medium="image"/>
      
    </item>
    
  </channel>
</rss>
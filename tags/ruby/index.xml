<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Ruby on Random Bits of Wisdom</title>
        <link>https://preslav.me/tags/ruby/</link>
        <description>Recent content in Ruby on Random Bits of Wisdom</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Tue, 11 Feb 2020 07:49:10 +0100</lastBuildDate>
        <atom:link href="https://preslav.me/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Elixir Month</title>
            <link>https://preslav.me/2020/02/11/elixir-month/</link>
            <pubDate>Tue, 11 Feb 2020 07:49:10 +0100</pubDate>
            
            <guid>https://preslav.me/2020/02/11/elixir-month/</guid>
            <description>Yes, the Elixir. I’ve decided to use the cold February weather, as well as the relative project calm, and see how far I can go with it.
But why Elixir and why just now? There are a few reasons. Actually, this is not my first encounter with the language or the Erlang/BEAM ecosystem. About a year ago, a colleague at work and I started doing lunch break walks, in which we discussed tech topics, beyond the scope of our current projects.</description>
            <content type="html"><![CDATA[

<p>Yes, the <a href="https://elixir-lang.org/">Elixir</a>. I’ve decided to use the cold February weather, as well as the relative project calm, and see how far I can go with it.</p>

<h2 id="but-why-elixir-and-why-just-now">But why Elixir and why just now?</h2>

<p>There are a few reasons. Actually, this is not my first encounter with the language or the Erlang/BEAM ecosystem. About a year ago, a colleague at work and I started doing lunch break walks, in which we discussed tech topics, beyond the scope of our current projects. My colleague is a big Elixir fan and has mentioned many times the advantages of Erlang and the BEAM VM. More than anything else, one thing struck me the most. All of the challenges that the cloud community of today is trying to tackle, such as:</p>

<ul>
<li>resilience</li>
<li>scalabiltiy</li>
<li>distribution</li>
<li>deployment</li>
</ul>

<p>etc, have already been thought about, and solved by a research group at Ericsson around three decades ago (albeit, at a smaller scale). Sure, Erlang is not an easy language to work with, but thanks to <a href="https://twitter.com/josevalim">José Valim</a> and his work on Elixir, it wouldn’t even be necessary. So, about a year back, I took my first plunge.</p>

<h2 id="that-s-not-for-me">That’s not for me</h2>

<p>I got out of the water just as quickly as I got in there. Sure, Elixir is not nearly as obscure as Erlang, but it can be a bit overwhelming for the newcomer. Especially, if one is trying to swallow the whole OTP bit at the same time. At the time, I had discovered the simplistic philosophy of Golang, and despite all the alleged advantages, Elixir seemed way too much overhead. I (in)famously dismissed the language, as one where “the amount of punctuation might give you a headache”. Let alone the fact that similar to Java applications, Elixir ones also need the entire kitchen sink to be in place for an application to run. Compare this to a statically-bound Go app that you just throw onto a machine and you are good to go.</p>

<h2 id="crystal-enters-the-stage">Crystal enters the stage</h2>

<p>As a side note, I have to mention that part of why I dropped my initial foray into Elixir was because of a bias. I felt that it was too, Ruby-esque, whatever that must have meant to me at the time. I have somehow missed the early Ruby and Rails train around 15 years ago. My programming career set me on a different path. I have always been aware of Ruby’s community spirit, but only during the past year, did I come to appreciate the language and its writing aesthetic. Ironically, not through a Ruby itself, but via a wonderful derivative language, named <a href="https://crystal-lang.org/">Crystal</a>. I already went into more detail about Crystal <a href="https://preslav.me/2020/01/26/a-crystal-in-go-s-world/">in a previous post</a>.</p>

<p>The more I started dabbling into Crystal, the more I started looking at its inspiration - Ruby. Ruby is certainly not a language without flaws, and the community is trying to work on those. Partially, via addressing those issues at the core - Ruby 3.0 is expected to arrive <a href="https://bugs.ruby-lang.org/versions/5">at the end of this year</a>. Yet, others are taking what the language is best known for, and applying it to other paradigms - such as Elixir’s functional approach to programming.</p>

<h2 id="second-attempt-elixir-month">Second attempt: Elixir Month</h2>

<p>My second attempt to tackle Elixir seems to go much more smoothly than the first one. One day, I had the feeling that the constructs in the language just clicked for me- even the nasty OTP ones. I set out out a goal for myself to use Elixir for a month during February, and see how far I can go with it.</p>

<hr />

<h2 id="some-starting-resources">Some starting resources</h2>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1519435676i/38732242._UY630_SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/38732242-elixir-in-action">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Elixir in Action</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The Elixir language blends the battle-tested power and stability of the Erlang virtual machine with an approachable and expressive syntax...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/38732242-elixir-in-action">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<p>Really, one of the best books on starting with Elixir. If you enjoy it, please help me support this site by <a href="https://amzn.to/2HFjtSR">buying it on Amazon</a>.</p>

<p>Let Saša Jurić himself convince you:

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube-nocookie.com/embed/JvBT4XBdoUE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube-nocookie.com/embed/gom6nEvtl3U" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content>
        </item>
        
        <item>
            <title>A Crystal in Go’s World</title>
            <link>https://preslav.me/2020/01/26/a-crystal-in-go-s-world/</link>
            <pubDate>Sun, 26 Jan 2020 08:35:04 +0000</pubDate>
            
            <guid>https://preslav.me/2020/01/26/a-crystal-in-go-s-world/</guid>
            <description>Imagine a programming language with the ergonomic syntax of Ruby, the speed of execution of C, the concurrency model of Go, and last but not least, a compiler that performs null checks at compile time. Sounds like a dream? Well, this language exists, but chances are, you haven’t heard of it so far.
Meet Crystal!
Crystal is all of the above, plus it has types, outstanding documentation, and a strong community, delivering a steady stream of new libraries (a.</description>
            <content type="html"><![CDATA[

<p>Imagine a programming language with the ergonomic syntax of Ruby, the speed of execution of C, the concurrency model of Go, and last but not least, a compiler that performs null checks at compile time. Sounds like a dream? Well, this language exists, but chances are, you haven’t heard of it so far.</p>

<p>Meet <a href="https://crystal-lang.org/">Crystal</a>!</p>


    <img src="/images/2020/image-crystal.png"  alt="Crystal home page"  class="center"  style="border-radius: 8px;"  />



<p>Crystal is all of the above, plus it has types, <a href="https://crystal-lang.org/reference/overview/">outstanding documentation</a>, and a strong community, delivering a steady stream of new libraries (a.k.a “shards”). Don’t get fooled by the current version number (0.32.1). Crystal has been around for quite a few years (since 2012) and has a mature set of language features and an ecosystem of good libraries.</p>

<h2 id="where-does-the-speed-come-from">Where does the speed come from?</h2>

<p>Crystal produces fast and lightweight native applications using the LLVM infrastructure. When I say fast, I mean, <a href="https://github.com/kostya/benchmarks">really fast</a>. Take the fastest Go code you can find and chances are, the same code in Crystal will perform at least on par with it, and often quite a bit faster. Measuring Crystal’s performance against that of Ruby makes no sense.</p>

<p>There are no runtime frameworks or virtual machines necessary. One can just grab the compiled binary and deploy it. When compared with deploying and running a Ruby application, this feels like a whole different league.</p>

<p>Note that there are some caveats, which I am going to discuss in a future blog post. For now, let’s just say that building and distribution are equally as easy, as those in Rust. As of yet, nothing can beat the Go compiler speed-wise, but my experience with the Crystal tooling has been more than pleasant so far.</p>

<h2 id="csp-style-concurrency">CSP-style concurrency</h2>

<p>One of the things that make Go so interesting is its concurrency model. The idea about goroutines that communicate via channels is based on an approach dating back to the late 1970s, called <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">Communicating Sequential Processes (CSP)</a>. Crystal uses an analogous approach. Programs run in what is known as <a href="https://crystal-lang.org/reference/guides/concurrency.html">“fibers”</a>. The main fiber can spawn any number of concurrent fibers that send and receive data via blocking channels.</p>

<pre><code class="language-crystal">channel = Channel(Nil).new 
spawn do    
	puts &quot;Before send&quot;    
	channel.send(nil)    
	puts &quot;After send&quot; 
end  

puts &quot;Before receive&quot; 
channel.receive 
puts &quot;After receive&quot;
</code></pre>

<h2 id="why-re-invent-ruby-in-2020">Why re-invent Ruby in 2020?</h2>

<p>The creators of Crystal obviously didn’t intend on changing the world of programming by creating a new language. They just <a href="https://web.archive.org/web/20181126095302/https://manas.tech/blog/2016/04/01/the-story-behind-crystal.html">loved Ruby</a> and felt it sad to leave it for a more performant and type-safe alternative. Due to a series of trade-offs at the implementation level, Ruby is still slower and more memory-hungry than its competitors. Despite perfectly serving the needs of a large segment of Web users through Rails, its performance puts it at the back of the pack, when it comes to other use cases.</p>

<p>The point is fair and valid. As a language, Ruby has a concise and elegant syntax for writing. Once beyond the basic idioms, writing Ruby evokes pure joy. Crystal brings that joy to an even higher level through type-safety, native speed, and extremely simple concurrency model.</p>

<p>Don’t get me wrong, I like Go too, precisely because of its verbosity and lack of idioms. When working with others on a big project, I’d prefer more ceremony and hoops, in the name of transparency and equal code comprehension. Different languages exist to serve different purposes and be used by different groups of people. The trick is knowing when to use and when the other.</p>

<h2 id="so-is-crystal-worth-having-a-look">So, is Crystal worth having a look?</h2>

<p>Absolutely! If only to know that it exists and keep an eye on it, I’d go check it out and write a few applications with it. Whether Crystal will take off in the future is a bit more difficult to say, however. As mentioned, the 99% resemblance to Ruby is nice, and so is the blazing-fast performance. Yet, I am missing the Crystal community’s drive towards more prominence. There has been a long-awaited move towards a 1.0 release, which is a crucial milestone and would surely bring in many newcomers. To my understanding, the language and its tooling are stable enough for a 1.0 release.</p>

<p>I understand that Crystal does not have the backing of either Google or Mozilla. Neither does it have multi-billion-dollar use-cases to put on its home page. I understand that fighting for the same space with Go, C/C++, and Rust is an unfair battle. Yet, I also believe that we’re long past the days when choosing one technology over another was a zero-sum game. All it needs is a little push.</p>

<p>I am hoping for the best!</p>
]]></content>
        </item>
        
    </channel>
</rss>

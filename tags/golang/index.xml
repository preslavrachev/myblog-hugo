<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Preslav Rachev</title>
    <link>https://preslav.me/tags/golang/</link>
    <description>Recent content in Golang on Preslav Rachev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Aug 2019 22:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://preslav.me/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bought a Year-Long License for Goland</title>
      <link>https://preslav.me/2019/08/29/goland-license/</link>
      <pubDate>Thu, 29 Aug 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/29/goland-license/</guid>
      <description>NOTE: This is not a paid product endorsement. I&amp;rsquo;m just a happy customer. I have recently bought a full license of GoLand for a year. The trial served me well for a few months, but the IDE shutting down automatically after every 30 minutes of work, became way too annoying. I know, I shouldn&amp;rsquo;t rely on an IDE for writing Go, when VS Code or Vim would have worked just fine.</description>
    </item>
    
    <item>
      <title>Reduce Struct Size by Laying out Attributes Accordingly</title>
      <link>https://preslav.me/2019/08/27/reduce-struct-size-by-laying-out-attributes-accordingly/</link>
      <pubDate>Tue, 27 Aug 2019 15:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/27/reduce-struct-size-by-laying-out-attributes-accordingly/</guid>
      <description>Many thanks to @themaour for sharing this tip on Twitter TIL that in Go, struct size depends on how underlying types were defined.
struct { a bool b int32 c string d string } The size of the struct above is is different from the one down below
struct { b int32 c string d string a bool } Why is that? Well, think of memory as consisting of segments of certain size, where, if the amount of data you fill the segment with is bigger than the current remainder of the segment, the data will get written onto the next segment.</description>
    </item>
    
    <item>
      <title>X509: Certificate Signed by Unknown Authority (Running a Go App Inside a Docker Container)</title>
      <link>https://preslav.me/2019/08/11/x509-certificate-signed-by-unknown-authority-running-a-go-app-inside-a-docker-container/</link>
      <pubDate>Sun, 11 Aug 2019 07:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/11/x509-certificate-signed-by-unknown-authority-running-a-go-app-inside-a-docker-container/</guid>
      <description>If you ever get the following message:
x509: certificate signed by unknown authority While running your Go app in a Docker container, there is a chance that you might not have the necessary trusted certificates installed in your Docker container. Assuming that you run your Go apps in lightweight containers, based on Scratch or Alpine, you will have to add the certificates yourselves.
On Alpine, this can be done using the default package installer:</description>
    </item>
    
    <item>
      <title>Mixtape Retrospective: Time to Split the Monolith?</title>
      <link>https://preslav.me/2019/08/03/mixtape-retrospective-time-to-split-the-monolith/</link>
      <pubDate>Sat, 03 Aug 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/08/03/mixtape-retrospective-time-to-split-the-monolith/</guid>
      <description>I have recently made my project Mixtape open to the world. Mixtape is a search and discovery platform for podcasts, built exclusively using Go. I decided to use Go primarily because of its compiler&amp;rsquo;s ability to deliver small, self-contained executables with close-to-metal native performance and extremely low memory footprint. It was also a way to battle-test the stack and figure out where and how it will benefit future projects in my portfolio.</description>
    </item>
    
    <item>
      <title>Adding Version Information to Go Binaries</title>
      <link>https://preslav.me/2019/07/09/adding-version-information-to-go-binaries/</link>
      <pubDate>Tue, 09 Jul 2019 04:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/07/09/adding-version-information-to-go-binaries/</guid>
      <description>One of the things that I find really neat about Go, is the single-executable delivery model. For small projects, it&amp;rsquo;s as simple as dragging and dropping the built executable right where I need it. After some time, however, I might easily forget which version of my codebase a given executable has been built upon. If I have to revert a change, how can I make sure that I build from the right commit?</description>
    </item>
    
    <item>
      <title>Implementing a Functional-Style Builder in Go</title>
      <link>https://preslav.me/2019/07/07/implementing-a-functional-style-builder-in-go/</link>
      <pubDate>Sun, 07 Jul 2019 10:17:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/07/07/implementing-a-functional-style-builder-in-go/</guid>
      <description>Go is definitely not the first language on my mind, when I hear the term ‚ÄúFunctional Programming‚Äù. Yet, functions are first-class citizens in Go, and one can achieve a lot using higher-order functions (those that can receive and/or return other functions) alone.
In this post, I want to demonstrate the use of functional constructs for implementing the well-known Builder pattern. Please, note that there are many ways to implement a Builder, and I don&amp;rsquo;t claim that mine is certainly the best.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://preslav.me/microblog/201907022242/</link>
      <pubDate>Tue, 02 Jul 2019 19:42:07 +0000</pubDate>
      
      <guid>https://preslav.me/microblog/201907022242/</guid>
      <description>‚ÄúOnce a language gets complex enough, programming in it is more like carving out a subset from an infinite sea of features, most of which we‚Äôll never learn. Once a language feels infinite, the costs of adding further features to it are no longer apparent‚Äù. - Mark Miller
 An Open Letter To The Go Team About Try    ‚ÄúOnce a language gets complex enough, programming in it is more like carving out a subset from an infinite sea of features, most of which we‚Äôll never learn.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://preslav.me/microblog/201906211000/</link>
      <pubDate>Fri, 21 Jun 2019 08:00:18 +0000</pubDate>
      
      <guid>https://preslav.me/microblog/201906211000/</guid>
      <description>It‚Äôs amazing‚Äâ‚Äî amazing I say‚Äâ‚Äî‚Äâhow little generics are missed. To date, Go remains the small, simple language that fogies like me can remember Java being. I suppose that can‚Äôt last, but for now, I can pop open almost any .go file and if I can‚Äôt understand it pretty quick, the chances are very high that the problem is in the code not me.
 ongoing by Tim Bray ¬∑ Go Creeping In    I‚Äôve seen the inside of the Google and Amazon tech stacks.</description>
    </item>
    
    <item>
      <title>My Reasons to Consider Go Coming from Java</title>
      <link>https://preslav.me/2019/05/07/my-reasons-to-consider-go-coming-from-java/</link>
      <pubDate>Tue, 07 May 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/05/07/my-reasons-to-consider-go-coming-from-java/</guid>
      <description>I hate listicles, and I am highly hoping that this doesn‚Äôt become one of them. Yet, I somehow felt the need to write down the reasons why I am giving Go a second (or maybe, third ü§î) chance. To the Java developers out there, searching for a new weapon of choice, I am hoping that this will give you a bit of perspective. This is not a description of Go-specific features.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://preslav.me/microblog/201905011824/</link>
      <pubDate>Wed, 01 May 2019 16:24:56 +0000</pubDate>
      
      <guid>https://preslav.me/microblog/201905011824/</guid>
      <description>I felt that Go strikes the balance of robust systems programming and great performance with almost zero investment, and great developer experience. Some of that old 90‚Äôs feel, and a lot of that modern fantastic development practices.
 My Key Learnings after 30,000 LOC in Rust - Dotan Nahum - Medium    For me, Rust takes a stroll over the memory lane above and picks and drives home the best experiences from all those languages‚Ää‚Äî‚Ääwhich is a</description>
    </item>
    
    <item>
      <title>Deploying a Native Go Binary on Heroku</title>
      <link>https://preslav.me/2019/04/20/deploying-native-go-binary-on-heroku/</link>
      <pubDate>Sat, 20 Apr 2019 07:30:04 +0000</pubDate>
      
      <guid>https://preslav.me/2019/04/20/deploying-native-go-binary-on-heroku/</guid>
      <description>My company, KI labs recently held its first hackathon in our Munich office. My team and I went for a very cool mobile app idea that promotes healthy walking competitions among colleagues and friends. Though the app itself deserves a proper introduction, I will talk about it in a separate post. This time I will focus on one problem I experienced while working on the app&amp;rsquo;s backend part, written in Go.</description>
    </item>
    
    <item>
      <title>My Baby Steps with Go</title>
      <link>https://preslav.me/2019/02/20/my-baby-steps-with-go/</link>
      <pubDate>Wed, 20 Feb 2019 05:27:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/02/20/my-baby-steps-with-go/</guid>
      <description>Last week, I made my first tentative foray into Go programming. My company uses Go in a couple of projects, but although I have heard many positive things about the language, so far I have tried to stay away from it. The mere thought that Go is a 21st Century version of C and has been explicitly designed from the start to not try to be much more than that, can make everyone coming from Kotlin and Swift pull a few hairs at first.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Random Bits of Wisdom</title>
    <link>https://preslav.me/tags/programming/</link>
    <description>Recent content in Programming on Random Bits of Wisdom</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 11 Feb 2020 07:49:10 +0100</lastBuildDate>
    
	<atom:link href="https://preslav.me/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elixir Month</title>
      <link>https://preslav.me/2020/02/11/elixir-month/</link>
      <pubDate>Tue, 11 Feb 2020 07:49:10 +0100</pubDate>
      
      <guid>https://preslav.me/2020/02/11/elixir-month/</guid>
      <description>Yes, the Elixir. I’ve decided to use the cold February weather, as well as the relative project calm, and see how far I can go with it.
But why Elixir and why just now? There are a few reasons. Actually, this is not my first encounter with the language or the Erlang/BEAM ecosystem. About a year ago, a colleague at work and I started doing lunch break walks, in which we discussed tech topics, beyond the scope of our current projects.</description>
    </item>
    
    <item>
      <title>[Quote] You Can Think of Any Web Server as a Function</title>
      <link>https://preslav.me/2020/02/10/quote-you-can-think-of-any-web-server-as-a-function/</link>
      <pubDate>Mon, 10 Feb 2020 19:07:54 +0100</pubDate>
      
      <guid>https://preslav.me/2020/02/10/quote-you-can-think-of-any-web-server-as-a-function/</guid>
      <description>“You can think of any web server as a function. Each time you type a URL, think of it as a function call to some remote server. That function takes your request and generates some response. A web server is a natural problem for a functional language to solve.”
 Excerpt From Programming Phoenix by Chris McCord
Buy on Amazon
@media (max-width: 640px) { .embed-image { min-width: 100%; } }   Programming Phoenix  Don’t accept the compromise between fast and beautiful: you can have it all.</description>
    </item>
    
    <item>
      <title>A Crystal in Go’s World</title>
      <link>https://preslav.me/2020/01/26/a-crystal-in-go-s-world/</link>
      <pubDate>Sun, 26 Jan 2020 08:35:04 +0000</pubDate>
      
      <guid>https://preslav.me/2020/01/26/a-crystal-in-go-s-world/</guid>
      <description>Imagine a programming language with the ergonomic syntax of Ruby, the speed of execution of C, the concurrency model of Go, and last but not least, a compiler that performs null checks at compile time. Sounds like a dream? Well, this language exists, but chances are, you haven’t heard of it so far.
Meet Crystal!
Crystal is all of the above, plus it has types, outstanding documentation, and a strong community, delivering a steady stream of new libraries (a.</description>
    </item>
    
    <item>
      <title>[Quote] Manual Work is a Bug</title>
      <link>https://preslav.me/2020/01/18/quote-manual-work-is-a-bug/</link>
      <pubDate>Sat, 18 Jan 2020 08:35:04 +0000</pubDate>
      
      <guid>https://preslav.me/2020/01/18/quote-manual-work-is-a-bug/</guid>
      <description>Here are a few lines from Manual Work is a Bug that I firmly stand by:
 The successful engineer has a quick way to create documents for new procedures and to find existing procedures. People with this mindset avoid the cognitive load of deciding whether or not a task is worth documenting, because they document everything. On finding a potential improvement, they are not slowed by the speed bump of switching from a document viewer to a document editor because they work from the editor at the start.</description>
    </item>
    
    <item>
      <title>Reflecting on My Experience With Go, One Year After</title>
      <link>https://preslav.me/2020/01/17/reflecting-on-my-experience-with-go-one-year-after/</link>
      <pubDate>Fri, 17 Jan 2020 08:35:04 +0000</pubDate>
      
      <guid>https://preslav.me/2020/01/17/reflecting-on-my-experience-with-go-one-year-after/</guid>
      <description>In my little more than a year day-to-day developer experience with Go, I have so far learned three things:
 I can change my entire view of how programming works, even after 12+ years of doing it in one form or another. People are blaming Java for all the wrong reasons People are praising Go for all the wrong reasons  Let me explain. This post is not about saying that “language A is better than language B”, or vice versa.</description>
    </item>
    
    <item>
      <title>Using Gohack for Temporary Modifications to Go Module Dependencies</title>
      <link>https://preslav.me/2020/01/10/using-gohack-for-temporary-modifications-to-go-module-dependencies/</link>
      <pubDate>Fri, 10 Jan 2020 19:14:17 +0100</pubDate>
      
      <guid>https://preslav.me/2020/01/10/using-gohack-for-temporary-modifications-to-go-module-dependencies/</guid>
      <description>I started programming Go right at the time when the topic of modularization heated up. Of course, we all know how it all played out with Go modules. They are here and they are (IMO) great. I have spent a significant amount programming Python before virtual environments were really a thing, and believe me, things got really messed up at times.
One big disadvantage of modules is that one can’t really edit them.</description>
    </item>
    
    <item>
      <title>Panic Without Worry</title>
      <link>https://preslav.me/2019/12/14/panic-without-worry/</link>
      <pubDate>Sat, 14 Dec 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/12/14/panic-without-worry/</guid>
      <description>In the Go community, there is some kind of paranoia around panicking, as if it’s the worst thing that can happen to your application. In fact, it often is the better option. Think about Go programs as CLI applications. Would you rather crash right away and let the user react, or hang, trying to recover? The same applies to applications running as services. Modern tooling makes it easy to automatically restart a crashing service within seconds.</description>
    </item>
    
    <item>
      <title>If You Can’t Get Flutter to Work with Your Beta Version of Xcode</title>
      <link>https://preslav.me/2019/11/11/get-flutter-to-work-with-beta-xcode/</link>
      <pubDate>Mon, 11 Nov 2019 07:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/11/11/get-flutter-to-work-with-beta-xcode/</guid>
      <description>You need to explicitly set the beta version of Xcode as your default one via the command line:
sudo xcode-select -s /Applications/Xcode-beta.app/Contents/Developer/ Afterwards, getting your app to run via flutter run should work as it used to before.
Related Resources @media (max-width: 640px) { .embed-image { min-width: 100%; } }   select - Managing Multiple Versions Of Xcode  It&amp;#39;s not uncommon developers to have multiple versions of Xcode installed.</description>
    </item>
    
    <item>
      <title>Why I Still Find the Minimap Useful</title>
      <link>https://preslav.me/2019/11/10/why-i-still-find-the-minimap-useful/</link>
      <pubDate>Sun, 10 Nov 2019 07:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/11/10/why-i-still-find-the-minimap-useful/</guid>
      <description>This is an answer, I wrote in response to a recent blog post by Erica Sadun:
@media (max-width: 640px) { .embed-image { min-width: 100%; } }   My enemy the Minimap  The minimap is one of Xcode 11’s starring features. I know many people were excited for it at its debut but after months of exposure, I now just disable it in the Adjust Editor Options menu (… https://ericasadun.</description>
    </item>
    
    <item>
      <title>Go is Good Enough</title>
      <link>https://preslav.me/2019/10/18/go-is-good-enough/</link>
      <pubDate>Fri, 18 Oct 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/10/18/go-is-good-enough/</guid>
      <description>Have you heard about the Pareto Principle? Also known as the 80&amp;frasl;20 Rule, it states that for many aspects of life, 80% of the effects come from 20% of the inputs. Flip it around and the opposite is also true: reaching out for the rest of the 20% requires 80% of the initial effort. It is amazing how many manifestations of both exist in real life. One of the big wisdoms in life - it is often not the smartest, fastest, or strongest individuals that leave a dent.</description>
    </item>
    
  </channel>
</rss>
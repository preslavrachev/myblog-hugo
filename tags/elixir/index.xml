<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Elixir on Random Bits of Wisdom</title>
        <link>https://preslav.me/tags/elixir/</link>
        <description>Recent content in Elixir on Random Bits of Wisdom</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sat, 07 Mar 2020 17:04:29 +0100</lastBuildDate>
        <atom:link href="https://preslav.me/tags/elixir/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Elixir-Style Actors in Go</title>
            <link>https://preslav.me/2020/03/07/elixir-style-actors-in-golang/</link>
            <pubDate>Sat, 07 Mar 2020 17:04:29 +0100</pubDate>
            
            <guid>https://preslav.me/2020/03/07/elixir-style-actors-in-golang/</guid>
            <description>My foray into Elixir brought forward many more similarities between it and Go, than I originally expected. One of them is how both handle concurrency. With respect to that, creating Elixir-style stateful actors in Go is surprisingly easy. Answering the question, whether one needs them, or can make use of them, I’d leave to the user. If you approach me back saying that the same thing can be achieved using a channel or a map with sync.</description>
            <content type="html"><![CDATA[

<p>My foray into <a href="https://elixir-lang.org/">Elixir</a> brought forward many more similarities between it and Go, than I originally expected. One of them is how both handle concurrency. With respect to that, creating Elixir-style stateful actors in Go is surprisingly easy. Answering the question, whether one needs them, or can make use of them, I’d leave to the user. If you approach me back saying that the same thing can be achieved using a channel or a map with <code>sync.Mutex</code> slapped on it, you’d be (almost) right. Yet, it’s worth exploring different ways of thinking.</p>

<h1 id="a-10-000-foot-view-of-elixir">A 10.000-foot view of Elixir</h1>

<p>For those not aware of it, Elixir is a functional language. Everything runs inside an immutable function scope, and no state remains on the table. A function can only work on what it has been fed with. Functions reside inside modules and are being executed inside Erlang processes.</p>

<p>Technical differences aside, you can think of processes as the equivalent of Go’s goroutines. A function chain call runs inside a process/goroutine. When the outermost function returns, the process/goroutine ends. A process/goroutine can spawn other processes/goroutines to achieve concurrent execution of tasks. Go synchronizes over channels while Elixir over a message inbox that is built into every process. Using the built-in receive keyword, a function’s execution blocks inside a process, until a certain type of message gets received</p>

<pre><code class="language-elixir">receive do
    # Don't get too caught up on the Elixir syntax.
    # For now, it is only important to know that :message_a is equivalent
    # to a string with the value of &quot;message_a&quot;
    # Those are called &quot;atoms&quot; and are quite often used in Ruby-like laguages
    {:message_a, msg} -&gt;
        do_something_with(msg)
end
</code></pre>

<p>Fundamentally, this is the same as having a <a href="https://play.golang.org/p/rZkdET2ZhJl">goroutine block its execution waiting on a channel</a>:</p>

<pre><code class="language-go">type message struct {
    val string
}

msgStream := make(chan message)

go func(out chan message) {
    out &lt;- message{val: &quot;hello world&quot;}
}(msgStream)

msg := &lt;-msgStream
fmt.Printf(&quot;%+v&quot;, msg)
</code></pre>

<p>Whether you are waiting on a message to arrive in your inbox, or explicitly set a blocking channel as a communication mechanism, to me, it describes the same paradigm.</p>

<h1 id="turn-goroutines-into-stateful-actors">Turn goroutines into stateful actors</h1>

<p>Clear until now? Alright. Let’s move on. I already mentioned that Elixir is a functional language. Everything that gets passed to a function is immutable, and the only way to change it, is to return a new version of it. This means that looping constructs are not possible, since it would imply modifying and keeping track of a counter variable. The way functional languages achieve the effect of looping is through recursion (or to be more precise tail recursion):</p>

<pre><code class="language-elixir">def loop(5) do
    # Elixir uses pattern-matching when choosing which function to call.
    # In our case, as soon as its gets a count == 5, it will stop the loop
    5
end

def loop(count) do
    # Just print the count, but use pipes (|&gt;)
    # instead of wrapping in a function call -&gt; IO.puts(count)
    # Pipes totally save the day, when you have multiple call chains
    count
    |&gt; IO.puts()

    loop(count + 1)
end
</code></pre>

<h2 id="from-recursion-to-actors">From recursion to actors</h2>

<p>What if we take this recursion example and think of it as a never-ending loop. The first call to the function sets the initial state, and the function keeps calling itself ad-infinitum.</p>

<p>Now, this is where the purely functional paradigm breaks. We already learned that Erlang allows for other processes to communicate to us. This means that if our never ending recursive function receives a message from the outside, it can use its payload to call itself with a modified version of its initial state. Keeping in mind that receiving a message is a blocking operation, the process will simply linger around, not using any CPU resources, until our the right message arrives.</p>

<p>We can use the same messaging paradigm to poke inside the state of our never-ending function. Since it runs inside a separate process, the only way to do that is to send an appropriate message to it, pass our current process’ ID (PID) and let it send us a message back.</p>

<pre><code class="language-elixir">defmodule Calculator do
    def start do
    # creates a separate process with its own internal state
    spawn(fn -&gt; loop(0) end)
    end

    defp loop(current_value) do
    new_value =
        receive do
        # with this type of message, we can fetch the state of our calculator
        {:get, caller_pid} -&gt;
            send(caller_pid, {:response, current_value})
            current_value

        # with this type of message, we can modify the state of our calculator
        {:add, value} -&gt;
            current_value + value
        end

    loop(new_value)
    end
end
</code></pre>

<p>Let&rsquo;s test our calculator process:</p>

<pre><code class="language-elixir">defmodule CalculatorTest do
    def test_calculator do
    calc_pid = Calculator.start()

        # Like `receive`, `send` is built-in and take a PID, as well as a message
        # self() returns the process id (PID) of the current process
        # Like in Go, every piece of Elixir/Erlang code runs in a process
    send(calc_pid, {:get, self()})

        # `receive` will block, until we receive a message,
        # that matches the expected pattern - {:response, value}
    receive do
        {:response, value} -&gt;
        value |&gt; IO.puts()
    end

    send(calc_pid, {:add, 100})

    send(calc_pid, {:get, self()})

    receive do
        {:response, value} -&gt;
        value |&gt; IO.puts()
    end
    end
end
</code></pre>

<p>In essence, our never-ending function becomes what Elixir calls a stateful server process, an implementation of the <a href="https://en.wikipedia.org/wiki/Actor_model">Actor model</a>. Actors are great for isolating critical state and allowing for concurrent communication to it, ensuring that only one change happens at a time.</p>

<h2 id="from-elixir-to-go">From Elixir to Go</h2>

<p>Ok now that we know how things work in Elixir land, achieving the same thing on Go is super straightforward.</p>

<pre><code class="language-go">func main() {
    in := make(chan message)
    out := make(chan int)
    go newCalculator(0, in, out)

    in &lt;- message{operation: &quot;get&quot;}
    state := &lt;-out
    log.Printf(&quot;Current state: %d&quot;, state)

    in &lt;- message{operation: &quot;add&quot;, value: 100}
    in &lt;- message{operation: &quot;get&quot;}
    state = &lt;-out
    log.Printf(&quot;Current state: %d&quot;, state)
}

type message struct {
    operation string
    value     int
}

func newCalculator(initialState int, in chan message, out chan int) {
    state := initialState
    for {
        p := &lt;-in
        switch p.operation {
        case &quot;add&quot;:
            log.Printf(&quot;Adding %d to the current state&quot;, p.value)
            state += p.value

        case &quot;get&quot;:
            out &lt;- state
        }
    }
}
</code></pre>

<p>One thing to note is that since we can use an infinite-loop, we should just use that, especially, since based on my knowledge Go is not particularly optimized for long-cycle recursion. But the main premise remains the same. A function gets called with some initial state and returns a channel. The function starts an endless loop, blocking on the channel. If we push a value to that channel, the function will take it, update the state and block again.</p>

<h1 id="what-are-actors-good-for">What are actors good for?</h1>

<h2 id="private-state">Private state</h2>

<p>So, now that we unveiled the mystery behind actors, it’s a good point to discuss what they might be useful for.</p>

<p>One thing that immediately comes to mind, is achieving globally accessible, but truly private, synchronized state. This is currently achieved with the use of channels, <code>sync.Mutex</code>, or the new <code>sync.Map</code>.</p>

<pre><code class="language-go">type SynchronizedMap struct {
    sync.RWMutex
    internal map[string]interface{}
}

func (rm *SynchronizedMap) Store(key string, value interface{}) {
    rm.Lock()
    rm.internal[key] = value
    rm.Unlock()
}
</code></pre>

<p>The fragility of this approach comes from the fact that there is no real private state in Go applications. The map we named <code>internal</code> in the above example is only protected from outside access. Any piece of code inside the same package as our <code>SynchronizedMap</code> can freely access and modify its internals, leading to unexpected consequences. While this shouldn&rsquo;t be a concern in most cases, it&rsquo;s definitely good to keep in mind for special cases.</p>

<h2 id="stateful-autonomous-agents">Stateful autonomous agents</h2>

<p>Where the Actor model shines is the orchestration of systems of Actor instances - autonomous agents. Each Actor instance is able to change its state, reacting to the messages sent to it. Actor instances can easily spawn other Actor instances, which only the creating actors (supervisors) have control over (private state, remember). Supervisors can also take over failures of the actors their are responsible for, potentially, killing some off, and restarting them with a clean state. Taking this example to extremes, groroutines being fairly cheap, one can easily imagine a swarm of thousands of Actor instances, in a deeply nested hierarchy, with multiple levels of supervising actors taking over their &ldquo;progeny&rdquo;. This is the unique selling proposition of Erlang, but as I hope to have demonstrated, could be replicated in Go too.</p>

<p>As discussed in the beginning, I would leave the discussions about this approach&rsquo;s practicality, as well as its other applications to the reader. I would love to hear your thoughts. Do not hesitate to drop me a comment, or start a new discussion.</p>

<hr />

<h1 id="resources">Resources</h1>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1519435676i/38732242._UY630_SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/38732242-elixir-in-action">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Elixir in Action</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The Elixir language blends the battle-tested power and stability of the Erlang virtual machine with an approachable and expressive syntax...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/38732242-elixir-in-action">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<p>One of the best books about learning Elixir, and certainly, the one that inspired me to write this post. Saša Jurić&rsquo;s explanations are clear and demonstrative, especially on complex topics such as this one. If you like this blog, and would love to support my passion for reading great books, you can <a href="https://amzn.to/39AXJ6T">buy it on Amazon using this special link</a>. Thanks!</p>
]]></content>
        </item>
        
        <item>
            <title>iEx Is Dope!</title>
            <link>https://preslav.me/2020/02/24/iex-is-dope/</link>
            <pubDate>Mon, 24 Feb 2020 07:45:20 +0100</pubDate>
            
            <guid>https://preslav.me/2020/02/24/iex-is-dope/</guid>
            <description>iEx (Elixir&amp;rsquo;s interactive shell) is pure dope! It helped bring my development efforts back to the &amp;ldquo;let&amp;rsquo;s play and see what happens&amp;rdquo; level. Since Elixir modules are stateless and made up of pure functions, reloading a module is as easy as calling r MyModule inside iEx. During development, I&amp;rsquo;d try to keep one module called Demo, or Scratch, etc, where I&amp;rsquo;d do the quick and dirty setting up of things. This scratch module would usually have one function only, called demo or run.</description>
            <content type="html"><![CDATA[<p><a href="https://hexdocs.pm/iex/IEx.html">iEx (Elixir&rsquo;s interactive shell)</a> is pure dope! It helped bring my development efforts back to the &ldquo;let&rsquo;s play and see what happens&rdquo; level. Since Elixir modules are stateless and made up of pure functions, reloading a module is as easy as calling <code>r MyModule</code> inside iEx.
During development, I&rsquo;d try to keep one module called <code>Demo</code>, or <code>Scratch</code>, etc, where I&rsquo;d do the quick and dirty setting up of things. This scratch module would usually have one function only, called <code>demo</code> or <code>run</code>. This is what I call in iex. The rest I do in the respective modules, which I reload after every change.</p>

<p>At work, I get to work with Python a lot and one of the things I love there is <a href="https://ipython.org/">iPython</a>. It&rsquo;s such a strong REPL that I would often try and get my hands dirty there, before formalizing into code/test. In Python <a href="https://preslav.me/2018/04/22/live-reloading-of-python-modules/">module reloads are not always trivial</a>, however. This is where Elixir&rsquo;s functional, &ldquo;share-nothing&rdquo; nature steps up the game. It&rsquo;s easy to reload modules that have essentially no state.</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://miro.medium.com/max/1200/1*DKLIm-vne8pO-G58yjaRwA.jpeg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://blog.echobind.com/tips-and-tricks-for-iex-161d0049cfcd">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Tips and Tricks for IEx</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      When I first started learning Elixir, one of the first things I learned is how to get into the command line interface via IEx. Here are the…</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://blog.echobind.com/tips-and-tricks-for-iex-161d0049cfcd">https://blog.echobind.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Elixir Month</title>
            <link>https://preslav.me/2020/02/11/elixir-month/</link>
            <pubDate>Tue, 11 Feb 2020 07:49:10 +0100</pubDate>
            
            <guid>https://preslav.me/2020/02/11/elixir-month/</guid>
            <description>Yes, the Elixir. I’ve decided to use the cold February weather, as well as the relative project calm, and see how far I can go with it.
But why Elixir and why just now? There are a few reasons. Actually, this is not my first encounter with the language or the Erlang/BEAM ecosystem. About a year ago, a colleague at work and I started doing lunch break walks, in which we discussed tech topics, beyond the scope of our current projects.</description>
            <content type="html"><![CDATA[

<p>Yes, the <a href="https://elixir-lang.org/">Elixir</a>. I’ve decided to use the cold February weather, as well as the relative project calm, and see how far I can go with it.</p>

<h2 id="but-why-elixir-and-why-just-now">But why Elixir and why just now?</h2>

<p>There are a few reasons. Actually, this is not my first encounter with the language or the Erlang/BEAM ecosystem. About a year ago, a colleague at work and I started doing lunch break walks, in which we discussed tech topics, beyond the scope of our current projects. My colleague is a big Elixir fan and has mentioned many times the advantages of Erlang and the BEAM VM. More than anything else, one thing struck me the most. All of the challenges that the cloud community of today is trying to tackle, such as:</p>

<ul>
<li>resilience</li>
<li>scalabiltiy</li>
<li>distribution</li>
<li>deployment</li>
</ul>

<p>etc, have already been thought about, and solved by a research group at Ericsson around three decades ago (albeit, at a smaller scale). Sure, Erlang is not an easy language to work with, but thanks to <a href="https://twitter.com/josevalim">José Valim</a> and his work on Elixir, it wouldn’t even be necessary. So, about a year back, I took my first plunge.</p>

<h2 id="that-s-not-for-me">That’s not for me</h2>

<p>I got out of the water just as quickly as I got in there. Sure, Elixir is not nearly as obscure as Erlang, but it can be a bit overwhelming for the newcomer. Especially, if one is trying to swallow the whole OTP bit at the same time. At the time, I had discovered the simplistic philosophy of Golang, and despite all the alleged advantages, Elixir seemed way too much overhead. I (in)famously dismissed the language, as one where “the amount of punctuation might give you a headache”. Let alone the fact that similar to Java applications, Elixir ones also need the entire kitchen sink to be in place for an application to run. Compare this to a statically-bound Go app that you just throw onto a machine and you are good to go.</p>

<h2 id="crystal-enters-the-stage">Crystal enters the stage</h2>

<p>As a side note, I have to mention that part of why I dropped my initial foray into Elixir was because of a bias. I felt that it was too, Ruby-esque, whatever that must have meant to me at the time. I have somehow missed the early Ruby and Rails train around 15 years ago. My programming career set me on a different path. I have always been aware of Ruby’s community spirit, but only during the past year, did I come to appreciate the language and its writing aesthetic. Ironically, not through a Ruby itself, but via a wonderful derivative language, named <a href="https://crystal-lang.org/">Crystal</a>. I already went into more detail about Crystal <a href="https://preslav.me/2020/01/26/a-crystal-in-go-s-world/">in a previous post</a>.</p>

<p>The more I started dabbling into Crystal, the more I started looking at its inspiration - Ruby. Ruby is certainly not a language without flaws, and the community is trying to work on those. Partially, via addressing those issues at the core - Ruby 3.0 is expected to arrive <a href="https://bugs.ruby-lang.org/versions/5">at the end of this year</a>. Yet, others are taking what the language is best known for, and applying it to other paradigms - such as Elixir’s functional approach to programming.</p>

<h2 id="second-attempt-elixir-month">Second attempt: Elixir Month</h2>

<p>My second attempt to tackle Elixir seems to go much more smoothly than the first one. One day, I had the feeling that the constructs in the language just clicked for me- even the nasty OTP ones. I set out out a goal for myself to use Elixir for a month during February, and see how far I can go with it.</p>

<hr />

<h2 id="some-starting-resources">Some starting resources</h2>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1519435676i/38732242._UY630_SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/38732242-elixir-in-action">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Elixir in Action</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The Elixir language blends the battle-tested power and stability of the Erlang virtual machine with an approachable and expressive syntax...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/38732242-elixir-in-action">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<p>Really, one of the best books on starting with Elixir. If you enjoy it, please help me support this site by <a href="https://amzn.to/2HFjtSR">buying it on Amazon</a>.</p>

<p>Let Saša Jurić himself convince you:

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube-nocookie.com/embed/JvBT4XBdoUE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube-nocookie.com/embed/gom6nEvtl3U" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content>
        </item>
        
        <item>
            <title>[Quote] You Can Think of Any Web Server as a Function</title>
            <link>https://preslav.me/2020/02/10/quote-you-can-think-of-any-web-server-as-a-function/</link>
            <pubDate>Mon, 10 Feb 2020 19:07:54 +0100</pubDate>
            
            <guid>https://preslav.me/2020/02/10/quote-you-can-think-of-any-web-server-as-a-function/</guid>
            <description>“You can think of any web server as a function. Each time you type a URL, think of it as a function call to some remote server. That function takes your request and generates some response. A web server is a natural problem for a functional language to solve.”
 Excerpt From Programming Phoenix by Chris McCord
Buy on Amazon
@media (max-width: 640px) { .embed-image { min-width: 100%; } }   Programming Phoenix  Don’t accept the compromise between fast and beautiful: you can have it all.</description>
            <content type="html"><![CDATA[<blockquote>
<p>“You can think of any web server as a function. Each time you type a URL, think of it as a function call to some remote server. That function takes your request and generates some response. A web server is a natural problem for a functional language to solve.”</p>
</blockquote>

<p>Excerpt From <em><a href="https://www.goodreads.com/book/show/26871792-programming-phoenix">Programming Phoenix</a></em> by Chris McCord</p>

<p><a href="https://amzn.to/2vkYthk">Buy on Amazon</a></p>

<hr />






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1444081913i/26871792._UY630_SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/26871792-programming-phoenix">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Programming Phoenix</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Don’t accept the compromise between fast and beautiful: you can have it all. Phoenix creator Chris McCord, Elixir creator José Valim, and...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/26871792-programming-phoenix">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>[Quote] Ten Years of Erlang</title>
            <link>https://preslav.me/2019/07/10/quote-ten-years-of-erlang/</link>
            <pubDate>Wed, 10 Jul 2019 10:28:44 +0100</pubDate>
            
            <guid>https://preslav.me/2019/07/10/quote-ten-years-of-erlang/</guid>
            <description>It&amp;rsquo;s probably not too important, in the grand scheme of things, whether you are using a language like Erlang or not. While I do feel it&amp;rsquo;s under-used and under-rated, the biggest benefit of it is not in running a system that uses it. The biggest benefit comes from learning about the fundamentals of solid system design, and internalizing its lessons in a practical context.
 @media (max-width: 640px) { .</description>
            <content type="html"><![CDATA[<blockquote>
<p>It&rsquo;s probably not too important, in the grand scheme of things, whether you are using a language like Erlang or not. While I do feel it&rsquo;s under-used and under-rated, the biggest benefit of it is not in running a system that uses it. The biggest benefit comes from learning about the fundamentals of solid system design, and internalizing its lessons in a practical context.</p>
</blockquote>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://ferd.ca/static/img/erlang-ladder.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://ferd.ca/ten-years-of-erlang.html">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Ten Years of Erlang</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      For my ten years in the Erlang community, I decided to cover a few topics such as hype phases and how this related to Erlang, the ladder of ideas within the language and how that can impact adoption, what changed in my decade there, and what I think Erlang still has to bring to the programming community at large.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://ferd.ca/ten-years-of-erlang.html">https://ferd.ca | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
    </channel>
</rss>

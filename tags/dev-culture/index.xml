<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Dev Culture on Random Bits of Wisdom</title>
        <link>https://preslav.me/tags/dev-culture/</link>
        <description>Recent content in Dev Culture on Random Bits of Wisdom</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 15 Apr 2020 16:00:00 +0000</lastBuildDate>
        <atom:link href="https://preslav.me/tags/dev-culture/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Developer Hegemony: The Future of Labor</title>
            <link>https://preslav.me/2020/04/15/quote-developer-hegemony-the-future-of-labor/</link>
            <pubDate>Wed, 15 Apr 2020 16:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2020/04/15/quote-developer-hegemony-the-future-of-labor/</guid>
            <description>A quote from the amazing book &amp;ldquo;Developer Hegemony&amp;rdquo; (Buy on Amazon) by Erik Dietrich:
 You need to stop viewing yourself as a software engineer II or a QA specialist or a dev manager. You need to stop viewing yourself as an employee of your (or any) company and start viewing yourself as the owner of your personal brand and operation. You are an island. You are other.
 How many of you, dear readers think this way?</description>
            <content type="html"><![CDATA[<p>A quote from the amazing book <a href="https://amzn.to/2Va55tn">&ldquo;Developer Hegemony&rdquo; (Buy on Amazon)</a> by Erik Dietrich:</p>

<blockquote>
<p>You need to stop viewing yourself as a software engineer II or a QA specialist or a dev manager. You need to stop viewing yourself as an employee of your (or any) company and start viewing yourself as the owner of your personal brand and operation. You are an island. You are <em>other.</em></p>
</blockquote>

<p>How many of you, dear readers think this way? Let me know in the comments below, or <a href="/contact">write me a message</a>.</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1493740696i/35051753._UY630_SR1200,630_.jpg); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.goodreads.com/book/show/35051753-developer-hegemony">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Developer Hegemony</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      It’s been said that software is eating the planet. The modern economy—the world itself—relies on technology. Demand for the people who ca...</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.goodreads.com/book/show/35051753-developer-hegemony">https://www.goodreads.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>[Quote] Manual Work is a Bug</title>
            <link>https://preslav.me/2020/01/18/quote-manual-work-is-a-bug/</link>
            <pubDate>Sat, 18 Jan 2020 08:35:04 +0000</pubDate>
            
            <guid>https://preslav.me/2020/01/18/quote-manual-work-is-a-bug/</guid>
            <description>Here are a few lines from Manual Work is a Bug that I firmly stand by:
 The successful engineer has a quick way to create documents for new procedures and to find existing procedures. People with this mindset avoid the cognitive load of deciding whether or not a task is worth documenting, because they document everything. On finding a potential improvement, they are not slowed by the speed bump of switching from a document viewer to a document editor because they work from the editor at the start.</description>
            <content type="html"><![CDATA[<p>Here are a few lines from <em><a href="https://queue.acm.org/detail.cfm?id=3197520">Manual Work is a Bug</a></em> that I firmly stand by:</p>

<blockquote>
<p>The successful engineer has a quick way to create documents for new procedures and to find existing procedures. People with this mindset avoid the cognitive load of deciding whether or not a task is worth documenting, because they document everything. On finding a potential improvement, they are not slowed by the speed bump of switching from a document viewer to a document editor because they work from the editor at the start. Heck, they have a dedicated second monitor just for their editing app!</p>

<p>[…]</p>

<p>The successful engineer realizes that the earlier he starts collaborating, the sooner others can contribute. Together they can create a culture of documentation that spreads throughout the team. Thus, every project is collaborative and has a “stone soup” feeling, as all are invited to bring their skills and insights. The more people who embody this culture, the more success it has.</p>

<p>[…]</p>

<p>By creating a culture of continuous improvement, constantly taking baby steps along the four phases, the work becomes less stressful and easier to manage. While the other reasons listed here are quite logical, what motivates me to maintain this discipline is more emotional: I want to reduce stress and have more time for creativity and joy.</p>
</blockquote>

<p>/Thomas A. Limoncelli/</p>






<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  

  <div class="embed-image"
    style="flex: 1 1 0%; background: rgba(0, 0, 0, 0) linear-gradient(#eaeaea 0%, #73747b 100%) repeat scroll 0% 0%; min-height: 120px;">
  </div>

  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://queue.acm.org/detail.cfm?id=3197520">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Manual Work is a Bug</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      </div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://queue.acm.org/detail.cfm?id=3197520">https://queue.acm.org | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>
]]></content>
        </item>
        
        <item>
            <title>Reflecting on My Experience With Go, One Year After</title>
            <link>https://preslav.me/2020/01/17/reflecting-on-my-experience-with-go-one-year-after/</link>
            <pubDate>Fri, 17 Jan 2020 08:35:04 +0000</pubDate>
            
            <guid>https://preslav.me/2020/01/17/reflecting-on-my-experience-with-go-one-year-after/</guid>
            <description>In my little more than a year day-to-day developer experience with Go, I have so far learned three things:
 I can change my entire view of how programming works, even after 12+ years of doing it in one form or another. People are blaming Java for all the wrong reasons People are praising Go for all the wrong reasons  Let me explain. This post is not about saying that “language A is better than language B”, or vice versa.</description>
            <content type="html"><![CDATA[

<p>In my little more than a year day-to-day developer experience with Go, I have so far <strong>learned three things</strong>:</p>

<ol>
<li>I can change my entire view of how programming works, even after 12+ years of doing it in one form or another.</li>
<li>People are blaming Java for all the wrong reasons</li>
<li>People are praising Go for all the wrong reasons</li>
</ol>

<p>Let me explain. This post is not about saying that “language A is better than language B”, or vice versa. It is about asking ourselves the question why things work the way they do, and whether doing them differently is a bad, or potentially, good thing.</p>

<p>Before joining the Go camp, I had worked quite a few years as a Java developer, with all the stereotypes that this role could evoke in one’s head. I co-developed data-processing systems for various industries. Yet, much of the code I wrote was just boilerplate: passing data from one format to the other, or devising complex abstractions behind what should have really just been calling a function and obtaining its result. Yes, the code was difficult to comprehend, but I was proud of it for this exact reason. The more hoops I created, the more secure I felt that:</p>

<ol>
<li>I was doing what I thought was right</li>
<li>If people didn’t understand the code, they’d have to come to me for an advice, further boosting my ego.</li>
</ol>

<h2 id="the-language-is-not-to-blame-for-this">The language is not to blame for this</h2>

<p>The fact that much of the existing Java code is full of bureaucracy has nothing to do with the language itself, or with its platform. Our developer community should bear the sole responsibility. I can assure anyone that perfectly functioning Java applications can be written without 90% of the ceremony. They will be smaller and run faster. Most probably, easier to comprehend, too. And yet, they won’t get you hired in any well-respected company. They just won’t pass the <em>developer prejudice</em> test. I know. I’ve seen many elegant solutions and rejected them for not being /idiomatic/ enough.</p>

<h2 id="go-isn-t-a-silver-bullet-either">Go isn’t a silver bullet either</h2>

<p>For much of the same reasoning, jumping ship towards Go, just because “it is not Java”, won’t bring anyone far. Even before I started writing Go, I had heard and read many stories, about how simple and fast it made everything, how little ceremony it had, compared to Java, how it would eventually kill all other languages, etc. All blah, blah. Despite all of the above being true, you have to discover the truth in each for yourselves. If you approach the language out of desperation with your current way of working, you’re going to be set for a rough path.</p>

<p>See, if you all you wanted was to get a faster running (name language of choice), you could certainly do it. Yet, holding on to the mental baggage of your previous experience will be hard and messy. My first Go project started out as a rewrite of a Spring Boot app I’d started earlier, so I thought I’d just organize it the same way. To keep the story short, let’s just say it was a spectacular disaster. Only after I started from scratch, did it really start taking off.</p>

<h2 id="go-is-a-language-without-with-less-idioms">Go is a language without (with less) idioms</h2>

<p>Let’s do a naive math experiment. Imagine that you could create valid programming expressions combining any 3 keywords, from a programming language’s vocabulary. Thus, if a language only has 10 keywords, the maximum number of possible expressions is 10 * 9 * 8 = 720. In contrast, a language, with, say, 20 keywords would end up having 20 * 19 * 18 = 6840 expressions. Twice as many keywords would result in almost 10 times as many expressions!</p>

<p>Languages tend to encourage the creation and use of idioms. With that many possible expressions, it’s a normal behaviour for an individual, or a group of people to start associating and using expressions for certain things. The problems usually occur when another group comes with its own way of expressing the same thing. Both are perfectly valid, but each group would have issues understanding the other.</p>

<p>This is not to say that Go having a very strict and concise nature, is totally devoid of idioms. That would be impossible. It is in our nature to try to associate and abstract certain concepts. Yet, when a language has a deliberately smaller vocabulary, the chances for different groups accidentally finding multiple ways of doing the same thing are smaller. This helps the communication between people a great deal, but comes with a very obvious downside. Code (or any written expression, for that matter) without idioms is very, very verbose.</p>

<p>So, whoever told you that Go is not a verbose language, probably either lied to you on purpose, or had’n really seen any other programming languages up until that point. But hey, we agreed that verbosity in the name of communication and common understanding is a actually a good thing, right?s</p>

<h2 id="go-is-a-test-for-senior-engineers">Go is a test for senior engineers</h2>

<p>A lot has been said about the initial concept about Go, and how the idea was to design a language for juniors fresh out of college, and with little programming experience. I think that understanding the beauty of going back to the roots of programming, can be a cathartic experience for many seasoned programmers.</p>

<p>See, junior programmers start with little baggage and preconceptions, so in their view, anything that can be done with code is fair and justified. Including, burning a CPU, or erasing a disk due to an arithmetic error.</p>

<p>Somewhere along the middle of the career path, a bunch of principles start to pile up. All of them out of the desire to step on what’s already been learned, and to make sure that things are smoothly and safely without immediate supervision. Learning and applying the principles is great, because it ensures a gradual path forward. But for many, it becomes a dogma which they blindly stick to, without asking whether a simpler alternative could be better.</p>

<p>The problem with principles is that they only work well around 80% of the time. It is the remaining 20% that can be disastrous for a project, or for one’s career. It is the understanding where to apply a principle, and where to deliberately throw it away in the name of pragmatism, which turns a software engineer into a senior software engineer.</p>

<p>To really appreciate Go, one needs to learn how to discern what makes it and its community stand out from the rest. One needs to go through a phase of utter disgust with the language, for it “lacking” certain feature. Moving on despite the urge to go back to a familiar ground, would result in one of two things:</p>

<ol>
<li>Make one realise that indeed, the Go language is not what they need or want</li>
<li>Learn to appreciate going back to the roots, as well as when to favour pragmatism over principles</li>
</ol>

<p>In any case, it would be an interesting experience.</p>
]]></content>
        </item>
        
        <item>
            <title>Good Code is Boring</title>
            <link>https://preslav.me/2019/09/21/good-code-is-boring/</link>
            <pubDate>Sat, 21 Sep 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/09/21/good-code-is-boring/</guid>
            <description>You have seen them many times. Small snippets of code and the question &amp;ldquo;What would the the following piece of code print&amp;rdquo; beneath. You might have tried taking a guess, and perhaps, even failed.
#golang pop quiz: what will this print? https://t.co/99xR8wybpp pic.twitter.com/Q7YpJbYr8c
&amp;mdash; ✕✕✕✕✕ (@peterbourgon) May 18, 2017 I find those kinds of questions utterly pointless. They not only teach you nothing about real-world programming, but might also lead many newcomers to long-term frustration with programming.</description>
            <content type="html"><![CDATA[<p>You have seen them many times. Small snippets of code and the question <strong><em>&ldquo;What would the the following piece of code print</em></strong>&rdquo; beneath. You might have tried taking a guess, and perhaps, even failed.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw">#golang</a> pop quiz: what will this print? <a href="https://t.co/99xR8wybpp">https://t.co/99xR8wybpp</a> <a href="https://t.co/Q7YpJbYr8c">pic.twitter.com/Q7YpJbYr8c</a></p>&mdash; ✕✕✕✕✕ (@peterbourgon) <a href="https://twitter.com/peterbourgon/status/865159346149314560?ref_src=twsrc%5Etfw">May 18, 2017</a></blockquote>


<p>I find those kinds of questions utterly pointless. They not only teach you <strong>nothing</strong> about real-world programming, but might also lead many newcomers to long-term frustration with programming.</p>

<p>All programming languages have baggage - obscure features that made it in the spec but were later deemed as <strong>hacks</strong> that should be avoided. There is a certain sense of pride that junior programmers feel when they find such hacks and use them to demonstrate problem-solving skills. I am all in favor of encouraging developers to be proactive and think out of the box. Yet, I often try to point out that using questions like the above as a way of judging one&rsquo;s skills is the wrong way to do it. The mere fact that an opportunity for such questions exists in the first place, should make one take a skeptical look at the language itself.</p>

<p>Contrary to what your teacher taught you, real-world programming is all but proving yourself at solving complex riddles. Much of the well-written production code I have seen is pretty trivial and boring-looking like. This makes it easy to follow and maintain years down the road, once its original creator no longer works on it.</p>
]]></content>
        </item>
        
        <item>
            <title>Give Me Back My Monolith</title>
            <link>https://preslav.me/2019/03/23/give-me-back-my-monolith/</link>
            <pubDate>Sat, 23 Mar 2019 05:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/03/23/give-me-back-my-monolith/</guid>
            <description>@media (max-width: 640px) { .embed-image { min-width: 100%; } }   Give me back my monolith  It feels like we’re starting to pass the peak of the hype cycle of microservices. It’s no longer multiple times a week we now see a blog … http://www.craigkerstiens.com |  Created with NoEmbed    Give Me Back My Monolith by Craig Kerstiens is something I have been ranting about for quite some time.</description>
            <content type="html"><![CDATA[




<style scoped>
  @media (max-width: 640px) {
    .embed-image {
      min-width: 100%;
    }
  }
</style>
<div
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  

  <div class="embed-image"
    style="flex: 1 1 0%; background: rgba(0, 0, 0, 0) linear-gradient(#eaeaea 0%, #73747b 100%) repeat scroll 0% 0%; min-height: 120px;">
  </div>

  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Give me back my monolith</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      It feels like we’re starting to pass the peak of the hype cycle of microservices. It’s no longer multiple times a week we now see a blog …</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/">http://www.craigkerstiens.com | </a></div>
      <div style="float: right">Created with <a
          href="https://noembed.preslav.me/">NoEmbed</a></div>
    </div>
  </div>
</div>

<p><p><a href="http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/">Give Me Back My Monolith</a> by Craig Kerstiens is something I have been ranting about for quite some time. It is thus good to see <a href="http://www.craigkerstiens.com">other people</a> standing on the same side of the bridge:</p><blockquote>As we ventured into micro-services onboarding time skyrocketed. Yes, we have docker and orchestration such as K8s these days to help, but the time from start to up and running a K8s cluster just to onboard a new engineer is orders of magnitude larger than we saw a few years ago. For many junior engineers this is a burden that really is unnecessary complexity.</blockquote><p>What most programmers forget is that a) <a href="https://en.wikipedia.org/wiki/Cargo_cult_programming">cargo-culting</a> is a thing, and b) micro-services are just a tool like anything else. I have fallen into this trap myself quite a few times myself. Just like you won&rsquo;t use Objective-C for Web development or embed an Oracle database inside your mobile app, <em>you don&rsquo;t have to use micro-services in every project you are working on</em>. You can, but in 90% of the cases, you won&rsquo;t need to. As with most things in life, a micro-service (or macro) architecture is something you reach out of necessity. Unless requirements force you right off the bat, focus on building your product as a single, unified core instead.</p><p><strong>Remember:</strong> A micro-service architecture shifts the complexity form the code to the infrastructure, Or, as I used to say: <em>&ldquo;Before micro-services, I chased domain problems, now I am mostly chasing Kubernetes issues, in order to get to the domain problems&rdquo;</em></p><p><a href="http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/">Give Me Back My Monolith</a> was also featured in the latest of the <a href="https://pythonbytes.fm">Python Bytes</a> podcast:</p><audio controls src="https://pythonbytes.fm/episodes/download/122/give-me-back-my-monolith.mp3"></audio><p></p><ul><li><a href="http://www.craigkerstiens.com/2019/03/13/give-me-back-my-monolith/">Give Me Back My Monolith</a></li><li><a href="https://pythonbytes.fm/episodes/show/122/give-me-back-my-monolith">Episode #122: Give Me Back My Monolith | Python Bytes Podcast</a></li></ul></p>
]]></content>
        </item>
        
    </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Tools on Random Bits of Wisdom</title>
        <link>https://preslav.me/tags/tools/</link>
        <description>Recent content in Tools on Random Bits of Wisdom</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 10 Nov 2019 07:00:00 +0000</lastBuildDate>
        <atom:link href="https://preslav.me/tags/tools/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Why I Still Find the Minimap Useful</title>
            <link>https://preslav.me/2019/11/10/why-i-still-find-the-minimap-useful/</link>
            <pubDate>Sun, 10 Nov 2019 07:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/11/10/why-i-still-find-the-minimap-useful/</guid>
            <description>This is an answer, I wrote in response to a recent blog post by Erica Sadun:
 My enemy the Minimap  The minimap is one of Xcode 11’s starring features. I know many people were excited for it at its debut but after months of exposure, I now just disable it in the Adjust Editor Options menu (… https://ericasadun.com |  Created with Linqable    Many people ignore a particular use of the minimap - understanding the complexity of some portion of the code, without having to look at each line.</description>
            <content type="html"><![CDATA[<p>This is an answer, I wrote in response to a recent blog post by <a href="https://ericasadun.com">Erica Sadun</a>:</p>








<div class="embed"
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://ericasadun.com/wp-content/uploads/2019/11/Screen-Shot-2019-11-08-at-8.07.45-AM.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://ericasadun.com/2019/11/08/my-enemy-the-minimap/">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        My enemy the Minimap</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The minimap is one of Xcode 11’s starring features. I know many people were excited for it at its debut but after months of exposure, I now just disable it in the Adjust Editor Options menu (…</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://ericasadun.com/2019/11/08/my-enemy-the-minimap/">https://ericasadun.com | </a></div>
      <div style="float: right">Created with <a
          href="https://linqable.pro/">Linqable</a></div>
    </div>
  </div>
</div>

<p>Many people ignore a particular use of the minimap - understanding the complexity of some portion of the code, without having to look at each line. In most languages, complexity increases with the level of nesting of code. This is usually difficult to estimate when reading the code itself, since the brain is focused on what the code does, rather than how nested it is. By obscuring the text, and leaving only a bird&rsquo;s-eye view of the layout, the minimap might help pinpoint parts of the code, needing improvement. It can be very helpful when working with someone else code, or with a code base, which you haven&rsquo;t touched in a while.</p>
]]></content>
        </item>
        
        <item>
            <title>Any Code Style You like as Long It&#39;s Black</title>
            <link>https://preslav.me/2019/10/26/any-code-style-you-like-as-long-as-it-is-black/</link>
            <pubDate>Sat, 26 Oct 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/10/26/any-code-style-you-like-as-long-as-it-is-black/</guid>
            <description>The other day, I had to go over some (not so) old Python code I wrote. The moment I started pulling my hair, came not when I figured out that I could no longer understand what it does. It was when I looked at how the code was formatted. To be precise - at its total lack of any formatting.
 psf/black  The uncompromising Python code formatter. Contribute to psf/black development by creating an account on GitHub.</description>
            <content type="html"><![CDATA[

<p>The other day, I had to go over some (not so) old Python code I wrote. The moment I started pulling my hair, came not when I figured out that I could no longer understand what it does. It was when I looked at how the code was formatted. To be precise - at its total lack of <strong>any</strong> formatting.</p>








<div class="embed"
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://repository-images.githubusercontent.com/125266328/48aef880-6cce-11e9-9e3c-3ca0dd3ac138); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://github.com/psf/black">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        psf/black</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The uncompromising Python code formatter. Contribute to psf/black development by creating an account on GitHub.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://github.com/psf/black">https://github.com | </a></div>
      <div style="float: right">Created with <a
          href="https://linqable.pro/">Linqable</a></div>
    </div>
  </div>
</div>

<p>The first thing I do when I start a new project nowadays, is to set up an automatic code formatter. My personal favorite for Python is <a href="https://github.com/psf/black">Black</a>. It is an opinionated formatter made by <a href="https://github.com/ambv">Łukasz Langa</a> - a Python Core developer. Black leaves little choice when it comes to configuration. You can think of it as the <a href="https://golang.org/cmd/gofmt/">gofmt</a> or <a href="https://prettier.io/">Prettier</a> of Python. Integrate it with your editor of choice, or use the CLI over your code base and Black will do the rest:</p>

<pre><code class="language-python">from seven_dwwarfs import Grumpy, Happy, Sleepy, Bashful, Sneezy, Dopey, Doc
x = {  'a':37,'b':42, 'c':927}

if very_long_variable_name is not None and \
 very_long_variable_name.field &gt; 0 or \
 very_long_variable_name.is_debug:
 z = 'hello '+'world'
else:
 world = 'world'
 a = 'hello {}'.format(world)
 f = rf'hello {world}'
if (this
and that): y = 'hello world'
</code></pre>

<p>will transform into this:</p>

<pre><code class="language-python">from seven_dwwarfs import (
    Grumpy,
    Happy,
    Sleepy,
    Bashful,
    Sneezy,
    Dopey,
    Doc,
)

x = {&quot;a&quot;: 37, &quot;b&quot;: 42, &quot;c&quot;: 927}

if (
    very_long_variable_name is not None
    and very_long_variable_name.field &gt; 0
    or very_long_variable_name.is_debug
):
    z = &quot;hello &quot; + &quot;world&quot;
else:
    world = &quot;world&quot;
    a = &quot;hello {}&quot;.format(world)
    f = rf&quot;hello {world}&quot;
if this and that:
    y = &quot;hello world&quot;
</code></pre>








<div class="embed"
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://black.now.sh/static/screenshot.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://black.now.sh">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        Black Playground</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      Playground for Black, the uncompromising Python code formatter.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://black.now.sh">https://black.now.sh | </a></div>
      <div style="float: right">Created with <a
          href="https://linqable.pro/">Linqable</a></div>
    </div>
  </div>
</div>

<h1 id="isn-t-pep8-enough">Isn&rsquo;t PEP8 enough?</h1>

<p>When it comes to code style, most Python developers point out <a href="https://www.python.org/dev/peps/pep-0008">PEP8</a>. <a href="https://www.python.org/dev/peps/pep-0008">PEP8</a> is a good style guide, but definitely not a set of strict formatting rules. The same piece of code might be written in different ways, and still be compliant with PEP8. This is by design, as much of the Python philosophy is to leave the freedom and the final decision to the programmer. For comparison, Go follows a different mentality, where most of the extra energy aspects of programming are taken over by the compiler and the available tooling.</p>

<p>Unfortunately, even PEP8-compliant code still leads to arguments when it comes to keeping a unified code base. I don&rsquo;t know about you, but I have reached a level of pragmatism, where I don&rsquo;t care much about style and formatting, as long as it has been standardized everywhere. This is where Black enters the stage.</p>

<h1 id="black-is-relentless">Black is relentless</h1>

<p>Black has one guiding philosophy - produce diffs as small as possible. If one expression can fit on a single line (88 chars), regardless of how complex it is, it will be kept on a single line.</p>

<p>In most programming languages, nested expressions (multiple levels of indentation, as well as opening and closing brackets) are what makes code complex. Python list and dict comprehensions can be particularly nasty to comprehend, once they go over a certain length.</p>

<p>Black splits long expressions into multiple lines, where the outermost brackets get separated from the inner content. If the inner content is longer than the line limit, the same operation gets repeated recursively on and on.</p>

<p>The result is code, which, although taking more vertical space than writing a few one-liners, is much easier to read and reason about. The fact that Black will always format your code the same way makes even more sense when working with other people. Lines diffs are the way source control systems indicate changes. Therefore, uniformly splitting complex code into multiple lines makes code reviews easier and takes away almost discussions around style.</p>

<h1 id="black-is-stubborn">Black is stubborn</h1>

<p>Borrowing ideas from <a href="https://golang.org/cmd/gofmt/">gofmt</a>, Black has close to zero configuration options, especially, when it comes to variations of formatting style. I welcome such initiatives, because formatting is not something I would like to personally spend time dealing with. If this is not to your taste, however, you might try out the notable alternatives, such as <a href="https://github.com/google/yapf">yapf</a> and <a href="https://github.com/hhatto/autopep8">autopep8</a>. <a href="https://github.com/google/yapf">yapf</a>, in particular, has multiple code style options, e.g. from Google, Facebook, which you can try and see if any fits your taste. You can always create your own, and share it across all fo your projects.</p>

<h1 id="know-when-to-be-inconsistent">Know when to be inconsistent</h1>

<p>Contrary to everything I have said so far, there might be times when blindlyy following a consistent standard is just inapplicable. As PEP8 says it: <em>&ldquo;When in doubt, use your best judgment. Look at other examples and decide what looks best. And don&rsquo;t hesitate to ask!&rdquo;</em></p>

<hr />


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/esZLCuWs_2Y" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>






<div class="embed"
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://www.python.org/static/opengraph-icon-200x200.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.python.org/dev/peps/pep-0008">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        PEP 8 -- Style Guide for Python Code</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      The official home of the Python Programming Language</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.python.org/dev/peps/pep-0008">https://www.python.org | </a></div>
      <div style="float: right">Created with <a
          href="https://linqable.pro/">Linqable</a></div>
    </div>
  </div>
</div>







<div class="embed"
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://kevinpeters.net/thumbnails/auto-formatters-for-python-opengraph.png); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://www.kevinpeters.net/auto-formatters-for-python">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        The 3 best auto formatters for Python</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      🔥Save time by using the best auto formatters for python - a comparison to find the best. The auto formatters in this blog article can be used online or in editors like vscode and feature Python 2 and Python 3.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://www.kevinpeters.net/auto-formatters-for-python">https://www.kevinpeters.net | </a></div>
      <div style="float: right">Created with <a
          href="https://linqable.pro/">Linqable</a></div>
    </div>
  </div>
</div>







<div class="embed"
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://github.com/google/yapf">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        google/yapf</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      A formatter for Python files. Contribute to google/yapf development by creating an account on GitHub.</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://github.com/google/yapf">https://github.com | </a></div>
      <div style="float: right">Created with <a
          href="https://linqable.pro/">Linqable</a></div>
    </div>
  </div>
</div>







<div class="embed"
  style="display:flex; flex-wrap: wrap; border: 1px solid #d4d4d4; width:100%; margin-bottom: 1rem">

  
  <div class="embed-image"
    style="flex:1; background: url(https://avatars1.githubusercontent.com/u/150309?s=400&amp;v=4); background-size:cover; background-position:center; min-height: 120px">
  </div>
  

  <div class="embed-content" style="flex:3; padding: 1rem;"><a
      href="https://github.com/hhatto/autopep8">
      <div class="title"
        style="font-weight: 800; margin-bottom: 1rem; font-size:120%">
        hhatto/autopep8</div>
    </a>
    <div class="embed-description" style="margin-bottom:1rem; font-size:80%">
      A tool that automatically formats Python code to conform to the PEP 8 style guide. - hhatto/autopep8</div>
    <div class="embed-meta" style="font-size:60%">
      <div style="float:left; max-width:80%"><a
          href="https://github.com/hhatto/autopep8">https://github.com | </a></div>
      <div style="float: right">Created with <a
          href="https://linqable.pro/">Linqable</a></div>
    </div>
  </div>
</div></p>
]]></content>
        </item>
        
        <item>
            <title>Bought a Year-Long License for GoLand</title>
            <link>https://preslav.me/2019/08/29/goland-license/</link>
            <pubDate>Thu, 29 Aug 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/08/29/goland-license/</guid>
            <description>NOTE: This is not a paid product endorsement. I&amp;rsquo;m just a happy customer. I have recently bought a full license of GoLand for a year. The trial served me well for a few months, but the IDE shutting down automatically after every 30 minutes of work, became way too annoying. I know, I shouldn&amp;rsquo;t rely on an IDE for writing Go, when VS Code or Vim would have worked just fine.</description>
            <content type="html"><![CDATA[

<h5 id="note-this-is-not-a-paid-product-endorsement-i-m-just-a-happy-customer">NOTE: This is not a paid product endorsement. I&rsquo;m just a happy customer.</h5>

<p>I have recently bought a full license of <a href="https://www.jetbrains.com/go/">GoLand</a> for a year. The trial served me well for a few months, but the IDE shutting down automatically after every 30 minutes of work, became way too annoying. I know, I shouldn&rsquo;t rely on an IDE for writing Go, when VS Code or Vim would have worked just fine. It&rsquo;s just that the entire experience of writing, and more importantly, refactoring Go code in GoLand is so amazing.</p>

<p>Picking up a JetBrains product when coming to Go was a natural move. As a Java developer, I have used IntelliJ Idea for years. I am used to much of the refactoring goodness, and know most of the available key shortcuts by heart, so switching literally took me a minute. This one is a big plus, and JetBrains deserves a big thanks for it. Knowing that developers often switch platforms, offering the same experience everywhere is nothing short of great. I know, I know, in reality, those &ldquo;IDE&rdquo;s are nothing other than platform-specific plugins that run in the same core. One gets a similar experience when installing various officially-supported plugins for say, Visual Studio Code.</p>

<p>Almost. The official language support plugin for Go in VS Code uses much of the available open-source tooling for Go, developed by the community. While this is great, it also presents a temporary drawback. A large portion of the tooling still relies on projects using <code>GOPATH</code> and need to be updated in order to support Go modules. Since all of my projects have used Go modules from the start, I have experienced issues doing even basic refactoring in VS Code (e.g. renaming across the project)</p>

<p>The transition is happening and will sooner or later be no longer a problem. Luckily, GoLand does not seem to suffer from much of this, because it uses a different mechanism of indexing and analyzing code. I think that I&rsquo;ll stick to it for a year while community tooling gets to a stage, where modules are fully supported.</p>
]]></content>
        </item>
        
        <item>
            <title></title>
            <link>https://preslav.me/microblog/201905120928/</link>
            <pubDate>Sun, 12 May 2019 07:28:07 +0000</pubDate>
            
            <guid>https://preslav.me/microblog/201905120928/</guid>
            <description>Back to Wunderlist After what seems like an eternity (close to 3 years), I decided to install and try Wunderlist again. For those who have followed the story, Microsoft bought Wunderlist in 2015 for an undisclosed, but very high amount of money (in the 100s of millions of dollars). The intention was to create what came out to be Microsoft To-Do - a half-baked (IMHO) product that not only did not stick with me, but pushed me away from using a ToDo app whatsoever.</description>
            <content type="html"><![CDATA[

<h1 id="back-to-wunderlist">Back to Wunderlist</h1>

<p>After what seems like an eternity (close to 3 years), I decided to install and try <a href="https://www.wunderlist.com/">Wunderlist</a> again. For those who have followed the story, Microsoft bought Wunderlist in 2015 for an undisclosed, but very high amount of money (in the 100s of millions of dollars). The intention was to create what came out to be <a href="https://todo.microsoft.com/en-us">Microsoft To-Do</a> - a half-baked (IMHO) product that not only did not stick with me, but pushed me away from using a ToDo app whatsoever.</p>

<p>Three years later, Wunderlist still seems alive and kicking. Despite claims that it will eventually be replaced by Microsoft To-Do there are no signs of this happening (yet). In fact, there might be a <a href="https://www.theverge.com/2018/3/21/17146308/microsoft-wunderlist-to-do-app-acquisition-complicated">deeper angle</a> to the story, which is why I am hopeful in Wunderlist&rsquo;s resurrection and second life.</p>

<p>I&rsquo;ve just installed the app again and after signing up, I was met by the same pleasant user experience (and all the unfinished ToDos) I left three years ago. Let&rsquo;s see how the story unfolds.</p>

<p><img src="https://dr0wv9n0kx6h5.cloudfront.net/4f8fe5befb0b95eda676c05faea99bfed39c0b42/content/twodevices@2x.png" alt="" /></p>
]]></content>
        </item>
        
        <item>
            <title>Developer Tool Tip: DevDocs</title>
            <link>https://preslav.me/2019/05/03/dev-tip-devdocs/</link>
            <pubDate>Fri, 03 May 2019 22:00:00 +0000</pubDate>
            
            <guid>https://preslav.me/2019/05/03/dev-tip-devdocs/</guid>
            <description>Here is a handy developer tool tip for today: DevDocs
As developers, we spend a large portion of our time, searching for the &amp;ldquo;name of the function abc that did thing xyz&amp;rdquo;. Not surprisingly, sites like StackOverflow have become so popular. Yet, SO answers are often full of additional information, and what we need most of the time is a simple search on top of the docs themselves. Years ago, I used a tool for macOS, called Dash.</description>
            <content type="html"><![CDATA[<p>Here is a handy developer tool tip for today: <a href="https://devdocs.io/">DevDocs</a></p>

<p>As developers, we spend a large portion of our time, searching for the <em>&ldquo;name of the function abc that did thing xyz&rdquo;</em>. Not surprisingly, sites like StackOverflow have become so popular. Yet, SO answers are often full of additional information, and what we need most of the time is a simple search on top of the docs themselves. Years ago, I used a tool for macOS, called <a href="https://kapeli.com/dash">Dash</a>. It was a good tool at the time, but eventually, I stopped using it, because it was accessing my (still spinning) HDD way too much at the time.</p>

<p>A couple of years ago, I discovered <a href="https://devdocs.io/">DevDocs</a>.</p>

<p><img src="https://user-images.githubusercontent.com/8784712/27121730-11676ba8-511b-11e7-8c01-00444ee8501a.png" alt="" /></p>

<p>image source: <a href="https://electronjs.org/apps/devdocs-app">electronjs.org</a></p>

<p>It is the same idea, but running on the Web (supports offline as well) and accessible from everywhere. It has been my primary go-to docs site for much of my non-library-specific stuff (programming language syntax, standard libraries, popular frameworks). The default selection of docsets is pretty satisfactory and there are many coming all the time. The real magic here is the search:</p>

<p><img src="/images/2019/05/2019-05-06 15-01-27.2019-05-06 15_02_36.gif" style="width: 320px !important" /></p>

<p>There are quite a few options for bringing DevDocs to your daily workflow. For instance, a <a href="https://marketplace.visualstudio.com/items?itemName=deibit.devdocs">VS Code plugin</a>, an <a href="https://github.com/yannickglt/alfred-devdocs">Alfred workflow</a>, a <a href="https://github.com/egoist/devdocs-app">desktop app</a>, etc.</p>
]]></content>
        </item>
        
    </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Random Bits of Wisdom</title>
    <link>https://preslav.me/tags/java/</link>
    <description>Recent content in Java on Random Bits of Wisdom</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 17 Jan 2020 08:35:04 +0000</lastBuildDate>
    
	<atom:link href="https://preslav.me/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reflecting on My Experience With Go, One Year After</title>
      <link>https://preslav.me/2020/01/17/reflecting-on-my-experience-with-go-one-year-after/</link>
      <pubDate>Fri, 17 Jan 2020 08:35:04 +0000</pubDate>
      
      <guid>https://preslav.me/2020/01/17/reflecting-on-my-experience-with-go-one-year-after/</guid>
      <description>In my little more than a year day-to-day developer experience with Go, I have so far learned three things:
 I can change my entire view of how programming works, even after 12+ years of doing it in one form or another. People are blaming Java for all the wrong reasons People are praising Go for all the wrong reasons  Let me explain. This post is not about saying that ‚Äúlanguage A is better than language B‚Äù, or vice versa.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://preslav.me/microblog/201908031736/</link>
      <pubDate>Fri, 02 Aug 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/microblog/201908031736/</guid>
      <description>My first attempt to try out compiling a Micronaut app to a native GraalVM image ended up with a disastrous &amp;ldquo;Out of Memory&amp;rdquo;. After more than ten minutes of a spinning fan (on a 4-core machine with 16GB RAM) that&amp;rsquo;s what I got:
I am fully aware that the hoops that the GraalVM compile has to go through are simply phenomenal, and I have heard many good words about the level of performance that apps are able to reach this way.</description>
    </item>
    
    <item>
      <title>My Reasons to Consider Go Coming from Java</title>
      <link>https://preslav.me/2019/05/07/my-reasons-to-consider-go-coming-from-java/</link>
      <pubDate>Tue, 07 May 2019 22:00:00 +0000</pubDate>
      
      <guid>https://preslav.me/2019/05/07/my-reasons-to-consider-go-coming-from-java/</guid>
      <description>I hate listicles, and I am highly hoping that this doesn‚Äôt become one of them. Yet, I somehow felt the need to write down the reasons why I am giving Go a second (or maybe, third ü§î) chance. To the Java developers out there, searching for a new weapon of choice, I am hoping that this will give you a bit of perspective. This is not a description of Go-specific features.</description>
    </item>
    
    <item>
      <title>Connecting to a MongoDB Instance Using KMongo</title>
      <link>https://preslav.me/2018/12/28/mongodb-kmongo-connection-string/</link>
      <pubDate>Fri, 28 Dec 2018 16:45:41 +0000</pubDate>
      
      <guid>https://preslav.me/2018/12/28/mongodb-kmongo-connection-string/</guid>
      <description>Often, the seemingly simple things can make you spend hours chasing around your tail. Like trying to connect to a MongoDB instance using KMongo.
Basically, if you have checked out the KMongo quick start, setting up a client and fetching some data should be extremely easy:
val client = KMongo.createClient() //get com.mongodb.MongoClient new instance val database = client.getDatabase(&amp;#34;test&amp;#34;) //normal java driver usage val col = database.getCollection&amp;lt;Jedi&amp;gt;() //KMongo extension method The quick start tutorial assumes that your DB resides on mongodb://localhost:27017, but in reality, your MongoDB connection string looks more like this:</description>
    </item>
    
    <item>
      <title>How Much of &#34;The Kotlin Way&#34; Is the Right Way?</title>
      <link>https://preslav.me/2018/12/28/the-kotlin-way/</link>
      <pubDate>Fri, 28 Dec 2018 07:10:00 +0000</pubDate>
      
      <guid>https://preslav.me/2018/12/28/the-kotlin-way/</guid>
      <description>NOTE: This post was originally intended to provoke a discussion, and despite its length, the original goal is still the same. Please, share your feedback on Twitter, Reddit, or Dev.to.
My experience with the JVM dates back from around 2010. Java in those days was a bit different from todays&amp;rsquo; standpoint. Java 6 was the current standard at the time, but most projects I got to work on, were stuck between Java 4 and 5.</description>
    </item>
    
  </channel>
</rss>